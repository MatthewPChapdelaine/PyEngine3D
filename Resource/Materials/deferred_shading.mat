{'binary_data': b'\x80\x03cnumpy.core.multiarray\n_reconstruct\nq\x00cnumpy\nndarray\nq\x01K\x00\x85q\x02C\x01bq\x03\x87q\x04Rq'
                b'\x05(K\x01M\xe0b\x85q\x06cnumpy\ndtype\nq\x07X\x02\x00\x00\x00u1q\x08K\x00K\x01\x87q\tRq\n(K\x03X'
                b'\x01\x00\x00\x00|q\x0bNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\x0cb\x89B\xe0b\x00\x00\n\x00\x00\x00'
                b'\xcc\x9e\xb9\xdd]V\xd7w*\x04]\x99J\x14\xecw\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00`\x00\x00\x00x\x16\x00\x00'
                b'\xe0b\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x1e\x00\x00\x00\x1e\x00\x00\x00'
                b'\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x97\x01\x00\x00\x15\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00;\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x1f\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x003\x00\x00\x00\x13\x00\x00\x00\x03\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xe0b\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\xbfu\x85\x9369\xb6\x8d\xbfu\x85\x9369\xb6\x8d\xf4G\xd9/\xb0\xad\xe5\xaf'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x0f\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x14\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00'
                b'\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00'
                b'\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00@\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00/\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x008\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00'
                b'\xc0\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x0c\x00\x00\x00H\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00\x98\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00U\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00b\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xa0\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x0b\x00\x00\x00p\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x0f\x00\x00\x00|\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x8c\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00'
                b'\x04\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00'
                b'\x9b\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00'
                b'\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x08\x00\x00\x00\xa5\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00\x90\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\xae\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00'
                b'\xc3\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\xce\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00'
                b'\xda\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00'
                b'\x00\x01\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\xe5\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x000\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\xf3\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x04\x00\x00\x00\xf8\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\xfd\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x0f\x00\x00\x00\t\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x19\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00'
                b'\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x03\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80$Q\x82'
                b"\xdaU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00'\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"
                b'^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00'
                b'\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xa0!Q\x82'
                b'\xdaU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x007\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00'
                b'\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00X"Q\x82'
                b'\xdaU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00H\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00'
                b'\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x06\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x000 Q\x82'
                b'\xdaU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00W\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'`\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00'
                b'\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x08\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x07\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00e\x01\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x06\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x05\x00\x00\x00\x10#Q\x82\xdaU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00{\x01\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x0c\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x04\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x06\x00\x00\x008%Q\x82\xdaU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00'
                b'\x8a\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0e\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x05\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x05\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\xc8#Q\x82\xdaU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00'
                b'\x06\x00\x00\x00\x07\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00'
                b'\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00BACKBUFFER_SIZE\x00CAMERA_POSITION\x00INV_PROJECTION\x00INV_VIEW\x00INV_VIEW'
                b'_ORIGIN\x00JITTER_DELTA\x00JITTER_FRAME\x00JITTER_OFFSET\x00LIGHT_COLOR\x00LIGHT_DIRECTION\x00LIGHT_POSITI'
                b'ON\x00MOUSE_POS\x00NEAR_FAR\x00PREV_VIEW_PROJECTION\x00PROJECTION\x00RENDER_SSAO\x00RENDER_SSR\x00SHADOW_MATR'
                b'IX\x00TIME\x00VIEW\x00VIEW_ORIGIN\x00VIEW_PROJECTION\x00texture_depth\x00texture_diffuse\x00texture_mater'
                b'ial\x00texture_normal\x00texture_probe\x00texture_scene_reflect\x00texture_shadow\x00texture_ssao\x00\x0e'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x0f\x00\x00\x00\x04'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00vs_in_position\x00vs_in_tex_coord\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00'
                b'\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x03\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00!\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x13\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x01\x00\x00\x00\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b"\x00\x00\x0b\x00\x00\x00'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x04\x00"
                b'\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xffvs_output.position\x00vs_output.tex_coord\x00gl_Position\x00\t\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00fs_output\x00\x0e\x00\x00\x00\x00'
                b'\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x03\x03\xff\xff\xff\xff\x00\x00\x00p\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0e'
                b'\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00 \x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\r\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x01\x01\xff\xff\xff\xff'
                b'\x00\x00\x00\xb0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00,\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x02\x02'
                b'\xff\xff\xff\xff\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02'
                b'\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00lightConstants\x00sceneConstants\x00viewConstan'
                b'ts\x00viewProjection\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xffQ\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x0f\x00'
                b'\x00\x00\x0f\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffP\x8b\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00vs_in_position\x00vs_in_tex_coord\x00\x13\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffP\x8b\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00vs_output.tex_coord\x00\t\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00fs_output\x00\x00\xfc\x01\x00\x00!!NVvp5.0\nOPTION NV_internal;\nOPTION'
                b' NV_bindless_texture;\n CBUFFER buf0[] = { program.buffer[0] };\nCBUFFER buf1[] = { program.buffer[1] };\nC'
                b'BUFFER buf2[] = { program.buffer[2] };\nCBUFFER buf3[] = { program.buffer[3] };\nATTRIB vertex_attrib[] = '
                b'{ vertex.attrib[0..4] };\nOUTPUT result_attrib[] = { result.attrib[0..1] };\nTEMP T;\nMOV.F result.attrib[1'
                b'].xyz, vertex.attrib[0];\nMOV.F result.position.xyz, vertex.attrib[0];\nMOV.F result.attrib[0].xy, vertex.'
                b'attrib[4];\nMOV.F result.position.w, {1, 0, 0, 0}.x;\nEND\n\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xac,\x00\x00!!NVfp5.0\nOPTION NV_internal;\nOPTION NV_gpu_'
                b'program_fp64;\nOPTION NV_bindless_texture;\n PARAM c[8] = { program.local[0..7] };\nCBUFFER buf0[] = { prog'
                b'ram.buffer[0] };\nCBUFFER buf1[] = { program.buffer[1] };\nCBUFFER buf2[] = { program.buffer[2] };\nCBUFFER'
                b' buf3[] = { program.buffer[3] };\nATTRIB fragment_attrib[] = { fragment.attrib[0..0] };\nTEMP R0, R1, R2, '
                b'R3, R4, R5, R6, R7, R8;\nLONG TEMP D0, D1;\nTEMP T;\nTEMP RC, HC;\nTEMP lmem0[64];\nOUTPUT result_color0 = re'
                b'sult.color;\nMOV.F lmem0[0].xy, {-0.511962473, -0.482793808, 0, 0};\nMOV.F lmem0[1].xy, {-0.217126399, -0.'
                b'476872593, 0, 0};\nMOV.F lmem0[2].xy, {-0.755293071, -0.242650703, 0, 0};\nMOV.F lmem0[3].xy, {-0.71367651'
                b'2, -0.449661404, 0, 0};\nMOV.F lmem0[4].xy, {-0.593884885, -0.68956542, 0, 0};\nMOV.F lmem0[5].xy, {-0.314'
                b'800292, -0.704765379, 0, 0};\nMOV.F lmem0[6].xy, {-0.422149986, -0.202460706, 0, 0};\nMOV.F lmem0[7].xy, {'
                b'-0.946681619, -0.201450795, 0, 0};\nMOV.F lmem0[8].xy, {-0.840906322, -0.0346577801, 0, 0};\nMOV.F lmem0[9'
                b'].xy, {-0.651757181, -0.0747632608, 0, 0};\nMOV.F lmem0[10].xy, {-0.104182199, -0.0252121408, 0, 0};\nMOV.'
                b'F lmem0[11].xy, {-0.304271191, -0.0219543092, 0, 0};\nMOV.F lmem0[12].xy, {-0.508230686, 0.107980601, 0, '
                b'0};\nMOV.F lmem0[13].xy, {-0.0842987671, -0.231629804, 0, 0};\nMOV.F lmem0[14].xy, {-0.987912774, 0.111368'
                b'299, 0, 0};\nMOV.F lmem0[15].xy, {-0.385963589, 0.336354494, 0, 0};\nMOV.F lmem0[16].xy, {-0.192533404, 0.'
                b'178728804, 0, 0};\nMOV.F lmem0[17].xy, {0.00325618195, 0.138135001, 0, 0};\nMOV.F lmem0[18].xy, {-0.870683'
                b'73, 0.301067889, 0, 0};\nMOV.F lmem0[19].xy, {-0.698203802, 0.190432593, 0, 0};\nMOV.F lmem0[20].xy, {0.19'
                b'7504297, 0.222131699, 0, 0};\nMOV.F lmem0[21].xy, {0.1507788, 0.420416802, 0, 0};\nMOV.F lmem0[22].xy, {0.'
                b'351405591, 0.0986557901, 0, 0};\nMOV.F lmem0[23].xy, {0.155878305, -0.0846093521, 0, 0};\nMOV.F lmem0[24].'
                b'xy, {-0.0684977993, 0.446199298, 0, 0};\nMOV.F lmem0[25].xy, {0.378052205, 0.347867906, 0, 0};\nMOV.F lmem'
                b'0[26].xy, {0.395679891, -0.146917701, 0, 0};\nMOV.F lmem0[27].xy, {0.583897471, 0.105494298, 0, 0};\nMOV.F'
                b' lmem0[28].xy, {0.615510523, 0.324571609, 0, 0};\nMOV.F lmem0[29].xy, {0.392862409, -0.44176209, 0, 0};\nM'
                b'OV.F lmem0[30].xy, {0.174988404, -0.420217514, 0, 0};\nMOV.F lmem0[31].xy, {0.681372702, -0.2424808, 0, 0'
                b'};\nMOV.F lmem0[32].xy, {-0.670771122, 0.491274089, 0, 0};\nMOV.F lmem0[33].xy, {0.000513052801, -0.805833'
                b'399, 0, 0};\nMOV.F lmem0[34].xy, {0.0270301308, -0.601072788, 0, 0};\nMOV.F lmem0[35].xy, {-0.165818796, -'
                b'0.969567418, 0, 0};\nMOV.F lmem0[36].xy, {0.406059086, -0.710072577, 0, 0};\nMOV.F lmem0[37].xy, {0.771339'
                b'595, -0.471365899, 0, 0};\nMOV.F lmem0[38].xy, {0.573212028, -0.515439987, 0, 0};\nMOV.F lmem0[39].xy, {-0'
                b'.344889611, -0.904649675, 0, 0};\nMOV.F lmem0[40].xy, {0.126854405, -0.987469196, 0, 0};\nMOV.F lmem0[41].'
                b'xy, {0.741853297, -0.666736603, 0, 0};\nMOV.F lmem0[42].xy, {0.349252194, 0.592466176, 0, 0};\nMOV.F lmem0'
                b'[43].xy, {0.567989707, 0.534346521, 0, 0};\nMOV.F lmem0[44].xy, {0.566341698, 0.770869792, 0, 0};\nMOV.F l'
                b'mem0[45].xy, {0.737549722, 0.669141471, 0, 0};\nMOV.F lmem0[46].xy, {0.227199405, -0.616350174, 0, 0};\nMO'
                b'V.F lmem0[47].xy, {0.231284395, 0.872565925, 0, 0};\nMOV.F lmem0[48].xy, {0.421699286, 0.900283813, 0, 0}'
                b';\nMOV.F lmem0[49].xy, {0.426209092, -0.901328385, 0, 0};\nMOV.F lmem0[50].xy, {0.200140804, -0.808381021,'
                b' 0, 0};\nMOV.F lmem0[51].xy, {0.149394006, 0.665076315, 0, 0};\nMOV.F lmem0[52].xy, {-0.0964037627, 0.9843'
                b'73629, 0, 0};\nMOV.F lmem0[53].xy, {0.768232822, -0.0727384388, 0, 0};\nMOV.F lmem0[54].xy, {0.0414658412,'
                b' 0.831318378, 0, 0};\nMOV.F lmem0[55].xy, {0.970526576, -0.114330404, 0, 0};\nMOV.F lmem0[56].xy, {0.96700'
                b'1677, 0.129338503, 0, 0};\nMOV.F lmem0[57].xy, {0.901503682, -0.330694914, 0, 0};\nMOV.F lmem0[58].xy, {-0'
                b'.50856477, 0.753417671, 0, 0};\nMOV.F lmem0[59].xy, {0.905550122, 0.375839293, 0, 0};\nMOV.F lmem0[60].xy,'
                b' {0.759994626, 0.1809109, 0, 0};\nPK64.U D0.x, c[3];\nMOV.F lmem0[61].xy, {-0.2483695, 0.794295192, 0, 0};'
                b'\nTEX.F R0.x, fragment.attrib[0], handle(D0.x), 2D;\nMOV.F lmem0[62].xy, {-0.424105197, 0.558108687, 0, 0}'
                b';\nSEQ.F R0.y, R0.x, {1, 0, 0, 0}.x;\nTRUNC.U.CC HC.x, R0.y;\nMOV.F lmem0[63].xy, {-0.1020106, 0.672446787,'
                b' 0, 0};\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nKIL NE.x;\nENDIF;\nLDC.F32X4 R1, buf1[352];\nMUL.F R0, R0'
                b'.x, R1;\nMAD.F R1, R0, {2, 0, 0, 0}.x, -R1;\nMAD.F R3.xy, fragment.attrib[0], {2, -1, 0, 0}.x, {2, -1, 0, '
                b'0}.y;\nLDC.F32X4 R0, buf1[336];\nMUL.F R2, R3.y, R0;\nLDC.F32X4 R0, buf1[320];\nMAD.F R0, R3.x, R0, R2;\nADD.'
                b'F R2, R0, R1;\nLDC.F32X4 R0, buf1[368];\nADD.F R2, R2, R0;\nLDC.F32X4 R1, buf1[80];\nMUL.F R1, R2.y, R1;\nLDC'
                b'.F32X4 R0, buf1[64];\nMAD.F R1, R2.x, R0, R1;\nLDC.F32X4 R0, buf1[96];\nMAD.F R1, R2.z, R0, R1;\nLDC.F32X4 R'
                b'0, buf1[112];\nMAD.F R1, R2.w, R0, R1;\nDIV.F R3.xyz, R1, R1.w;\nLDC.F32X4 R0, buf3[64];\nMUL.F R1, R3.y, R0'
                b';\nLDC.F32X4 R0, buf3[48];\nMAD.F R1, R3.x, R0, R1;\nLDC.F32X4 R0, buf3[80];\nMAD.F R2, R3.z, R0, R1;\nLDC.F3'
                b'2X4 R0, buf3[96];\nADD.F R2, R2, R0;\nDIV.F R2.xyz, R2, R2.w;\nLDC.F32X4 R1.xyz, buf1[384];\nADD.F R1.xyz, R'
                b'1, -R3;\nDP3.F R0.x, R1, R1;\nRSQ.F R0.x, R0.x;\nMUL.F R6.xyz, R0.x, R1;\nPK64.U D0.x, c[0];\nTEX.F R1, fragm'
                b'ent.attrib[0], handle(D0.x), 2D;\nPK64.U D1.x, c[2];\nTEX.F R0.xyz, fragment.attrib[0], handle(D1.x), 2D;\n'
                b'MAD.F R4.xyz, R2, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nMAD.F R2.xyz, R0, {2, -1, 0, 0}.x, {2, -1, 0, 0}.y'
                b';\nLDC.F32X4 R0.xyz, buf3[16];\nDP3.F R0.w, R2, R2;\nRSQ.F R0.w, R0.w;\nDP3.F R2.w, R0, R0;\nMUL.F R2.xyz, R0'
                b'.w, R2;\nRSQ.F R0.w, R2.w;\nMUL.F R3.xyz, R0.w, R0;\nPK64.U D0.x, c[4];\nTXQ R0.xy, {0, 0, 0, 0}, handle(D0.'
                b'x), 2D;\nI2F.S R0.xy, R0;\nPK64.U D0.x, c[1];\nDP2.F R0.z, fragment.attrib[0], {12.9898005, 78.2330017, 0, '
                b'0};\nRCP.F R0.x, R0.x;\nRCP.F R0.y, R0.y;\nSIN.F R0.z, R0.z;\nMUL.F R5.xy, R0, {2, 0, 0, 0}.x;\nMUL.F R0.x, R'
                b'0.z, {43758.5469, 0, 0, 0};\nMUL.F R1.w, R1, {10, 0, 0, 0}.x;\nTEX.F R8.xyz, fragment.attrib[0], handle(D0'
                b'.x), 2D;\nMOV.F R2.w, {0, 0, 0, 0}.x;\nFRC.F R3.w, R0.x;\nMOV.S R4.w, {0, 0, 0, 0}.x;\nREP.S {4, 0, 0, 0};\nI'
                b'2F.S R0.y, R4.w;\nLDC.F32 R0.x, buf0[4];\nADD.F R0.x, R0, R0.y;\nMAD.F R0.x, R3.w, {64, 0, 0, 0}, R0;\nTRUNC'
                b'.S R0.x, R0;\nMOD.S R0.x, R0, {64, 0, 0, 0}.x;\nMOV.U R0.x, R0;\nMOV.F R0.xy, lmem0[R0.x].xyzw;\nMAD.F R0.xy'
                b', R0, R5, R4;\nPK64.U D0.x, c[4];\nTXG.F R0, R0, handle(D0.x), 2D;\nSLE.F R0.x, R0, R4.z;\nTRUNC.U.CC HC.x, '
                b'R0;\nIF NE.x;\nMOV.F R0.x, {0, 0, 0, 0};\nELSE;\nMOV.F R0.x, {1, 0, 0, 0};\nENDIF;\nSLE.F R0.y, R0, R4.z;\n'
                b'TRUNC.U.CC HC.x, R0.y;\nADD.F R2.w, R2, R0.x;\nIF NE.x;\nMOV.F R0.x, {0, 0, 0, 0};\nELSE;\nMOV.F R0.x, {1, 0,'
                b' 0, 0};\nENDIF;\nSLE.F R0.y, R0.z, R4.z;\nTRUNC.U.CC HC.x, R0.y;\nADD.F R2.w, R2, R0.x;\nIF NE.x;\nMOV.F R'
                b'0.x, {0, 0, 0, 0};\nELSE;\nMOV.F R0.x, {1, 0, 0, 0};\nENDIF;\nSLE.F R0.y, R0.w, R4.z;\nTRUNC.U.CC HC.x, R0.y;'
                b'\nADD.F R2.w, R2, R0.x;\nIF NE.x;\nMOV.F R0.x, {0, 0, 0, 0};\nELSE;\nMOV.F R0.x, {1, 0, 0, 0};\nENDIF;\nADD'
                b'.F R2.w, R2, R0.x;\nADD.S R4.w, R4, {1, 0, 0, 0}.x;\nENDREP;\nDP3.F R4.x, R2, R3;\nMAX.F R5.w, R4.x, {0, 0, '
                b'0, 0}.x;\nMAD.F R4.xyz, -R2, R5.w, R3;\nDP3.F R0.w, R2, R6;\nMAX.F R3.w, R0, {0.00100000005, 0, 0, 0}.x;\nMA'
                b'D.F R0.xyz, R3.w, -R2, R6;\nDP3.F R4.w, R0, R0;\nRSQ.F R4.w, R4.w;\nMUL.F R0.xyz, R4.w, R0;\nDP3.F R5.x, R4,'
                b' R4;\nRSQ.F R5.x, R5.x;\nMUL.F R4.xyz, R5.x, R4;\nDP3.F R0.y, R0, R4;\nMIN.F R4.w, R8.x, {1, 0, 0, 0}.x;\nMAX'
                b'.F R4.w, R4, {0.0500000007, 0, 0, 0}.x;\nADD.F R0.x, R4.w, {0.0900000036, 0, 0, 0};\nMAD.F R0.z, |R3.w|, {'
                b'-0.0187292993, 0.0742610022, 0, 0}.x, {-0.0187292993, 0.0742610022, 0, 0}.y;\nMAD.F R0.z, |R3.w|, R0, {-0.212'
                b'114394, 0, 0, 0}.x;\nMAD.F R4.x, |R3.w|, R0.z, {1.57072878, 0, 0, 0};\nADD.F R4.y, -|R3.w|, {1, 0, 0, 0}.x'
                b';\nRSQ.F R4.y, R4.y;\nDIV.F R4.z, R4.x, R4.y;\nSLT.F R0.z, R3.w, {0, 0, 0, 0}.x;\nTRUNC.U R0.z, R0;\nI2F.U R4'
                b'.y, R0.z;\nMUL.F R5.x, R4.y, R4.z;\nADD.F R4.x, -|R5.w|, {1, 0, 0, 0};\nMAD.F R4.z, -R5.x, {2, 0, 0, 0}.x, '
                b'R4;\nMUL.F R2.w, R2, {0.0625, 0, 0, 0}.x;\nPK64.U D0.x, c[7];\nMAX.F R0.y, R0, {0, 0, 0, 0}.x;\nDIV.F R0.x, '
                b'R4.w, R0.x;\nMUL.F R0.x, R0, R0.y;\nMAD.F R0.y, |R5.w|, {-0.0187292993, 0.0742610022, 0, 0}.x, {-0.0187292'
                b'993, 0.0742610022, 0, 0};\nMAD.F R0.y, |R5.w|, R0, {-0.212114394, 0, 0, 0}.x;\nMAD.F R0.z, |R5.w|, R0.y, {'
                b'1.57072878, 0, 0, 0}.x;\nRSQ.F R4.x, R4.x;\nSLT.F R0.y, R5.w, {0, 0, 0, 0}.x;\nTRUNC.U R0.y, R0;\nDIV.F R0.z'
                b', R0, R4.x;\nI2F.U R0.y, R0;\nMUL.F R4.x, R0.y, R0.z;\nMAD.F R0.z, -R4.x, {2, 0, 0, 0}.x, R0;\nMAD.F R0.y, R'
                b'0, {3.14159274, 0, 0, 0}.x, R0.z;\nMAD.F R4.x, R4.y, {3.14159274, 0, 0, 0}, R4.z;\nMAX.F R0.z, R0.y, R4.x;'
                b'\nMIN.F R4.x, R0.y, R4;\nSIN.F R0.y, R0.z;\nCOS.F R4.y, R4.x;\nSIN.F R0.z, R4.x;\nDIV.F R0.z, R0, R4.y;\nM'
                b'UL.F R0.x, R0, R0.y;\nMUL.F R0.x, R0, R0.z;\nMUL.F R4.x, R0, {0.449999988, 0, 0, 0};\nADD.F R0.xyz, R6, R3;'
                b'\nDP3.F R3.x, R0, R0;\nRSQ.F R3.x, R3.x;\nMUL.F R0.xyz, R3.x, R0;\nDP3.F R6.w, R2, R0;\nMAX.F R7.z, R6.w, {0.'
                b'00100000005, 0, 0, 0}.x;\nMUL.F R6.w, R4, {0.899999976, 0, 0, 0}.x;\nMAD.F R7.y, R3.w, R6.w, -R6.w;\nMUL.F '
                b'R7.x, R4.w, R4.w;\nMUL.F R6.w, R7.x, R7.x;\nMAD.F R7.w, R6, R7.z, -R7.z;\nADD.F R3.y, R4.w, {0.330000013, 0'
                b', 0, 0}.x;\nDIV.F R3.y, R4.w, R3.y;\nMAD.F R3.y, -R3, {0.5, 0, 0, 0}.x, R4.x;\nMAD.F R5.x, R5.w, R3.y, R5.w'
                b';\nDP3.F R3.y, R6, R0;\nMAX.F R3.y, R3, {0.00100000005, 0, 0, 0}.x;\nADD.F.SAT R4.y, -R3, {1.00999999, 0, 0'
                b', 0}.x;\nMUL.F R3.x, R8.z, R8.z;\nMUL.F R3.x, R3, {0.159663856, 0, 0, 0};\nMAX.F R4.x, R3, {0.0399999991, 0'
                b', 0, 0};\nMUL.F R7.x, R7, {0.5, 0, 0, 0};\nADD.F R3.xyz, R1, -R4.x;\nPOW.F R5.y, R4.y, {5, 0, 0, 0}.x;\nMAD.'
                b'F R4.xyz, R8.y, R3, R4.x;\nMAD.F R3.xyz, -R4, R5.y, R5.y;\nADD.F R3.xyz, R4, R3;\nMUL.F R5.xyz, R1, R5.x;\nM'
                b'AD.F R5.xyz, -R3, R5, R5;\nLDC.F32X4 R0.xyz, buf3[32];\nMUL.F R5.xyz, R0, R5;\nADD.F R7.y, R7, {1, 0, 0, 0}'
                b'.x;\nDIV.F R3.xyz, R3, R7.y;\nMAD.F R7.z, R7.w, R7, {1, 0, 0, 0}.x;\nMUL.F R7.y, R7.z, R7.z;\nDIV.F R7.z, R6'
                b'.w, R7.y;\nMAD.F R7.y, -R7.x, R5.w, R5.w;\nMAD.F R6.w, R3, -R7.x, R3;\nADD.F R7.y, R7.x, R7;\nADD.F R6.w, R6'
                b', R7.x;\nMUL.F R6.w, R6, R7.y;\nMUL.F R7.x, R7.z, {0.318309963, 0, 0, 0};\nDIV.F R3.xyz, R3, R6.w;\nMUL.F R3'
                b'.xyz, R3, R7.x;\nMUL.F R0.xyz, R3, R0;\nMUL.F R0.xyz, R0, R5.w;\nMUL.F R3.xyz, R0, R2.w;\nMUL.F R0.xyz, -R0.'
                b'w, R2;\nMAD.F R0.xyz, -R0, {2, 0, 0, 0}.x, -R6;\nTXQ R7.xy, {0, 0, 0, 0}, handle(D0.x), CUBE;\nI2F.S R7.xy,'
                b' R7;\nMIN.F R0.w, R7.x, R7.y;\nMUL.F R5.xyz, R2.w, R5;\nLG2.F R2.w, R0.w;\nMUL.F R0.w, R4, R2;\nMOV.F R0.y, -'
                b'R0;\nTXL.F R0.xyz, R0, handle(D0.x), CUBE;\nMOV.F R6.xyz, R0;\nMOV.F R7.xyz, R0;\nLDC.F32 R0.x, buf0[8];\nSEQ'
                b'.F R0.x, R0, {1, 0, 0, 0};\nTRUNC.U.CC HC.x, R0;\nMOV.F R2.y, -R2;\nADD.F R2.w, R2, {-1, 0, 0, 0}.x;\nMUL.F '
                b'R3.xyz, R3, {0.25, 0, 0, 0}.x;\nTXL.F R2.xyz, R2, handle(D0.x), CUBE;\nIF NE.x;\nPK64.U D0.x, c[6];\nTEX.F R'
                b'0, fragment.attrib[0], handle(D0.x), 2D;\nADD.F R0.xyz, R0, -R6;\nMAD.F R7.xyz, R0.w, R0, R6;\nENDIF;\nMAD.F'
                b' R0, R4.w, {-1, -0.0274999999, -0.572000027, 0.0219999999}, {1, 0.0425000004, 1.03999996, -0.0399999991};\nMU'
                b'L.F R2.w, R3, {-9.27999973, 0, 0, 0}.x;\nEX2.F R5.w, R2.w;\nADD.F.SAT R2.w, -R3, {1.00999999, 0, 0, 0}.x;\n'
                b'MUL.F R4.w, R0.x, R0.x;\nMIN.F R3.w, R4, R5;\nMAD.F R0.x, R3.w, R0, R0.y;\nPOW.F R2.w, R2.w, {5, 0, 0, 0}.x'
                b';\nMAD.F R6.xyz, -R4, R2.w, R2.w;\nMAD.F.SAT R8.zw, R0.x, {-1.03999996, 1.03999996, 0, 0}.xyxy, R0;\nADD.F '
                b'R0.xyz, R4, R6;\nMAD.F R0.xyz, R0, R8.z, R8.w;\nMAD.F R3.xyz, R0, R7, R3;\nMAD.F R2.xyz, R1, R2, R5;\nMAD.F '
                b'R0.xyz, -R8.y, R2, R2;\nADD.F R0.xyz, R0, R3;\nMAX.F R4.xyz, R0, {0, 0, 0, 0}.x;\nLDC.F32 R0.x, buf0[12];\nS'
                b'EQ.F R0.x, R0, {1, 0, 0, 0};\nTRUNC.U.CC HC.x, R0;\nMOV.F R2.xyz, R4;\nMOV.F R3.xyz, R4;\nMOV.F result_color'
                b'0.xyz, R4;\nMOV.F result_color0.w, R1;\nIF NE.x;\nPK64.U D0.x, c[5];\nTEX.F R0.x, fragment.attrib[0], handle'
                b'(D0.x), 2D;\nMUL.F R0.xyz, R2, R0.x;\nMOV.F R3.xyz, R0;\nMOV.F result_color0.xyz, R0;\nENDIF;\nMAD.F result_c'
                b'olor0.xyz, R1, R1.w, R3;\nMOV.F result_color0.w, {1, 0, 0, 0}.x;\nEND\n\x08\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00 \x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x01\x01\x01\x01\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q\rtq\x0eb.',
 'binary_format': c_uint(36385),
 'include_files': {'Resource/Shaders/PCFKernels.glsl': '2017-12-20 01:08:59.723794',
                   'Resource/Shaders/quad.glsl': '2017-12-28 03:50:53.162797',
                   'Resource/Shaders/scene_constants.glsl': '2018-01-19 04:58:44.116801',
                   'Resource/Shaders/shading.glsl': '2017-12-20 01:08:59.863790',
                   'Resource/Shaders/utility.glsl': '2017-12-20 01:08:59.903789'},
 'macros': {},
 'material_components': [],
 'shader_codes': {GL_FRAGMENT_SHADER: '#version 430 core\n'
                                      '#define MATERIAL_COMPONENTS 1\n'
                                      '#define GL_FRAGMENT_SHADER 1\n'
                                      '\n'
                                      '\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      'layout(std140, binding=0) uniform sceneConstants\n'
                                      '{\n'
                                      '    float TIME;\n'
                                      '    float JITTER_FRAME;\n'
                                      '    float RENDER_SSR;\n'
                                      '    float RENDER_SSAO;\n'
                                      '    vec2 BACKBUFFER_SIZE;\n'
                                      '    vec2 MOUSE_POS;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=1) uniform viewConstants\n'
                                      '{\n'
                                      '    mat4 VIEW;\n'
                                      '    mat4 INV_VIEW;\n'
                                      '    mat4 VIEW_ORIGIN;\n'
                                      '    mat4 INV_VIEW_ORIGIN;\n'
                                      '    mat4 PROJECTION;\n'
                                      '    mat4 INV_PROJECTION;\n'
                                      '    vec4 CAMERA_POSITION;\n'
                                      '    vec2 NEAR_FAR;\n'
                                      '    vec2 JITTER_DELTA;\n'
                                      '    vec2 JITTER_OFFSET;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=2) uniform viewProjection\n'
                                      '{\n'
                                      '    mat4 VIEW_PROJECTION;\n'
                                      '    mat4 PREV_VIEW_PROJECTION;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=3) uniform lightConstants\n'
                                      '{\n'
                                      '    vec4 LIGHT_POSITION;\n'
                                      '    vec4 LIGHT_DIRECTION;\n'
                                      '    vec4 LIGHT_COLOR;\n'
                                      '    mat4 SHADOW_MATRIX;\n'
                                      '};\n'
                                      '\n'
                                      'const int MAX_BONES_PER_VERTEX = 4;\n'
                                      'const int MAX_BONES = 100;\n'
                                      'const float SHADOW_BIAS = -0.0001;\n'
                                      '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "utility.glsl"\n'
                                      '#ifndef UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                      '#define UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                      '\n'
                                      '\n'
                                      'float get_luminance(vec3 color)\n'
                                      '{\n'
                                      '    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n'
                                      '}\n'
                                      '\n'
                                      'float get_linear_luminance(vec3 LinearColor)\n'
                                      '{\n'
                                      '    return dot(LinearColor, vec3(0.3, 0.59, 0.11));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float depth_to_linear_depth(float depth)\n'
                                      '{\n'
                                      '    const float zNear = NEAR_FAR.x;\n'
                                      '    const float zFar = NEAR_FAR.y;\n'
                                      '    \n'
                                      '    depth = depth * 2.0 - 1.0;\n'
                                      '    \n'
                                      '    return 2.0 * zNear * zFar / (zFar + zNear - depth * (zFar - zNear));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float linear_depth_to_depth(float linear_depth)\n'
                                      '{\n'
                                      '    const float zNear = NEAR_FAR.x;\n'
                                      '    const float zFar = NEAR_FAR.y;\n'
                                      '    \n'
                                      '    float depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                      '    \n'
                                      '    return depth * 0.5 + 0.5;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 depth_to_relative_world(vec2 tex_coord, float depth)\n'
                                      '{\n'
                                      '    vec4 clip_coord = vec4(tex_coord * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                      '    vec4 relative_pos = INV_VIEW_ORIGIN * INV_PROJECTION * clip_coord;\n'
                                      '    relative_pos /= relative_pos.w;\n'
                                      '    return relative_pos;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 linear_depth_to_relative_world(vec2 tex_coord, float linear_depth)\n'
                                      '{\n'
                                      '    \n'
                                      '    float depth = linear_depth_to_depth(linear_depth);\n'
                                      '\n'
                                      '    \n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    return depth_to_relative_world(tex_coord, depth);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'float PseudoRandom(vec2 xy)\n'
                                      '{\n'
                                      '    vec2 pos = fract(xy / 128.0f) * 128.0f + vec2(-64.340622f, -72.465622f);\n'
                                      '\n'
                                      '    \n'
                                      '    return fract(dot(pos.xyx * pos.xyy, vec3(20.390625f, 60.703125f, 2.4281209f)));\n'
                                      '}\n'
                                      '\n'
                                      'float rand(vec2 co){\n'
                                      '    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n'
                                      '}\n'
                                      '\n'
                                      'float rand2(vec4 seed4){\n'
                                      '    float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));\n'
                                      '    return fract(sin(dot_product) * 43758.5453);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 invert_y(vec3 vector)\n'
                                      '{\n'
                                      '    return vec3(vector.x, -vector.y, vector.z);\n'
                                      '}\n'
                                      '#endif /* UUID_e77aaefb_1a04_384d_928f_4a7739be43fb */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "shading.glsl"\n'
                                      '#ifndef UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8\n'
                                      '#define UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "PCFKernels.glsl"\n'
                                      '#ifndef UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                      '#define UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'const int PoissonSampleCount = 64;\n'
                                      '\n'
                                      '\n'
                                      'const vec2 PoissonSamples[PoissonSampleCount] =\n'
                                      '{\n'
                                      '    vec2(-0.5119625f, -0.4827938f),\n'
                                      '    vec2(-0.2171264f, -0.4768726f),\n'
                                      '    vec2(-0.7552931f, -0.2426507f),\n'
                                      '    vec2(-0.7136765f, -0.4496614f),\n'
                                      '    vec2(-0.5938849f, -0.6895654f),\n'
                                      '    vec2(-0.3148003f, -0.7047654f),\n'
                                      '    vec2(-0.42215f, -0.2024607f),\n'
                                      '    vec2(-0.9466816f, -0.2014508f),\n'
                                      '    vec2(-0.8409063f, -0.03465778f),\n'
                                      '    vec2(-0.6517572f, -0.07476326f),\n'
                                      '    vec2(-0.1041822f, -0.02521214f),\n'
                                      '    vec2(-0.3042712f, -0.02195431f),\n'
                                      '    vec2(-0.5082307f, 0.1079806f),\n'
                                      '    vec2(-0.08429877f, -0.2316298f),\n'
                                      '    vec2(-0.9879128f, 0.1113683f),\n'
                                      '    vec2(-0.3859636f, 0.3363545f),\n'
                                      '    vec2(-0.1925334f, 0.1787288f),\n'
                                      '    vec2(0.003256182f, 0.138135f),\n'
                                      '    vec2(-0.8706837f, 0.3010679f),\n'
                                      '    vec2(-0.6982038f, 0.1904326f),\n'
                                      '    vec2(0.1975043f, 0.2221317f),\n'
                                      '    vec2(0.1507788f, 0.4204168f),\n'
                                      '    vec2(0.3514056f, 0.09865579f),\n'
                                      '    vec2(0.1558783f, -0.08460935f),\n'
                                      '    vec2(-0.0684978f, 0.4461993f),\n'
                                      '    vec2(0.3780522f, 0.3478679f),\n'
                                      '    vec2(0.3956799f, -0.1469177f),\n'
                                      '    vec2(0.5838975f, 0.1054943f),\n'
                                      '    vec2(0.6155105f, 0.3245716f),\n'
                                      '    vec2(0.3928624f, -0.4417621f),\n'
                                      '    vec2(0.1749884f, -0.4202175f),\n'
                                      '    vec2(0.6813727f, -0.2424808f),\n'
                                      '    vec2(-0.6707711f, 0.4912741f),\n'
                                      '    vec2(0.0005130528f, -0.8058334f),\n'
                                      '    vec2(0.02703013f, -0.6010728f),\n'
                                      '    vec2(-0.1658188f, -0.9695674f),\n'
                                      '    vec2(0.4060591f, -0.7100726f),\n'
                                      '    vec2(0.7713396f, -0.4713659f),\n'
                                      '    vec2(0.573212f, -0.51544f),\n'
                                      '    vec2(-0.3448896f, -0.9046497f),\n'
                                      '    vec2(0.1268544f, -0.9874692f),\n'
                                      '    vec2(0.7418533f, -0.6667366f),\n'
                                      '    vec2(0.3492522f, 0.5924662f),\n'
                                      '    vec2(0.5679897f, 0.5343465f),\n'
                                      '    vec2(0.5663417f, 0.7708698f),\n'
                                      '    vec2(0.7375497f, 0.6691415f),\n'
                                      '    vec2(0.2271994f, -0.6163502f),\n'
                                      '    vec2(0.2312844f, 0.8725659f),\n'
                                      '    vec2(0.4216993f, 0.9002838f),\n'
                                      '    vec2(0.4262091f, -0.9013284f),\n'
                                      '    vec2(0.2001408f, -0.808381f),\n'
                                      '    vec2(0.149394f, 0.6650763f),\n'
                                      '    vec2(-0.09640376f, 0.9843736f),\n'
                                      '    vec2(0.7682328f, -0.07273844f),\n'
                                      '    vec2(0.04146584f, 0.8313184f),\n'
                                      '    vec2(0.9705266f, -0.1143304f),\n'
                                      '    vec2(0.9670017f, 0.1293385f),\n'
                                      '    vec2(0.9015037f, -0.3306949f),\n'
                                      '    vec2(-0.5085648f, 0.7534177f),\n'
                                      '    vec2(0.9055501f, 0.3758393f),\n'
                                      '    vec2(0.7599946f, 0.1809109f),\n'
                                      '    vec2(-0.2483695f, 0.7942952f),\n'
                                      '    vec2(-0.4241052f, 0.5581087f),\n'
                                      '    vec2(-0.1020106f, 0.6724468f),\n'
                                      '};\n'
                                      '#endif /* UUID_771b849e_fec4_3936_8f65_94ea74cfac5c */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "utility.glsl"\n'
                                      '#ifndef UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                      '#define UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                      '#endif /* UUID_e77aaefb_1a04_384d_928f_4a7739be43fb */\n'
                                      '\n'
                                      '\n'
                                      'const float PI = 3.141592;\n'
                                      '\n'
                                      '\n'
                                      'float get_shadow_factor(vec2 screen_tex_coord, vec3 world_position, sampler2D '
                                      'texture_shadow)\n'
                                      '{\n'
                                      '    float shadow_factor = 0.0;\n'
                                      '    vec4 shadow_uv = SHADOW_MATRIX * vec4(world_position, 1.0);\n'
                                      '    shadow_uv.xyz /= shadow_uv.w;\n'
                                      '    shadow_uv.xyz = shadow_uv.xyz * 0.5 + 0.5;\n'
                                      '    float shadow_depth = shadow_uv.z;\n'
                                      '\n'
                                      '    const float shadow_radius = 2.0;\n'
                                      '    const vec2 texture_size = textureSize(texture_shadow, 0);\n'
                                      '    const vec2 sample_scale = shadow_radius / texture_size;\n'
                                      '\n'
                                      '    float angle = rand(screen_tex_coord);\n'
                                      '\n'
                                      '    const int sample_count = min(4, PoissonSampleCount);\n'
                                      '\n'
                                      '    for(int i=0; i<sample_count; ++i)\n'
                                      '    {\n'
                                      '        \n'
                                      '        vec2 uv = PoissonSamples[int(JITTER_FRAME + i + angle * PoissonSampleCount) % '
                                      'PoissonSampleCount];\n'
                                      '\n'
                                      '        uv = shadow_uv.xy + uv * sample_scale;\n'
                                      '        vec4 s = textureGather(texture_shadow, uv, 0);\n'
                                      '        shadow_factor += s[0] <= shadow_depth ? 0.0 : 1.0;\n'
                                      '        shadow_factor += s[1] <= shadow_depth ? 0.0 : 1.0;\n'
                                      '        shadow_factor += s[2] <= shadow_depth ? 0.0 : 1.0;\n'
                                      '        shadow_factor += s[3] <= shadow_depth ? 0.0 : 1.0;\n'
                                      '    }\n'
                                      '    shadow_factor /= sample_count * 4.0;\n'
                                      '    return shadow_factor;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'float oren_nayar(float roughness2, float NdotL, float NdotV, vec3 N, vec3 V, vec3 L)\n'
                                      '{\n'
                                      '    float incidentTheta = acos(NdotL);\n'
                                      '    float outTheta = acos(NdotV);\n'
                                      '\n'
                                      '    float A = 1.0 - 0.5 * (roughness2 / (roughness2 + 0.33));\n'
                                      '    float B = (0.45 * roughness2) / (roughness2 + 0.09);\n'
                                      '    float alpha = max(incidentTheta, outTheta);\n'
                                      '    float beta  = min(incidentTheta, outTheta);\n'
                                      '\n'
                                      '    vec3 u = normalize(V - N * NdotV);\n'
                                      '    vec3 v = normalize(L - N * NdotL);\n'
                                      '    float phiDiff = max(0.0, dot(u, v));\n'
                                      '\n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    return (A + (B * phiDiff * sin(alpha) * tan(beta))) * NdotL;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec3 fresnel_factor(in vec3 f0, in float product)\n'
                                      '{\n'
                                      '    return mix(f0, vec3(1.0), pow(clamp(1.01 - product, 0.0, 1.0), 5.0));\n'
                                      '}\n'
                                      '\n'
                                      'float D_blinn(in float roughness, in float NdH)\n'
                                      '{\n'
                                      '    float m = roughness * roughness;\n'
                                      '    float m2 = m * m;\n'
                                      '    float n = 2.0 / m2 - 2.0;\n'
                                      '    return (n + 2.0) / (2.0 * PI) * pow(NdH, n);\n'
                                      '}\n'
                                      '\n'
                                      'float D_beckmann(in float roughness, in float NdH)\n'
                                      '{\n'
                                      '    float m = roughness * roughness;\n'
                                      '    float m2 = m * m;\n'
                                      '    float NdH2 = NdH * NdH;\n'
                                      '    return exp((NdH2 - 1.0) / (m2 * NdH2)) / (PI * m2 * NdH2 * NdH2);\n'
                                      '}\n'
                                      '\n'
                                      'float D_GGX(in float roughness, in float NdH)\n'
                                      '{\n'
                                      '    float m = roughness * roughness;\n'
                                      '    float m2 = m * m;\n'
                                      '    float d = (NdH * m2 - NdH) * NdH + 1.0;\n'
                                      '    return m2 / (PI * d * d);\n'
                                      '}\n'
                                      '\n'
                                      'float G_schlick(in float roughness, in float NdV, in float NdL)\n'
                                      '{\n'
                                      '    float k = roughness * roughness * 0.5;\n'
                                      '    float V = NdV * (1.0 - k) + k;\n'
                                      '    float L = NdL * (1.0 - k) + k;\n'
                                      '    return 0.25 / (V * L);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 phong_specular(in float LdR, in vec3 specular, in float roughness)\n'
                                      '{\n'
                                      '    float spec = max(0.0, LdR);\n'
                                      '    float k = 1.999 / (roughness * roughness);\n'
                                      '    return min(1.0, 3.0 * 0.0398 * k) * pow(spec, min(10000.0, k)) * specular;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 blinn_specular(in float NdH, in vec3 specular, in float roughness)\n'
                                      '{\n'
                                      '    float k = 1.999 / (roughness * roughness);\n'
                                      '    return min(1.0, 3.0 * 0.0398 * k) * pow(NdH, min(10000.0, k)) * specular;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec3 cooktorrance_specular(in float NdL, in float NdV, in float NdH, in vec3 specular, '
                                      'in float roughness)\n'
                                      '{\n'
                                      '    float D = D_GGX(roughness, NdH);\n'
                                      '    float G = G_schlick(roughness, NdV, NdL);\n'
                                      '    float rim = mix(1.0 - roughness * 0.9, 1.0, NdV);\n'
                                      '    return (1.0 / rim) * specular * G * D;\n'
                                      '}\n'
                                      '\n'
                                      'vec2 env_BRDF_pproximate(float NoV, float roughness) {\n'
                                      '    \n'
                                      '    const vec4 c0 = vec4(-1.0, -0.0275, -0.572,  0.022);\n'
                                      '    const vec4 c1 = vec4( 1.0,  0.0425,  1.040, -0.040);\n'
                                      '    vec4 r = roughness * c0 + c1;\n'
                                      '    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n'
                                      '    return vec2(-1.04, 1.04) * a004 + r.zw;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec4 surface_shading(vec4 base_color,\n'
                                      '                    float metallic,\n'
                                      '                    float roughness,\n'
                                      '                    float reflectance,\n'
                                      '                    samplerCube texture_probe,\n'
                                      '                    sampler2D texture_scene_reflect,\n'
                                      '                    vec2 screen_tex_coord,\n'
                                      '                    vec3 light_color,\n'
                                      '                    vec3 N,\n'
                                      '                    vec3 V,\n'
                                      '                    vec3 L,\n'
                                      '                    float shadow_factor) {\n'
                                      '\n'
                                      '    \n'
                                      '    roughness = clamp(roughness, 0.05, 1.0);\n'
                                      '\n'
                                      '    \n'
                                      '    vec3 R = reflect(-V, N);\n'
                                      '    vec3 H = normalize(V + L);\n'
                                      '    float NdL = max(0.0, dot(N, L));\n'
                                      '    float NdV = max(0.001, dot(N, V));\n'
                                      '    float NdH = max(0.001, dot(N, H));\n'
                                      '    float HdV = max(0.001, dot(H, V));\n'
                                      '    float LdV = max(0.001, dot(L, V));\n'
                                      '\n'
                                      '    \n'
                                      '    const float ior = 1.38;\n'
                                      '    vec3 f0 = vec3(abs ((1.0 - ior) / (1.0 + ior)));\n'
                                      '    f0 = mix(max(vec3(0.04), f0 * reflectance * reflectance), base_color.xyz, '
                                      'metallic);\n'
                                      '\n'
                                      '    float opacity = base_color.w;\n'
                                      '#if TRANSPARENT_MATERIAL == 1\n'
                                      '#endif\n'
                                      '\n'
                                      '    \n'
                                      '    vec3 specfresnel = fresnel_factor(f0, HdV);\n'
                                      '    vec3 specular_lighting = cooktorrance_specular(NdL, NdV, NdH, specfresnel, '
                                      'roughness);\n'
                                      '    specular_lighting = specular_lighting * light_color * NdL * shadow_factor;\n'
                                      '\n'
                                      '    \n'
                                      '    vec3 diffuse_light = vec3(oren_nayar(roughness, NdL, NdV, N, V, L));\n'
                                      '    diffuse_light = diffuse_light * base_color.xyz * (vec3(1.0) - specfresnel) * '
                                      'light_color * shadow_factor;\n'
                                      '\n'
                                      '    \n'
                                      '    const vec2 env_size = textureSize(texture_probe, 0);\n'
                                      '    const float env_mipmap_count = log2(min(env_size.x, env_size.y));\n'
                                      '\n'
                                      '    vec3 ibl_diffuse_color = textureLod(texture_probe, invert_y(N), env_mipmap_count - '
                                      '1.0).xyz;\n'
                                      '    vec3 ibl_specular_color = textureLod(texture_probe, invert_y(R), env_mipmap_count * '
                                      'roughness).xyz;\n'
                                      '\n'
                                      '    \n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    \n'
                                      '    if(RENDER_SSR == 1.0f)\n'
                                      '    {\n'
                                      '        vec4 scene_reflect_color = texture(texture_scene_reflect, screen_tex_coord);\n'
                                      '        ibl_specular_color.xyz = mix(ibl_specular_color.xyz, scene_reflect_color.xyz, '
                                      'scene_reflect_color.w);\n'
                                      '    }\n'
                                      '\n'
                                      '    diffuse_light += base_color.xyz * ibl_diffuse_color;\n'
                                      '    vec2 envBRDF = clamp(env_BRDF_pproximate(NdV, roughness), 0.0, 1.0);\n'
                                      '    specular_lighting += (fresnel_factor(f0, NdV) * envBRDF.x + envBRDF.y) * '
                                      'ibl_specular_color;\n'
                                      '\n'
                                      '    \n'
                                      '    vec3 result = diffuse_light * (1.0 - metallic) + specular_lighting;\n'
                                      '    return vec4(max(vec3(0.0), result), opacity);\n'
                                      '}\n'
                                      '#endif /* UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8 */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "quad.glsl"\n'
                                      '#ifndef UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                                      '#define UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                                      'struct VERTEX_OUTPUT\n'
                                      '{\n'
                                      '    vec2 tex_coord;\n'
                                      '    vec3 position;\n'
                                      '};\n'
                                      '\n'
                                      '#ifdef GL_VERTEX_SHADER\n'
                                      '#endif \n'
                                      '#endif /* UUID_09be6e6c_9934_3777_a020_c1b0299d186d */\n'
                                      '\n'
                                      'uniform sampler2D texture_diffuse;\n'
                                      'uniform sampler2D texture_material;\n'
                                      'uniform sampler2D texture_normal;\n'
                                      '\n'
                                      'uniform sampler2D texture_depth;\n'
                                      'uniform sampler2D texture_shadow;\n'
                                      'uniform sampler2D texture_ssao;\n'
                                      'uniform sampler2D texture_scene_reflect;\n'
                                      'uniform samplerCube texture_probe;\n'
                                      '\n'
                                      '\n'
                                      '#ifdef GL_FRAGMENT_SHADER\n'
                                      'layout (location = 0) in VERTEX_OUTPUT vs_output;\n'
                                      'layout (location = 0) out vec4 fs_output;\n'
                                      '\n'
                                      'void main() {\n'
                                      '    vec2 screen_tex_coord = vs_output.tex_coord.xy;\n'
                                      '\n'
                                      '    float depth = texture(texture_depth, screen_tex_coord).x;\n'
                                      '\n'
                                      '    if(depth == 1.0)\n'
                                      '    {\n'
                                      '        discard;\n'
                                      '    }\n'
                                      '\n'
                                      '    vec4 base_color = texture(texture_diffuse, screen_tex_coord);\n'
                                      '    \n'
                                      '    base_color.w *= 10.0;\n'
                                      '\n'
                                      '    vec4 material = texture(texture_material, screen_tex_coord);\n'
                                      '    vec3 N = normalize(texture(texture_normal, screen_tex_coord).xyz * 2.0 - 1.0);\n'
                                      '\n'
                                      '    vec4 world_position = vec4(screen_tex_coord * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                      '    world_position = INV_VIEW * INV_PROJECTION * world_position;\n'
                                      '    world_position /= world_position.w;\n'
                                      '\n'
                                      '    float roughness = material.x;\n'
                                      '    float metalicness = material.y;\n'
                                      '    float reflectance = material.z;\n'
                                      '\n'
                                      '    vec3 V = normalize(CAMERA_POSITION.xyz - world_position.xyz);\n'
                                      '    vec3 L = normalize(LIGHT_DIRECTION.xyz);\n'
                                      '\n'
                                      '    float shadow_factor = get_shadow_factor(screen_tex_coord, world_position.xyz, '
                                      'texture_shadow);\n'
                                      '\n'
                                      '    fs_output = surface_shading(base_color,\n'
                                      '                    metalicness,\n'
                                      '                    roughness,\n'
                                      '                    reflectance,\n'
                                      '                    texture_probe,\n'
                                      '                    texture_scene_reflect,\n'
                                      '                    screen_tex_coord,\n'
                                      '                    LIGHT_COLOR.xyz,\n'
                                      '                    N,\n'
                                      '                    V,\n'
                                      '                    L,\n'
                                      '                    shadow_factor);\n'
                                      '\n'
                                      '    \n'
                                      '    if(RENDER_SSAO == 1.0f)\n'
                                      '    {\n'
                                      '        fs_output.xyz *= texture(texture_ssao, screen_tex_coord).x;\n'
                                      '    }\n'
                                      '\n'
                                      '    \n'
                                      '    fs_output.xyz += base_color.xyz * base_color.w;\n'
                                      '    fs_output.w = 1.0;\n'
                                      '}\n'
                                      '#endif',
                  GL_VERTEX_SHADER: '#version 430 core\n'
                                    '#define MATERIAL_COMPONENTS 1\n'
                                    '#define GL_VERTEX_SHADER 1\n'
                                    '\n'
                                    '\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    'layout(std140, binding=0) uniform sceneConstants\n'
                                    '{\n'
                                    '    float TIME;\n'
                                    '    float JITTER_FRAME;\n'
                                    '    float RENDER_SSR;\n'
                                    '    float RENDER_SSAO;\n'
                                    '    vec2 BACKBUFFER_SIZE;\n'
                                    '    vec2 MOUSE_POS;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=1) uniform viewConstants\n'
                                    '{\n'
                                    '    mat4 VIEW;\n'
                                    '    mat4 INV_VIEW;\n'
                                    '    mat4 VIEW_ORIGIN;\n'
                                    '    mat4 INV_VIEW_ORIGIN;\n'
                                    '    mat4 PROJECTION;\n'
                                    '    mat4 INV_PROJECTION;\n'
                                    '    vec4 CAMERA_POSITION;\n'
                                    '    vec2 NEAR_FAR;\n'
                                    '    vec2 JITTER_DELTA;\n'
                                    '    vec2 JITTER_OFFSET;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=2) uniform viewProjection\n'
                                    '{\n'
                                    '    mat4 VIEW_PROJECTION;\n'
                                    '    mat4 PREV_VIEW_PROJECTION;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=3) uniform lightConstants\n'
                                    '{\n'
                                    '    vec4 LIGHT_POSITION;\n'
                                    '    vec4 LIGHT_DIRECTION;\n'
                                    '    vec4 LIGHT_COLOR;\n'
                                    '    mat4 SHADOW_MATRIX;\n'
                                    '};\n'
                                    '\n'
                                    'const int MAX_BONES_PER_VERTEX = 4;\n'
                                    'const int MAX_BONES = 100;\n'
                                    'const float SHADOW_BIAS = -0.0001;\n'
                                    '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "utility.glsl"\n'
                                    '#ifndef UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                    '#define UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                    '\n'
                                    '\n'
                                    'float get_luminance(vec3 color)\n'
                                    '{\n'
                                    '    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n'
                                    '}\n'
                                    '\n'
                                    'float get_linear_luminance(vec3 LinearColor)\n'
                                    '{\n'
                                    '    return dot(LinearColor, vec3(0.3, 0.59, 0.11));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float depth_to_linear_depth(float depth)\n'
                                    '{\n'
                                    '    const float zNear = NEAR_FAR.x;\n'
                                    '    const float zFar = NEAR_FAR.y;\n'
                                    '    \n'
                                    '    depth = depth * 2.0 - 1.0;\n'
                                    '    \n'
                                    '    return 2.0 * zNear * zFar / (zFar + zNear - depth * (zFar - zNear));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float linear_depth_to_depth(float linear_depth)\n'
                                    '{\n'
                                    '    const float zNear = NEAR_FAR.x;\n'
                                    '    const float zFar = NEAR_FAR.y;\n'
                                    '    \n'
                                    '    float depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                    '    \n'
                                    '    return depth * 0.5 + 0.5;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 depth_to_relative_world(vec2 tex_coord, float depth)\n'
                                    '{\n'
                                    '    vec4 clip_coord = vec4(tex_coord * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                    '    vec4 relative_pos = INV_VIEW_ORIGIN * INV_PROJECTION * clip_coord;\n'
                                    '    relative_pos /= relative_pos.w;\n'
                                    '    return relative_pos;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 linear_depth_to_relative_world(vec2 tex_coord, float linear_depth)\n'
                                    '{\n'
                                    '    \n'
                                    '    float depth = linear_depth_to_depth(linear_depth);\n'
                                    '\n'
                                    '    \n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    return depth_to_relative_world(tex_coord, depth);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'float PseudoRandom(vec2 xy)\n'
                                    '{\n'
                                    '    vec2 pos = fract(xy / 128.0f) * 128.0f + vec2(-64.340622f, -72.465622f);\n'
                                    '\n'
                                    '    \n'
                                    '    return fract(dot(pos.xyx * pos.xyy, vec3(20.390625f, 60.703125f, 2.4281209f)));\n'
                                    '}\n'
                                    '\n'
                                    'float rand(vec2 co){\n'
                                    '    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n'
                                    '}\n'
                                    '\n'
                                    'float rand2(vec4 seed4){\n'
                                    '    float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));\n'
                                    '    return fract(sin(dot_product) * 43758.5453);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 invert_y(vec3 vector)\n'
                                    '{\n'
                                    '    return vec3(vector.x, -vector.y, vector.z);\n'
                                    '}\n'
                                    '#endif /* UUID_e77aaefb_1a04_384d_928f_4a7739be43fb */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "shading.glsl"\n'
                                    '#ifndef UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8\n'
                                    '#define UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "PCFKernels.glsl"\n'
                                    '#ifndef UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                    '#define UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'const int PoissonSampleCount = 64;\n'
                                    '\n'
                                    '\n'
                                    'const vec2 PoissonSamples[PoissonSampleCount] =\n'
                                    '{\n'
                                    '    vec2(-0.5119625f, -0.4827938f),\n'
                                    '    vec2(-0.2171264f, -0.4768726f),\n'
                                    '    vec2(-0.7552931f, -0.2426507f),\n'
                                    '    vec2(-0.7136765f, -0.4496614f),\n'
                                    '    vec2(-0.5938849f, -0.6895654f),\n'
                                    '    vec2(-0.3148003f, -0.7047654f),\n'
                                    '    vec2(-0.42215f, -0.2024607f),\n'
                                    '    vec2(-0.9466816f, -0.2014508f),\n'
                                    '    vec2(-0.8409063f, -0.03465778f),\n'
                                    '    vec2(-0.6517572f, -0.07476326f),\n'
                                    '    vec2(-0.1041822f, -0.02521214f),\n'
                                    '    vec2(-0.3042712f, -0.02195431f),\n'
                                    '    vec2(-0.5082307f, 0.1079806f),\n'
                                    '    vec2(-0.08429877f, -0.2316298f),\n'
                                    '    vec2(-0.9879128f, 0.1113683f),\n'
                                    '    vec2(-0.3859636f, 0.3363545f),\n'
                                    '    vec2(-0.1925334f, 0.1787288f),\n'
                                    '    vec2(0.003256182f, 0.138135f),\n'
                                    '    vec2(-0.8706837f, 0.3010679f),\n'
                                    '    vec2(-0.6982038f, 0.1904326f),\n'
                                    '    vec2(0.1975043f, 0.2221317f),\n'
                                    '    vec2(0.1507788f, 0.4204168f),\n'
                                    '    vec2(0.3514056f, 0.09865579f),\n'
                                    '    vec2(0.1558783f, -0.08460935f),\n'
                                    '    vec2(-0.0684978f, 0.4461993f),\n'
                                    '    vec2(0.3780522f, 0.3478679f),\n'
                                    '    vec2(0.3956799f, -0.1469177f),\n'
                                    '    vec2(0.5838975f, 0.1054943f),\n'
                                    '    vec2(0.6155105f, 0.3245716f),\n'
                                    '    vec2(0.3928624f, -0.4417621f),\n'
                                    '    vec2(0.1749884f, -0.4202175f),\n'
                                    '    vec2(0.6813727f, -0.2424808f),\n'
                                    '    vec2(-0.6707711f, 0.4912741f),\n'
                                    '    vec2(0.0005130528f, -0.8058334f),\n'
                                    '    vec2(0.02703013f, -0.6010728f),\n'
                                    '    vec2(-0.1658188f, -0.9695674f),\n'
                                    '    vec2(0.4060591f, -0.7100726f),\n'
                                    '    vec2(0.7713396f, -0.4713659f),\n'
                                    '    vec2(0.573212f, -0.51544f),\n'
                                    '    vec2(-0.3448896f, -0.9046497f),\n'
                                    '    vec2(0.1268544f, -0.9874692f),\n'
                                    '    vec2(0.7418533f, -0.6667366f),\n'
                                    '    vec2(0.3492522f, 0.5924662f),\n'
                                    '    vec2(0.5679897f, 0.5343465f),\n'
                                    '    vec2(0.5663417f, 0.7708698f),\n'
                                    '    vec2(0.7375497f, 0.6691415f),\n'
                                    '    vec2(0.2271994f, -0.6163502f),\n'
                                    '    vec2(0.2312844f, 0.8725659f),\n'
                                    '    vec2(0.4216993f, 0.9002838f),\n'
                                    '    vec2(0.4262091f, -0.9013284f),\n'
                                    '    vec2(0.2001408f, -0.808381f),\n'
                                    '    vec2(0.149394f, 0.6650763f),\n'
                                    '    vec2(-0.09640376f, 0.9843736f),\n'
                                    '    vec2(0.7682328f, -0.07273844f),\n'
                                    '    vec2(0.04146584f, 0.8313184f),\n'
                                    '    vec2(0.9705266f, -0.1143304f),\n'
                                    '    vec2(0.9670017f, 0.1293385f),\n'
                                    '    vec2(0.9015037f, -0.3306949f),\n'
                                    '    vec2(-0.5085648f, 0.7534177f),\n'
                                    '    vec2(0.9055501f, 0.3758393f),\n'
                                    '    vec2(0.7599946f, 0.1809109f),\n'
                                    '    vec2(-0.2483695f, 0.7942952f),\n'
                                    '    vec2(-0.4241052f, 0.5581087f),\n'
                                    '    vec2(-0.1020106f, 0.6724468f),\n'
                                    '};\n'
                                    '#endif /* UUID_771b849e_fec4_3936_8f65_94ea74cfac5c */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "utility.glsl"\n'
                                    '#ifndef UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                    '#define UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                    '#endif /* UUID_e77aaefb_1a04_384d_928f_4a7739be43fb */\n'
                                    '\n'
                                    '\n'
                                    'const float PI = 3.141592;\n'
                                    '\n'
                                    '\n'
                                    'float get_shadow_factor(vec2 screen_tex_coord, vec3 world_position, sampler2D '
                                    'texture_shadow)\n'
                                    '{\n'
                                    '    float shadow_factor = 0.0;\n'
                                    '    vec4 shadow_uv = SHADOW_MATRIX * vec4(world_position, 1.0);\n'
                                    '    shadow_uv.xyz /= shadow_uv.w;\n'
                                    '    shadow_uv.xyz = shadow_uv.xyz * 0.5 + 0.5;\n'
                                    '    float shadow_depth = shadow_uv.z;\n'
                                    '\n'
                                    '    const float shadow_radius = 2.0;\n'
                                    '    const vec2 texture_size = textureSize(texture_shadow, 0);\n'
                                    '    const vec2 sample_scale = shadow_radius / texture_size;\n'
                                    '\n'
                                    '    float angle = rand(screen_tex_coord);\n'
                                    '\n'
                                    '    const int sample_count = min(4, PoissonSampleCount);\n'
                                    '\n'
                                    '    for(int i=0; i<sample_count; ++i)\n'
                                    '    {\n'
                                    '        \n'
                                    '        vec2 uv = PoissonSamples[int(JITTER_FRAME + i + angle * PoissonSampleCount) % '
                                    'PoissonSampleCount];\n'
                                    '\n'
                                    '        uv = shadow_uv.xy + uv * sample_scale;\n'
                                    '        vec4 s = textureGather(texture_shadow, uv, 0);\n'
                                    '        shadow_factor += s[0] <= shadow_depth ? 0.0 : 1.0;\n'
                                    '        shadow_factor += s[1] <= shadow_depth ? 0.0 : 1.0;\n'
                                    '        shadow_factor += s[2] <= shadow_depth ? 0.0 : 1.0;\n'
                                    '        shadow_factor += s[3] <= shadow_depth ? 0.0 : 1.0;\n'
                                    '    }\n'
                                    '    shadow_factor /= sample_count * 4.0;\n'
                                    '    return shadow_factor;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'float oren_nayar(float roughness2, float NdotL, float NdotV, vec3 N, vec3 V, vec3 L)\n'
                                    '{\n'
                                    '    float incidentTheta = acos(NdotL);\n'
                                    '    float outTheta = acos(NdotV);\n'
                                    '\n'
                                    '    float A = 1.0 - 0.5 * (roughness2 / (roughness2 + 0.33));\n'
                                    '    float B = (0.45 * roughness2) / (roughness2 + 0.09);\n'
                                    '    float alpha = max(incidentTheta, outTheta);\n'
                                    '    float beta  = min(incidentTheta, outTheta);\n'
                                    '\n'
                                    '    vec3 u = normalize(V - N * NdotV);\n'
                                    '    vec3 v = normalize(L - N * NdotL);\n'
                                    '    float phiDiff = max(0.0, dot(u, v));\n'
                                    '\n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    return (A + (B * phiDiff * sin(alpha) * tan(beta))) * NdotL;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec3 fresnel_factor(in vec3 f0, in float product)\n'
                                    '{\n'
                                    '    return mix(f0, vec3(1.0), pow(clamp(1.01 - product, 0.0, 1.0), 5.0));\n'
                                    '}\n'
                                    '\n'
                                    'float D_blinn(in float roughness, in float NdH)\n'
                                    '{\n'
                                    '    float m = roughness * roughness;\n'
                                    '    float m2 = m * m;\n'
                                    '    float n = 2.0 / m2 - 2.0;\n'
                                    '    return (n + 2.0) / (2.0 * PI) * pow(NdH, n);\n'
                                    '}\n'
                                    '\n'
                                    'float D_beckmann(in float roughness, in float NdH)\n'
                                    '{\n'
                                    '    float m = roughness * roughness;\n'
                                    '    float m2 = m * m;\n'
                                    '    float NdH2 = NdH * NdH;\n'
                                    '    return exp((NdH2 - 1.0) / (m2 * NdH2)) / (PI * m2 * NdH2 * NdH2);\n'
                                    '}\n'
                                    '\n'
                                    'float D_GGX(in float roughness, in float NdH)\n'
                                    '{\n'
                                    '    float m = roughness * roughness;\n'
                                    '    float m2 = m * m;\n'
                                    '    float d = (NdH * m2 - NdH) * NdH + 1.0;\n'
                                    '    return m2 / (PI * d * d);\n'
                                    '}\n'
                                    '\n'
                                    'float G_schlick(in float roughness, in float NdV, in float NdL)\n'
                                    '{\n'
                                    '    float k = roughness * roughness * 0.5;\n'
                                    '    float V = NdV * (1.0 - k) + k;\n'
                                    '    float L = NdL * (1.0 - k) + k;\n'
                                    '    return 0.25 / (V * L);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 phong_specular(in float LdR, in vec3 specular, in float roughness)\n'
                                    '{\n'
                                    '    float spec = max(0.0, LdR);\n'
                                    '    float k = 1.999 / (roughness * roughness);\n'
                                    '    return min(1.0, 3.0 * 0.0398 * k) * pow(spec, min(10000.0, k)) * specular;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 blinn_specular(in float NdH, in vec3 specular, in float roughness)\n'
                                    '{\n'
                                    '    float k = 1.999 / (roughness * roughness);\n'
                                    '    return min(1.0, 3.0 * 0.0398 * k) * pow(NdH, min(10000.0, k)) * specular;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec3 cooktorrance_specular(in float NdL, in float NdV, in float NdH, in vec3 specular, in '
                                    'float roughness)\n'
                                    '{\n'
                                    '    float D = D_GGX(roughness, NdH);\n'
                                    '    float G = G_schlick(roughness, NdV, NdL);\n'
                                    '    float rim = mix(1.0 - roughness * 0.9, 1.0, NdV);\n'
                                    '    return (1.0 / rim) * specular * G * D;\n'
                                    '}\n'
                                    '\n'
                                    'vec2 env_BRDF_pproximate(float NoV, float roughness) {\n'
                                    '    \n'
                                    '    const vec4 c0 = vec4(-1.0, -0.0275, -0.572,  0.022);\n'
                                    '    const vec4 c1 = vec4( 1.0,  0.0425,  1.040, -0.040);\n'
                                    '    vec4 r = roughness * c0 + c1;\n'
                                    '    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n'
                                    '    return vec2(-1.04, 1.04) * a004 + r.zw;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec4 surface_shading(vec4 base_color,\n'
                                    '                    float metallic,\n'
                                    '                    float roughness,\n'
                                    '                    float reflectance,\n'
                                    '                    samplerCube texture_probe,\n'
                                    '                    sampler2D texture_scene_reflect,\n'
                                    '                    vec2 screen_tex_coord,\n'
                                    '                    vec3 light_color,\n'
                                    '                    vec3 N,\n'
                                    '                    vec3 V,\n'
                                    '                    vec3 L,\n'
                                    '                    float shadow_factor) {\n'
                                    '\n'
                                    '    \n'
                                    '    roughness = clamp(roughness, 0.05, 1.0);\n'
                                    '\n'
                                    '    \n'
                                    '    vec3 R = reflect(-V, N);\n'
                                    '    vec3 H = normalize(V + L);\n'
                                    '    float NdL = max(0.0, dot(N, L));\n'
                                    '    float NdV = max(0.001, dot(N, V));\n'
                                    '    float NdH = max(0.001, dot(N, H));\n'
                                    '    float HdV = max(0.001, dot(H, V));\n'
                                    '    float LdV = max(0.001, dot(L, V));\n'
                                    '\n'
                                    '    \n'
                                    '    const float ior = 1.38;\n'
                                    '    vec3 f0 = vec3(abs ((1.0 - ior) / (1.0 + ior)));\n'
                                    '    f0 = mix(max(vec3(0.04), f0 * reflectance * reflectance), base_color.xyz, metallic);\n'
                                    '\n'
                                    '    float opacity = base_color.w;\n'
                                    '#if TRANSPARENT_MATERIAL == 1\n'
                                    '#endif\n'
                                    '\n'
                                    '    \n'
                                    '    vec3 specfresnel = fresnel_factor(f0, HdV);\n'
                                    '    vec3 specular_lighting = cooktorrance_specular(NdL, NdV, NdH, specfresnel, '
                                    'roughness);\n'
                                    '    specular_lighting = specular_lighting * light_color * NdL * shadow_factor;\n'
                                    '\n'
                                    '    \n'
                                    '    vec3 diffuse_light = vec3(oren_nayar(roughness, NdL, NdV, N, V, L));\n'
                                    '    diffuse_light = diffuse_light * base_color.xyz * (vec3(1.0) - specfresnel) * '
                                    'light_color * shadow_factor;\n'
                                    '\n'
                                    '    \n'
                                    '    const vec2 env_size = textureSize(texture_probe, 0);\n'
                                    '    const float env_mipmap_count = log2(min(env_size.x, env_size.y));\n'
                                    '\n'
                                    '    vec3 ibl_diffuse_color = textureLod(texture_probe, invert_y(N), env_mipmap_count - '
                                    '1.0).xyz;\n'
                                    '    vec3 ibl_specular_color = textureLod(texture_probe, invert_y(R), env_mipmap_count * '
                                    'roughness).xyz;\n'
                                    '\n'
                                    '    \n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    \n'
                                    '    if(RENDER_SSR == 1.0f)\n'
                                    '    {\n'
                                    '        vec4 scene_reflect_color = texture(texture_scene_reflect, screen_tex_coord);\n'
                                    '        ibl_specular_color.xyz = mix(ibl_specular_color.xyz, scene_reflect_color.xyz, '
                                    'scene_reflect_color.w);\n'
                                    '    }\n'
                                    '\n'
                                    '    diffuse_light += base_color.xyz * ibl_diffuse_color;\n'
                                    '    vec2 envBRDF = clamp(env_BRDF_pproximate(NdV, roughness), 0.0, 1.0);\n'
                                    '    specular_lighting += (fresnel_factor(f0, NdV) * envBRDF.x + envBRDF.y) * '
                                    'ibl_specular_color;\n'
                                    '\n'
                                    '    \n'
                                    '    vec3 result = diffuse_light * (1.0 - metallic) + specular_lighting;\n'
                                    '    return vec4(max(vec3(0.0), result), opacity);\n'
                                    '}\n'
                                    '#endif /* UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8 */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "quad.glsl"\n'
                                    '#ifndef UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                                    '#define UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                                    'struct VERTEX_OUTPUT\n'
                                    '{\n'
                                    '    vec2 tex_coord;\n'
                                    '    vec3 position;\n'
                                    '};\n'
                                    '\n'
                                    '#ifdef GL_VERTEX_SHADER\n'
                                    'layout (location = 0) in vec3 vs_in_position;\n'
                                    'layout (location = 1) in vec4 vs_in_color;\n'
                                    'layout (location = 2) in vec3 vs_in_normal;\n'
                                    'layout (location = 3) in vec3 vs_in_tangent;\n'
                                    'layout (location = 4) in vec2 vs_in_tex_coord;\n'
                                    '\n'
                                    'layout (location = 0) out VERTEX_OUTPUT vs_output;\n'
                                    '\n'
                                    'void main() {\n'
                                    '    vs_output.tex_coord = vs_in_tex_coord;\n'
                                    '    vs_output.position = vs_in_position;\n'
                                    '    gl_Position = vec4(vs_in_position, 1.0);\n'
                                    '}\n'
                                    '#endif \n'
                                    '#endif /* UUID_09be6e6c_9934_3777_a020_c1b0299d186d */\n'
                                    '\n'
                                    'uniform sampler2D texture_diffuse;\n'
                                    'uniform sampler2D texture_material;\n'
                                    'uniform sampler2D texture_normal;\n'
                                    '\n'
                                    'uniform sampler2D texture_depth;\n'
                                    'uniform sampler2D texture_shadow;\n'
                                    'uniform sampler2D texture_ssao;\n'
                                    'uniform sampler2D texture_scene_reflect;\n'
                                    'uniform samplerCube texture_probe;\n'
                                    '\n'
                                    '\n'
                                    '#ifdef GL_FRAGMENT_SHADER\n'
                                    '#endif'},
 'shader_name': 'deferred_shading',
 'uniforms': [('sampler2D', 'texture_diffuse'),
              ('sampler2D', 'texture_material'),
              ('sampler2D', 'texture_normal'),
              ('sampler2D', 'texture_depth'),
              ('sampler2D', 'texture_shadow'),
              ('sampler2D', 'texture_ssao'),
              ('sampler2D', 'texture_scene_reflect'),
              ('samplerCube', 'texture_probe')]}

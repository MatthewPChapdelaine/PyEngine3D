{'binary_data': b'\x80\x03cnumpy.core.multiarray\n_reconstruct\nq\x00cnumpy\nndarray\nq\x01K\x00\x85q\x02C\x01bq\x03\x87q\x04Rq'
                b'\x05(K\x01M\x1e\xb3\x85q\x06cnumpy\ndtype\nq\x07X\x02\x00\x00\x00u1q\x08K\x00K\x01\x87q\tRq\n(K\x03X'
                b'\x01\x00\x00\x00|q\x0bNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\x0cb\x89B\x1e\xb3\x00\x00\n\x00\x00\x00'
                b'\n8\xe7H\x9e\xd0\xc8\xd7\xa0>bb\x106\xac\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\t\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00`\x00\x00\x00\x80\x18\x00\x00'
                b'\x1e\xb3\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\t\x00\x00 \x00\x00\x00'
                b'\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00t\x00\x00\x00'
                b'\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00'
                b'\x05\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00'
                b'\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x07\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00'
                b'\x0b\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00:\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\x1e\xb3\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\xbfu\x85\x93'
                b'69\xb6\x8d\xbfu\x85\x9369\xb6\x8d\xd2>\xfb\t\x9b\xb8\x9d>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x07\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x0c\x00\x00\x00\x04\x00\x00\x00'
                b'\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00:\x00\x00\x00\x15\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00'
                b'\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00'
                b'\x05\x00\x00\x00\x00\x01\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\n\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00'
                b'\x00\x01\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00+\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00@\x01\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00:\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00'
                b'\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x0f\x00\x00\x00C\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00'
                b'\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00S\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x98\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00`\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00m\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00'
                b'\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\xa0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x0b\x00\x00\x00{\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00'
                b'\x87\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x97\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\xa5\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\xb3\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\xc2\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00'
                b'\x02\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x08\x00\x00\x00\xcc\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00'
                b'\x05\x00\x00\x00\x00\x01\x00\x00\x90\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x13\x00\x00\x00\xd5\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14\x00\x00'
                b'\x01\x00\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x13\x00\x00\x00\xe9\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14\x00\x00'
                b'\x01\x00\x00\x00\x00\x01\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x13\x00\x00\x00\xfd\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00S\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x04\x14\x00\x00\x01\x00\x00\x00'
                b'\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00'
                b'\x11\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00 \x01\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x1c\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x008\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00G\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00'
                b'\x00\x01\x00\x00\xdc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00X\x01\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x8c\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00u\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x11\x00\x00\x00\x86\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00l\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x19\x00\x00\x00\x98\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00\xd4\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x17\x00\x00\x00\xb2\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00\xd8\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x16\x00\x00\x00\xca\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00\xc8\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x12\x00\x00\x00\xe1\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00'
                b'\x00\x01\x00\x00H\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\xf4\x01\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00'
                b'\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x07\x02\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00|\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x18\x02\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00/\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xcc\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00C\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x1a\x00\x00\x00X\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00p\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00s\x02\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00'
                b'\x80\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\x90\x02\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00|\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\xab\x02\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x1f\x00\x00\x00\xcb\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00'
                b'\xeb\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00'
                b'\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x08\x03\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00p\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00%\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x000\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x1c\x00\x00\x00F\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00'
                b'\x00\x01\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00c\x03\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00'
                b'\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x82\x03\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00'
                b'\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\xa2\x03\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00'
                b'\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\xc1\x03\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xc0\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\xd9\x03\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xa0\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\xf8\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x1e\x00\x00\x00\x17\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x1e\x00\x00\x006\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00'
                b'\x00\x01\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00U\x04\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xe0\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00q\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x19\x00\x00\x00\x8d\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x16\x00\x00\x00\xa7\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x15\x00\x00\x00\xbe\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00'
                b'\x03\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x13\x00\x00\x00\xd4\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00'
                b'\xe8\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00'
                b'\xff\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00'
                b'\x16\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00,\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00'
                b'\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x16\x00\x00\x00@\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00W\x05\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00<\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00n\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00'
                b'\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x13\x00\x00\x00\x84\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x98\x05\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00L\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xaf\x05\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\\\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\xc6\x05\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x13\x00\x00\x00\xdc\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00'
                b'\x03\x00\x00\x00\x00\x01\x00\x00p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00'
                b'\xf0\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00l\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x07\x06\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00|\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x1e\x06\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x004\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00'
                b'\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x16\x00\x00\x00H\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00'
                b'\x03\x00\x00\x00\x00\x01\x00\x00\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x16\x00\x00\x00_\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00v\x06\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xa0\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x8c\x06\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xa0\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xac\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xb7\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xbc\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\xce\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00'
                b'\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x13\x00\x00\x00\xe4\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00'
                b'\x03\x00\x00\x00\x00\x01\x00\x00\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x16\x00\x00\x00\xf8\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00'
                b'\x03\x00\x00\x00\x00\x01\x00\x00\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x16\x00\x00\x00\x0f\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00'
                b'\x03\x00\x00\x00\x00\x01\x00\x00\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x15\x00\x00\x00&\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00<\x07\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xf0\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00P\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xec\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00g\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x15\x00\x00\x00~\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00'
                b'\x03\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x13\x00\x00\x00\x94\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00'
                b'\xa8\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00\x0c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00'
                b'\xbf\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00\x1c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00'
                b'\xd6\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00 \x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\xec\x07\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x000\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x16\x00\x00\x00\x00\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00,\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x16\x00\x00\x00\x17\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00'
                b'\x03\x00\x00\x00\x00\x01\x00\x00<\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00.\x08\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x06\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00C\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00'
                b'\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00N\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00'
                b'\x04\x00\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\n\x00\x00\x00Z\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00'
                b'\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00e\x08\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00'
                b'\x02\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00q\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x04\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\r\x00\x00\x00\x86\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x000\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x94\x08\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x99\x08\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x9e\x08\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\xa8\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\xb3\x08\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x8c\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\xc0\x08\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\xcc\x08\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x06\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\xdc\x08\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00'
                b'\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\xe2\x08\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00[\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00'
                b'\t\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xc8\xec\xb2SPV\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x15\x00\x00\x00\xfa\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x03\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x02\x00\x00\x00\x00\x00\x00\x00\xa0\xed\xb2SPV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x02\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00BACKBUFFER_SIZE\x00CAMERA_POSITION\x00DELT'
                b'A_TIME\x00INV_PROJECTION\x00INV_VIEW\x00INV_VIEW_ORIGIN\x00JITTER_DELTA\x00JITTER_FRAME\x00JITTER_OFFSET\x00L'
                b'IGHT_COLOR\x00LIGHT_DIRECTION\x00LIGHT_DUMMY_0\x00LIGHT_DUMMY_1\x00LIGHT_POSITION\x00MOUSE_POS\x00NEAR_FAR'
                b'\x00PARTICLE_ALIGN_MODE\x00PARTICLE_BLEND_MODE\x00PARTICLE_CELL_COUNT\x00PARTICLE_COLOR\x00PARTICLE_COMMON_'
                b'DUMMY_0\x00PARTICLE_DELAY\x00PARTICLE_DUMMY_0\x00PARTICLE_ENABLE_VECTOR_FIELD\x00PARTICLE_FADE_IN\x00PARTIC'
                b'LE_FADE_OUT\x00PARTICLE_FORCE_ELASTICITY\x00PARTICLE_FORCE_FRICTION\x00PARTICLE_FORCE_GRAVITY\x00PARTICLE_LI'
                b'FE_TIME\x00PARTICLE_MAX_COUNT\x00PARTICLE_OPACITY\x00PARTICLE_PARENT_MATRIX\x00PARTICLE_PLAY_SPEED\x00PARTI'
                b'CLE_SPAWN_COUNT\x00PARTICLE_SPAWN_VOLUME_INFO\x00PARTICLE_SPAWN_VOLUME_MATRIX\x00PARTICLE_SPAWN_VOLUME_TY'
                b'PE\x00PARTICLE_TRANSFORM_ROTATION_MAX\x00PARTICLE_TRANSFORM_ROTATION_MIN\x00PARTICLE_TRANSFORM_SCALE_MAX\x00'
                b'PARTICLE_TRANSFORM_SCALE_MIN\x00PARTICLE_VECTOR_FIELD_INV_MATRIX\x00PARTICLE_VECTOR_FIELD_MATRIX\x00PARTICLE_'
                b'VECTOR_FIELD_STRENGTH\x00PARTICLE_VECTOR_FIELD_TIGHTNESS\x00PARTICLE_VELOCITY_ACCELERATION\x00PARTICLE_VELOCI'
                b'TY_LIMIT\x00PARTICLE_VELOCITY_POSITION_MAX\x00PARTICLE_VELOCITY_POSITION_MIN\x00PARTICLE_VELOCITY_ROTATION_MA'
                b'X\x00PARTICLE_VELOCITY_ROTATION_MIN\x00PARTICLE_VELOCITY_SCALE_MAX\x00PARTICLE_VELOCITY_SCALE_MIN\x00PARTICL'
                b'E_VELOCITY_STRETCH\x00PARTICLE_VELOCITY_TYPE\x00POINT_LIGHTS[0].color\x00POINT_LIGHTS[0].pos\x00POINT_LIGHTS'
                b'[0].radius\x00POINT_LIGHTS[0].render\x00POINT_LIGHTS[1].color\x00POINT_LIGHTS[1].pos\x00POINT_LIGHTS[1].radi'
                b'us\x00POINT_LIGHTS[1].render\x00POINT_LIGHTS[2].color\x00POINT_LIGHTS[2].pos\x00POINT_LIGHTS[2].radius\x00P'
                b'OINT_LIGHTS[2].render\x00POINT_LIGHTS[3].color\x00POINT_LIGHTS[3].pos\x00POINT_LIGHTS[3].radius\x00POINT_LIG'
                b'HTS[3].render\x00POINT_LIGHTS[4].color\x00POINT_LIGHTS[4].pos\x00POINT_LIGHTS[4].radius\x00POINT_LIGHTS[4].r'
                b'ender\x00POINT_LIGHTS[5].color\x00POINT_LIGHTS[5].pos\x00POINT_LIGHTS[5].radius\x00POINT_LIGHTS[5].rende'
                b'r\x00POINT_LIGHTS[6].color\x00POINT_LIGHTS[6].pos\x00POINT_LIGHTS[6].radius\x00POINT_LIGHTS[6].render\x00PO'
                b'INT_LIGHTS[7].color\x00POINT_LIGHTS[7].pos\x00POINT_LIGHTS[7].radius\x00POINT_LIGHTS[7].render\x00POINT_LIGH'
                b'TS[8].color\x00POINT_LIGHTS[8].pos\x00POINT_LIGHTS[8].radius\x00POINT_LIGHTS[8].render\x00POINT_LIGHTS[9].co'
                b'lor\x00POINT_LIGHTS[9].pos\x00POINT_LIGHTS[9].radius\x00POINT_LIGHTS[9].render\x00PREV_VIEW_PROJECTION\x00P'
                b'ROJECTION\x00RENDER_SSAO\x00RENDER_SSR\x00SCREEN_SIZE\x00SHADOWMAP_LOOP_COUNT\x00SHADOW_MATRIX\x00TIME\x00VIE'
                b'W\x00VIEWCONSTANTS_DUMMY0\x00VIEW_DUMMY_0\x00VIEW_ORIGIN\x00VIEW_PROJECTION\x00layer\x00luminance_from_rad'
                b'iance\x00transmittance_texture\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00vertex\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R'
                b'\x8b\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xffgl_Position\x00\t\x00\x00\x00\x00\x00\x00\x00\x01'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\n\x00\x00\x00\x00'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x19\x00\x00\x00\x02'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00$\x00\x00\x00\x03\x00\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00delta_mie\x00delta_rayleigh\x00scattering\x00single_mie_scatte'
                b'ring\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x03\x03\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x05\x05'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x06\x06'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\xe0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00/\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x04\x04\xff\xff\xff\xff\xff\xff\x00\x00\x00@\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00E\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00U\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x01\xff\xff\xff\xff\xff\xff\x00\x00\x00\xb0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00d\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x02\x02\xff\xff\xff\xff\xff\xff\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00light_constants\x00par'
                b'ticle_common\x00particle_infos\x00point_light_constants\x00scene_constants\x00view_constants\x00view_projec'
                b'tion\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xffR\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00vertex\x00'
                b'\x0c\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffR\x8b\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00gl_FragCoord\x00\t\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\n\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x19\x00\x00\x00\x02\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00$\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00delta_mie\x00delta_rayleigh\x00scattering\x00single_mie_scattering\x00\x00\xb9\x01\x00\x00!!NVvp5.0\nOP'
                b'TION NV_internal;\nOPTION NV_bindless_texture;\nCBUFFER buf0[] = { program.buffer[0] };\nCBUFFER buf1[] = {'
                b' program.buffer[1] };\nCBUFFER buf2[] = { program.buffer[2] };\nCBUFFER buf3[] = { program.buffer[3] };\nCB'
                b'UFFER buf4[] = { program.buffer[4] };\nCBUFFER buf5[] = { program.buffer[5] };\nCBUFFER buf6[] = { program'
                b'.buffer[6] };\nATTRIB vertex_attrib[] = { vertex.attrib[0..0] };\nTEMP T;\nMOV.F result.position, vertex.at'
                b'trib[0];\nEND\n\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xa5)\x00'
                b'\x00!!NVfp5.0\nOPTION NV_internal;\nOPTION NV_gpu_program_fp64;\nOPTION NV_bindless_texture;\nOPTION ARB_dr'
                b'aw_buffers;\nPARAM c[5] = { program.local[0..4] };\nCBUFFER buf0[] = { program.buffer[0] };\nCBUFFER buf1[]'
                b' = { program.buffer[1] };\nCBUFFER buf2[] = { program.buffer[2] };\nCBUFFER buf3[] = { program.buffer[3] }'
                b';\nCBUFFER buf4[] = { program.buffer[4] };\nCBUFFER buf5[] = { program.buffer[5] };\nCBUFFER buf6[] = { pro'
                b'gram.buffer[6] };\nTEMP R0, R1, R2, R3, R4, R5;\nLONG TEMP D0;\nTEMP T;\nTEMP RC;\nSHORT TEMP HC;\nOUTPUT '
                b'result_color0 = result.color;\nOUTPUT result_color1 = result.color[1];\nOUTPUT result_color2 = result.colo'
                b'r[2];\nOUTPUT result_color3 = result.color[3];\nI2F.S R0.z, c[4].x;\nADD.F32 R0.w, R0.z, {0.5, 0, 0, 0}.x;\n'
                b'MUL.F32 R0.x, fragment.position, {0.03125, 0, 0, 0};\nFLR.F R0.x, R0;\nMAD.F32 R0.y, -R0.x, {32, 0, 0, 0}.'
                b'x, fragment.position.x;\nMOV.F R0.z, fragment.position.y;\nMUL.F32 R0, R0, {0.142857149, 0.03125, 0.007812'
                b'5, 0}.xyzy;\nADD.F32 R0.w, R0, {-0.015625, 0, 0, 0}.x;\nMUL.F32 R1.y, R0.w, {896.389893, 0, 0, 0}.x;\nMAD.F'
                b'32 R0.w, R1.y, R1.y, {40462320, 0, 0, 0}.x;\nRSQ.F32 R0.w, R0.w;\nSLT.F32 R1.z, R0, {0.5, 0, 0, 0}.x;\nTRUN'
                b'C.U.CC HC.x, R1.z;\nRCP.F32 R0.w, R0.w;\nIF NE.x;\nADD.F32 R1.z, R0.w, {-6361, 0, 0, 0}.x;\nADD.F32 R1.w, -R'
                b'1.z, R1.y;\nMAD.F32 R0.z, -R0, {2, 0.9921875, 0, 0}.x, {2, 0.9921875, 0, 0}.y;\nMUL.F32 R0.z, R0, R1.w;\nMU'
                b'L.F32 R0.z, R0, {1.01587307, 0, 0, 0}.x;\nSEQ.F R1.w, R1.z, -R0.z;\nTRUNC.U.CC HC.x, R1.w;\nADD.F32 R0.z, R'
                b'1, R0;\nIF NE.x;\nMOV.F R0.z, {-1, 0, 0, 0}.x;\nELSE;\nMUL.F32 R1.z, R0, R0;\nMUL.F32 R0.z, R0, R0.w;\nMAD'
                b'.F32 R1.y, R1, R1, R1.z;\nDIV.F32 R0.z, -R1.y, R0.z;\nMUL.F32 R0.z, R0, {0.5, 0, 0, 0}.x;\nMIN.F R0.z, R0, '
                b'{1, 0, 0, 0}.x;\nMAX.F R0.z, R0, {-1, 0, 0, 0}.x;\nENDIF;\nMOV.F R1.w, R0.z;\nMOV.U R2.w, {1, 0, 0, 0}.x;\nEL'
                b'SE;\nADD.F32 R1.z, -R0.w, {6420, 0, 0, 0}.x;\nADD.F32 R1.w, -R1.z, R1.y;\nADD.F32 R1.w, R1, {868.377747, 0,'
                b' 0, 0}.x;\nMAD.F32 R0.z, R0, {2, -1.0078125, 0, 0}.x, {2, -1.0078125, 0, 0}.y;\nMUL.F32 R0.z, R0, R1.w;\nMU'
                b'L.F32 R0.z, R0, {1.01587307, 0, 0, 0}.x;\nSEQ.F R1.w, R1.z, -R0.z;\nTRUNC.U.CC HC.x, R1.w;\nADD.F32 R0.z, R'
                b'1, R0;\nIF NE.x;\nMOV.F R0.z, {1, 0, 0, 0}.x;\nELSE;\nMUL.F32 R1.z, R0, R0;\nMAD.F32 R1.y, -R1, R1, -R1.z'
                b';\nMUL.F32 R0.z, R0, R0.w;\nADD.F32 R1.y, R1, {754079.938, 0, 0, 0}.x;\nDIV.F32 R0.z, R1.y, R0.z;\nMUL.F32 R'
                b'0.z, R0, {0.5, 0, 0, 0}.x;\nMIN.F R0.z, R0, {1, 0, 0, 0}.x;\nMAX.F R0.z, R0, {-1, 0, 0, 0}.x;\nENDIF;\nMOV.F'
                b' R1.w, R0.z;\nMOV.U R2.w, {0, 0, 0, 0}.x;\nENDIF;\nADD.F32 R0.y, R0, {-0.015625, 0, 0, 0}.x;\nMUL.F32 R0.y, '
                b'R0, {1.03225803, 0, 0, 0}.x;\nMAD.F32 R0.z, R0.y, {7.85912323, 1, 0, 0}.x, {7.85912323, 1, 0, 0}.y;\nMAD.F'
                b'32 R0.y, -R0, {7.85912323, 0, 0, 0}.x, {7.85912323, 0, 0, 0}.x;\nDIV.F32 R0.y, R0, R0.z;\nMIN.F R0.y, R0, '
                b'{7.85912323, 0, 0, 0}.x;\nMUL.F32 R0.y, R0, {809.377747, 0, 0, 0}.x;\nSEQ.F R0.z, R0.y, {-59, 0, 0, 0}.x;\n'
                b'TRUNC.U.CC HC.x, R0.z;\nADD.F32 R0.y, R0, {59, 0, 0, 0}.x;\nIF NE.x;\nMOV.F R3.w, {1, 0, 0, 0}.x;\nELSE;\nMAD'
                b'.F32 R0.z, -R0.y, R0.y, {754079.938, 0, 0, 0}.x;\nDIV.F32 R0.y, R0.z, R0.y;\nMUL.F32 R0.y, R0, {7.86039964'
                b'e-05, 0, 0, 0}.x;\nMIN.F R0.y, R0, {1, 0, 0, 0}.x;\nMAX.F R3.w, R0.y, {-1, 0, 0, 0}.x;\nENDIF;\nMAD.F32 R0.x'
                b', R0, {2, -1, 0, 0}, {2, -1, 0, 0}.y;\nMIN.F R0.x, R0, {1, 0, 0, 0};\nMOV.U.CC RC.x, R2.w;\nMAD.F32 R0.z, -'
                b'R3.w, R3.w, {1, 0, 0, 0}.x;\nMUL.F32 R0.y, R1.w, R1.w;\nMAD.F32 R0.y, -R0, R0.z, R0.z;\nRSQ.F32 R0.y, R0.y;'
                b'\nRCP.F32 R0.y, R0.y;\nMAD.F32 R0.z, R1.w, R3.w, R0.y;\nMAX.F R0.x, R0, {-1, 0, 0, 0};\nMIN.F R0.x, R0.z, R0'
                b';\nMAD.F32 R0.y, R1.w, R3.w, -R0;\nMAX.F R4.x, R0.y, R0;\nMOV.U R0.x, {1, 0, 0, 0};\nIF NE.x;\nMUL.F32 R0.x, '
                b'R0.w, R0.w;\nMUL.F32 R0.y, R1.w, R1.w;\nMAD.F32 R0.x, R0.y, R0, -R0;\nADD.F32 R0.x, R0, {40462320, 0, 0, 0}'
                b';\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMAD.F32 R0.x, -R0.w, R1.w, -R0;\n'
                b'MAX.F R1.x, R0, {0, 0, 0, 0};\nMOV.U R0.x, {0, 0, 0, 0};\nENDIF;\nMOV.U.CC RC.x, R0;\nIF NE.x;\nMUL.F32 R0.x,'
                b' R0.w, R0.w;\nMUL.F32 R0.y, R1.w, R1.w;\nMAD.F32 R0.x, R0.y, R0, -R0;\nADD.F32 R0.x, R0, {41216400, 0, 0, 0'
                b'};\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nMAD.F32 R0.x, -R0.w, R1.w, R0;\n'
                b'MAX.F R1.x, R0, {0, 0, 0, 0};\nENDIF;\nMOV.F R2.xyz, {0, 0, 0, 0}.x;\nMOV.F R3.xyz, {0, 0, 0, 0}.x;\nMUL.F32'
                b' R4.y, R1.x, {0.0199999996, 0, 0, 0}.x;\nMOV.S R4.z, {0, 0, 0, 0}.x;\nREP.S {51, 0, 0, 0};\nI2F.S R0.x, R4.'
                b'z;\nMUL.F32 R0.x, R0, R4.y;\nMUL.F32 R0.y, R0.w, R1.w;\nMUL.F32 R0.y, R0.x, R0;\nMUL.F32 R0.y, R0, {2, 0, 0,'
                b' 0}.x;\nMAD.F32 R0.y, R0.x, R0.x, R0;\nMAD.F32 R0.y, R0.w, R0.w, R0;\nRSQ.F32 R0.y, R0.y;\nRCP.F32 R0.y, R0.'
                b'y;\nMOV.U.CC RC.x, R2.w;\nMUL.F32 R0.z, R0.x, R4.x;\nMAD.F32 R1.x, R0.w, R1.w, R0;\nMIN.F R0.y, R0, {6420, 0'
                b', 0, 0}.x;\nMAX.F R0.x, R0.y, {6361, 0, 0, 0};\nMAD.F32 R0.y, R0.w, R3.w, R0.z;\nDIV.F32 R0.y, R0, R0.x;\nDI'
                b'V.F32 R0.z, R1.x, R0.x;\nMIN.F R0.z, R0, {1, 0, 0, 0}.x;\nMIN.F R0.y, R0, {1, 0, 0, 0}.x;\nMAX.F R5.y, R0.z'
                b', {-1, 0, 0, 0}.x;\nMAX.F R5.x, R0.y, {-1, 0, 0, 0};\nMOV.F R4.w, R0.x;\nMOV.F R0.z, R0.x;\nIF NE.x;\nADD.F32'
                b' R1.y, -R0.w, {6420, 0, 0, 0}.x;\nMUL.F32 R0.y, -R1.w, -R1.w;\nMUL.F32 R0.x, R0.w, R0.w;\nMAD.F32 R0.x, R0.'
                b'y, R0, -R0;\nADD.F32 R0.x, R0, {41216400, 0, 0, 0};\nMAX.F R0.y, R0.x, {0, 0, 0, 0}.x;\nMAD.F32 R0.x, R0.w,'
                b' R0.w, {-40462320, 0, 0, 0};\nRSQ.F32 R0.y, R0.y;\nRCP.F32 R0.y, R0.y;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nMAD.F'
                b'32 R1.x, -R0.w, -R1.w, R0.y;\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.y, R0.x;\nADD.F32 R1.z, -R1.y, R0.y;\nMAX.F R0'
                b'.x, R1, {0, 0, 0, 0};\nADD.F32 R0.x, R0, -R1.y;\nADD.F32 R1.x, R1.z, {868.377747, 0, 0, 0};\nDIV.F32 R1.y, '
                b'R0.x, R1.x;\nMUL.F32 R0.x, R0.z, R0.z;\nMUL.F32 R1.x, -R5.y, -R5.y;\nMAD.F32 R1.x, R1, R0, -R0;\nMAD.F32 R0.'
                b'x, R1.y, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nADD.F32 R5.z, R1.x, {41216400, '
                b'0, 0, 0}.x;\nMAD.F32 R0.y, R0, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U'
                b' D0.x, c[3];\nTEX.F R1.xyz, R0, handle(D0.x), 2D;\nMAD.F32 R0.x, R0.z, R0.z, {-40462320, 0, 0, 0};\nMAX.F R'
                b'0.y, R5.z, {0, 0, 0, 0}.x;\nRSQ.F32 R0.y, R0.y;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRCP.F32 R0.y, R0.y;\nMAD.F32'
                b' R0.y, -R0.z, -R5, R0;\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.x, R0.x;\nADD.F32 R0.z, -R0, {6420, 0, 0, 0}.x;\nADD'
                b'.F32 R5.y, -R0.z, R0.x;\nMAX.F R0.y, R0, {0, 0, 0, 0}.x;\nADD.F32 R0.y, R0, -R0.z;\nADD.F32 R5.y, R5, {868.'
                b'377747, 0, 0, 0}.x;\nDIV.F32 R0.z, R0.y, R5.y;\nMAD.F32 R0.y, R0.x, {0.0011335793, 0.0078125, 0, 0}.x, {0.'
                b'0011335793, 0.0078125, 0, 0};\nMAD.F32 R0.x, R0.z, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125,'
                b' 0, 0}.y;\nRCP.F32 R1.x, R1.x;\nRCP.F32 R1.z, R1.z;\nRCP.F32 R1.y, R1.y;\nTEX.F R0.xyz, R0, handle(D0.x), 2D'
                b';\nMUL.F32 R0.xyz, R0, R1;\nMIN.F R1.xyz, R0, {1, 0, 0, 0}.x;\nELSE;\nMUL.F32 R0.y, R5, R5;\nMUL.F32 R0.x, R0'
                b'.z, R0.z;\nMAD.F32 R0.x, R0.y, R0, -R0;\nADD.F32 R0.x, R0, {41216400, 0, 0, 0};\nMAX.F R0.y, R0.x, {0, 0, 0'
                b', 0}.x;\nMAD.F32 R0.x, R0.z, R0.z, {-40462320, 0, 0, 0};\nRSQ.F32 R0.y, R0.y;\nRCP.F32 R0.y, R0.y;\nMAD.F32 '
                b'R1.x, -R0.z, R5.y, R0.y;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRSQ.F32 R0.x, R0.x;\nRCP.F32 R0.y, R0.x;\nADD.F32 R'
                b'0.z, -R0, {6420, 0, 0, 0}.x;\nADD.F32 R1.y, -R0.z, R0;\nMAX.F R0.x, R1, {0, 0, 0, 0};\nADD.F32 R0.x, R0, -R'
                b'0.z;\nADD.F32 R1.x, R1.y, {868.377747, 0, 0, 0};\nDIV.F32 R1.x, R0, R1.x;\nMUL.F32 R0.x, R0.w, R0.w;\nMUL.F3'
                b'2 R0.z, R1.w, R1.w;\nMAD.F32 R0.z, R0, R0.x, -R0.x;\nMAD.F32 R0.x, R1, {0.99609375, 0.001953125, 0, 0}, {0'
                b'.99609375, 0.001953125, 0, 0}.y;\nADD.F32 R0.z, R0, {41216400, 0, 0, 0}.x;\nMAD.F32 R0.y, R0, {0.001133579'
                b'3, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U D0.x, c[3];\nTEX.F R1.xyz, R0, handle(D0.x'
                b'), 2D;\nMAX.F R0.y, R0.z, {0, 0, 0, 0}.x;\nMAD.F32 R0.x, R0.w, R0.w, {-40462320, 0, 0, 0};\nRSQ.F32 R0.y, R'
                b'0.y;\nMAX.F R0.x, R0, {0, 0, 0, 0};\nRCP.F32 R0.y, R0.y;\nRSQ.F32 R0.x, R0.x;\nMAD.F32 R0.y, -R0.w, R1.w, R0'
                b';\nRCP.F32 R0.x, R0.x;\nADD.F32 R0.z, -R0.w, {6420, 0, 0, 0}.x;\nADD.F32 R5.y, -R0.z, R0.x;\nMAX.F R0.y, R0,'
                b' {0, 0, 0, 0}.x;\nADD.F32 R0.y, R0, -R0.z;\nADD.F32 R5.y, R5, {868.377747, 0, 0, 0}.x;\nDIV.F32 R0.z, R0.y,'
                b' R5.y;\nMAD.F32 R0.y, R0.x, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nMAD.F32 R'
                b'0.x, R0.z, {0.99609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nRCP.F32 R1.x, R1.x;\nRCP.F'
                b'32 R1.z, R1.z;\nRCP.F32 R1.y, R1.y;\nTEX.F R0.xyz, R0, handle(D0.x), 2D;\nMUL.F32 R0.xyz, R0, R1;\nMIN.F R1.'
                b'xyz, R0, {1, 0, 0, 0}.x;\nENDIF;\nDIV.F32 R0.x, {6361, 0, 0, 0}, R4.w;\nMAD.F32 R0.y, -R0.x, R0.x, {1, 0, 0'
                b', 0}.x;\nMAX.F R5.y, R0, {0, 0, 0, 0}.x;\nMUL.F32 R0.z, R4.w, R4.w;\nMUL.F32 R0.y, R5.x, R5.x;\nMAD.F32 R0.y'
                b', R0, R0.z, -R0.z;\nRSQ.F32 R0.z, R5.y;\nMUL.F32 R5.y, -R0.x, {0.0233750008, 0, 0, 0}.x;\nADD.F32 R0.y, R0,'
                b' {41216400, 0, 0, 0}.x;\nRCP.F32 R0.z, R0.z;\nMAX.F R0.y, R0, {0, 0, 0, 0}.x;\nRSQ.F32 R0.y, R0.y;\nADD.F32 '
                b'R0.z, R5.x, R0;\nMAD.F32 R5.y, R0.x, {0.0233750008, 0, 0, 0}.x, -R5;\nMAD.F32 R0.x, R0, {0.0233750008, 0, '
                b'0, 0}, R0.z;\nMAD.F32 R0.z, R4.w, R4.w, {-40462320, 0, 0, 0}.x;\nDIV.F32.SAT R0.x, R0, R5.y;\nMAX.F R0.z, R'
                b'0, {0, 0, 0, 0}.x;\nRSQ.F32 R5.y, R0.z;\nRCP.F32 R0.y, R0.y;\nMAD.F32 R0.z, -R4.w, R5.x, R0.y;\nRCP.F32 R0.y'
                b', R5.y;\nADD.F32 R5.x, -R4.w, {6420, 0, 0, 0};\nADD.F32 R5.y, -R5.x, R0;\nMAX.F R0.z, R0, {0, 0, 0, 0}.x;\nA'
                b'DD.F32 R0.z, R0, -R5.x;\nMAD.F32 R5.x, -R0, {2, 3, 0, 0}, {2, 3, 0, 0}.y;\nMUL.F32 R0.x, R0, R0;\nADD.F32 R'
                b'5.y, R5, {868.377747, 0, 0, 0}.x;\nDIV.F32 R0.z, R0, R5.y;\nMUL.F32 R5.x, R0, R5;\nMAD.F32 R0.x, R0.z, {0.9'
                b'9609375, 0.001953125, 0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nMAD.F32 R0.y, R0, {0.0011335793, 0.0078125, '
                b'0, 0}.x, {0.0011335793, 0.0078125, 0, 0};\nPK64.U D0.x, c[3];\nTEX.F R0.xyz, R0, handle(D0.x), 2D;\nMUL.F32'
                b' R0.xyz, R0, R5.x;\nMUL.F32 R0.xyz, R1, R0;\nSLT.F32 R1.y, R4.w, {6361, 0, 0, 0}.x;\nTRUNC.U.CC HC.x, R1.y;'
                b'\nADD.F32 R1.x, R4.w, {-6361, 0, 0, 0};\nIF NE.x;\nMOV.F R1.x, {0, 0, 0, 0};\nELSE;\nMUL.F32 R1.x, R1, {-0.18'
                b'0336878, 0, 0, 0};\nEX2.F32.SAT R1.x, R1.x;\nENDIF;\nSLT.F32 R5.x, R4.w, {6361, 0, 0, 0};\nTRUNC.U.CC HC.x, '
                b'R5;\nMUL.F32 R1.xyz, R0, R1.x;\nADD.F32 R4.w, R4, {-6361, 0, 0, 0}.x;\nIF NE.x;\nMOV.F R4.w, {0, 0, 0, 0}.x;'
                b'\nELSE;\nMUL.F32 R4.w, R4, {-1.20224535, 0, 0, 0}.x;\nEX2.F32.SAT R4.w, R4.w;\nENDIF;\nMUL.F32 R0.xyz, R0, R4'
                b'.w;\nSEQ.S R5.x, R4.z, {50, 0, 0, 0};\nSEQ.S R4.w, R4.z, {0, 0, 0, 0}.x;\nOR.U.CC HC.x, -R4.w, -R5;\nIF NE.x'
                b';\nMOV.F R4.w, {0.5, 0, 0, 0}.x;\nELSE;\nMOV.F R4.w, {1, 0, 0, 0}.x;\nENDIF;\nMAD.F32 R2.xyz, R1, R4.w, R'
                b'2;\nMAD.F32 R3.xyz, R4.w, R0, R3;\nADD.S R4.z, R4, {1, 0, 0, 0}.x;\nENDREP;\nMUL.F32 R0.xyz, R2, R4.y;\nMUL.F'
                b'32 R1.xyz, R4.y, R3;\nMUL.F32 R2.xyz, R0, {0.00855214801, 0.0250877235, 0.0632865429, 0};\nMUL.F32 R1.xyz,'
                b' R1, {0.00589010399, 0.00739419879, 0.00764027238, 0};\nMUL.F32 R0.xyz, R1.y, c[1];\nMUL.F32 R3.xyz, R2.y,'
                b' c[1];\nMAD.F32 R0.xyz, R1.x, c[0], R0;\nMAD.F32 R0, R1.z, c[2].xyzx, R0.xyzx;\nMAD.F32 R3.xyz, R2.x, c[0],'
                b' R3;\nMAD.F32 result_color2.xyz, R2.z, c[2], R3;\nMOV.F result_color3.xyz, R0;\nMOV.F result_color0.xyz, R2'
                b';\nMOV.F result_color2.w, R0;\nMOV.F result_color1.xyz, R1;\nEND\n\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00 \x00\x00\x00\x08\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q\rtq\x0eb.',
 'binary_format': c_uint(36385),
 'include_files': {'Resource/Shaders/precomputed_atmosphere/compute_atmosphere_predefine.glsl': '2019-05-09 02:31:28.865674',
                   'Resource/Shaders/precomputed_atmosphere/definitions.glsl': '2019-04-26 22:19:04.792401',
                   'Resource/Shaders/precomputed_atmosphere/precompute_vs.glsl': '2019-04-26 22:19:04.792401',
                   'Resource/Shaders/scene_constants.glsl': '2019-04-26 22:19:04.792401'},
 'macros': OrderedDict([('COMBINED_SCATTERING_TEXTURES', 1)]),
 'material_components': [],
 'shader_codes': {GL_FRAGMENT_SHADER: '#version 430 core\n'
                                      '# extension GL_EXT_texture_array : enable\n'
                                      '#define MATERIAL_COMPONENTS 1\n'
                                      '#define FRAGMENT_SHADER 1\n'
                                      '#define COMBINED_SCATTERING_TEXTURES 1\n'
                                      '#if __VERSION__ >= 130\n'
                                      '#define texture2D texture\n'
                                      '#define texture2DLod textureLod\n'
                                      '#define texture2DGrad textureGrad\n'
                                      '#define texture2DArray texture\n'
                                      '#define texture2DArrayLod textureLod\n'
                                      '#define texture2DArrayGrad textureGrad\n'
                                      '#define texture3D texture\n'
                                      '#define texture3DLod textureLod\n'
                                      '#define texture3DGrad textureGrad\n'
                                      '#define textureCube texture\n'
                                      '#define textureCubeLod textureLod\n'
                                      '#define textureCubeGrad textureGrad\n'
                                      '#endif\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "precomputed_atmosphere/compute_atmosphere_predefine.glsl"\n'
                                      '#ifndef UUID_8f6331f7_2c1c_37f2_bed6_c85eab80eac2\n'
                                      '#define UUID_8f6331f7_2c1c_37f2_bed6_c85eab80eac2\n'
                                      'const int TRANSMITTANCE_TEXTURE_WIDTH = 256;\n'
                                      'const int TRANSMITTANCE_TEXTURE_HEIGHT = 64;\n'
                                      'const int SCATTERING_TEXTURE_R_SIZE = 32;\n'
                                      'const int SCATTERING_TEXTURE_MU_SIZE = 128;\n'
                                      'const int SCATTERING_TEXTURE_MU_S_SIZE = 32;\n'
                                      'const int SCATTERING_TEXTURE_NU_SIZE = 8;\n'
                                      'const int IRRADIANCE_TEXTURE_WIDTH = 64;\n'
                                      'const int IRRADIANCE_TEXTURE_HEIGHT = 16;\n'
                                      'const vec2 IRRADIANCE_TEXTURE_SIZE = vec2(64, 16);\n'
                                      '\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "precomputed_atmosphere/definitions.glsl"\n'
                                      '#ifndef UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d\n'
                                      '#define UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      'layout(std140, binding=0) uniform scene_constants\n'
                                      '{\n'
                                      '    float TIME;\n'
                                      '    float JITTER_FRAME;\n'
                                      '    bool RENDER_SSR;\n'
                                      '    bool RENDER_SSAO;\n'
                                      '    vec2 SCREEN_SIZE;\n'
                                      '    vec2 BACKBUFFER_SIZE;\n'
                                      '    vec2 MOUSE_POS;\n'
                                      '    float DELTA_TIME;\n'
                                      '    int SHADOWMAP_LOOP_COUNT;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=1) uniform view_constants\n'
                                      '{\n'
                                      '    mat4 VIEW;\n'
                                      '    mat4 INV_VIEW;\n'
                                      '    mat4 VIEW_ORIGIN;\n'
                                      '    mat4 INV_VIEW_ORIGIN;\n'
                                      '    mat4 PROJECTION;\n'
                                      '    mat4 INV_PROJECTION;\n'
                                      '    vec3 CAMERA_POSITION;\n'
                                      '    float VIEW_DUMMY_0;\n'
                                      '    vec2 NEAR_FAR;\n'
                                      '    vec2 JITTER_DELTA;\n'
                                      '    vec2 JITTER_OFFSET;\n'
                                      '    vec2 VIEWCONSTANTS_DUMMY0;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=2) uniform view_projection\n'
                                      '{\n'
                                      '    mat4 VIEW_PROJECTION;\n'
                                      '    mat4 PREV_VIEW_PROJECTION;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=3) uniform light_constants\n'
                                      '{\n'
                                      '    vec3 LIGHT_POSITION;\n'
                                      '    float LIGHT_DUMMY_0;\n'
                                      '    vec3 LIGHT_DIRECTION;\n'
                                      '    float LIGHT_DUMMY_1;\n'
                                      '    vec4 LIGHT_COLOR;\n'
                                      '    mat4 SHADOW_MATRIX;\n'
                                      '};\n'
                                      '\n'
                                      'const int MAX_POINT_LIGHTS = 10;\n'
                                      '\n'
                                      'struct POINT_LIGHT\n'
                                      '{\n'
                                      '    vec3 color;\n'
                                      '    float radius;\n'
                                      '    vec3 pos;\n'
                                      '    float render;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=4) uniform point_light_constants\n'
                                      '{\n'
                                      '    POINT_LIGHT POINT_LIGHTS[MAX_POINT_LIGHTS];\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      'layout(std140, binding=5) uniform particle_common\n'
                                      '{\n'
                                      '    vec3 PARTICLE_COLOR;\n'
                                      '    int PARTICLE_ALIGN_MODE;\n'
                                      '    ivec2 PARTICLE_CELL_COUNT;\n'
                                      '    int PARTICLE_BLEND_MODE;\n'
                                      '    int PARTICLE_COMMON_DUMMY_0;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=6) uniform particle_infos\n'
                                      '{\n'
                                      '    mat4 PARTICLE_PARENT_MATRIX;\n'
                                      '    vec2 PARTICLE_DELAY;\n'
                                      '    vec2 PARTICLE_LIFE_TIME;\n'
                                      '    vec3 PARTICLE_TRANSFORM_ROTATION_MIN;\n'
                                      '    float PARTICLE_FADE_IN;\n'
                                      '    vec3 PARTICLE_TRANSFORM_ROTATION_MAX;\n'
                                      '    float PARTICLE_FADE_OUT;\n'
                                      '    vec3 PARTICLE_TRANSFORM_SCALE_MIN;\n'
                                      '    float PARTICLE_OPACITY;\n'
                                      '    vec3 PARTICLE_TRANSFORM_SCALE_MAX;\n'
                                      '    bool PARTICLE_ENABLE_VECTOR_FIELD;\n'
                                      '    vec3 PARTICLE_VELOCITY_POSITION_MIN;\n'
                                      '    float PARTICLE_VECTOR_FIELD_STRENGTH;\n'
                                      '    vec3 PARTICLE_VELOCITY_POSITION_MAX;\n'
                                      '    float PARTICLE_VECTOR_FIELD_TIGHTNESS;\n'
                                      '    vec3 PARTICLE_VELOCITY_ROTATION_MIN;\n'
                                      '    uint PARTICLE_MAX_COUNT;\n'
                                      '    vec3 PARTICLE_VELOCITY_ROTATION_MAX;\n'
                                      '    uint PARTICLE_SPAWN_COUNT;\n'
                                      '    vec3 PARTICLE_VELOCITY_SCALE_MIN;\n'
                                      '    float PARTICLE_VELOCITY_STRETCH;\n'
                                      '    vec3 PARTICLE_VELOCITY_SCALE_MAX;\n'
                                      '    float PARTICLE_VELOCITY_ACCELERATION;\n'
                                      '    mat4 PARTICLE_VECTOR_FIELD_MATRIX;\n'
                                      '    mat4 PARTICLE_VECTOR_FIELD_INV_MATRIX;\n'
                                      '    vec3 PARTICLE_SPAWN_VOLUME_INFO;\n'
                                      '    uint PARTICLE_SPAWN_VOLUME_TYPE;\n'
                                      '    mat4 PARTICLE_SPAWN_VOLUME_MATRIX;\n'
                                      '    vec2 PARTICLE_VELOCITY_LIMIT;\n'
                                      '    float PARTICLE_FORCE_GRAVITY;\n'
                                      '    float PARTICLE_PLAY_SPEED;\n'
                                      '    uint PARTICLE_VELOCITY_TYPE;\n'
                                      '    float PARTICLE_FORCE_ELASTICITY;\n'
                                      '    float PARTICLE_FORCE_FRICTION;\n'
                                      '    uint PARTICLE_DUMMY_0;\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'const int BLEND = 0;\n'
                                      'const int ADDITIVE = 1;\n'
                                      'const int MULTIPLY = 2;\n'
                                      'const int SUBTRACT = 3;\n'
                                      '\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '\n'
                                      'const int MAX_BONES_PER_VERTEX = 4;\n'
                                      'const int MAX_BONES = 100;\n'
                                      'const float SHADOW_BIAS = -0.0001;\n'
                                      '\n'
                                      'const float PI = 3.14159265358979323846;\n'
                                      'const float HALF_PI = PI * 0.5;\n'
                                      'const float TWO_PI = PI * 2.0;\n'
                                      'const float deg = PI / 180.0;\n'
                                      '\n'
                                      'const vec3 kSphereCenter = vec3(1.0, 1.0, -2.0);\n'
                                      'const float kSphereRadius = 1.0;\n'
                                      'const vec3 kSphereAlbedo = vec3(0.8);\n'
                                      'const vec3 kGroundAlbedo = vec3(0.0, 0.0, 0.04);\n'
                                      '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                      '\n'
                                      '\n'
                                      'uniform vec3 earth_center;\n'
                                      'uniform vec2 sun_size;\n'
                                      'uniform float atmosphere_exposure;\n'
                                      'uniform bool render_light_probe_mode;\n'
                                      '\n'
                                      'uniform sampler2D transmittance_texture;\n'
                                      'uniform sampler2D irradiance_texture;\n'
                                      'uniform sampler3D scattering_texture;\n'
                                      'uniform sampler3D single_mie_scattering_texture;\n'
                                      'uniform sampler3D single_rayleigh_scattering_texture;\n'
                                      'uniform sampler3D scattering_density_texture;\n'
                                      'uniform sampler3D multiple_scattering_texture;\n'
                                      '\n'
                                      '\n'
                                      'uniform vec3 SKY_RADIANCE_TO_LUMINANCE;\n'
                                      'uniform vec3 SUN_RADIANCE_TO_LUMINANCE;\n'
                                      '\n'
                                      'const float atmosphere_ratio = 0.1;\n'
                                      '\n'
                                      'struct DensityProfileLayer\n'
                                      '{\n'
                                      '    float width;\n'
                                      '    float exp_term;\n'
                                      '    float exp_scale;\n'
                                      '    float linear_term;\n'
                                      '    float constant_term;\n'
                                      '};\n'
                                      '\n'
                                      'struct DensityProfile\n'
                                      '{\n'
                                      '    DensityProfileLayer layers[2];\n'
                                      '};\n'
                                      '\n'
                                      'struct AtmosphereParameters\n'
                                      '{\n'
                                      '    vec3 solar_irradiance;\n'
                                      '    float sun_angular_radius;\n'
                                      '    float bottom_radius;\n'
                                      '    float top_radius;\n'
                                      '    DensityProfile rayleigh_density;\n'
                                      '    vec3 rayleigh_scattering;\n'
                                      '    DensityProfile mie_density;\n'
                                      '    vec3 mie_scattering;\n'
                                      '    vec3 mie_extinction;\n'
                                      '    float mie_phase_function_g;\n'
                                      '    DensityProfile absorption_density;\n'
                                      '    vec3 absorption_extinction;\n'
                                      '    vec3 ground_albedo;\n'
                                      '    float mu_s_min;\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      'float ClampCosine(float mu)\n'
                                      '{\n'
                                      '    return clamp(mu, -1.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float ClampDistance(float d)\n'
                                      '{\n'
                                      '    return max(d, 0.0);\n'
                                      '}\n'
                                      '\n'
                                      'float ClampRadius(const in AtmosphereParameters atmosphere, float r)\n'
                                      '{\n'
                                      '    return clamp(r, atmosphere.bottom_radius, atmosphere.top_radius);\n'
                                      '}\n'
                                      '\n'
                                      'float SafeSqrt(float a)\n'
                                      '{\n'
                                      '    return sqrt(max(a, 0.0));\n'
                                      '}\n'
                                      '\n'
                                      'float DistanceToTopAtmosphereBoundary(const in AtmosphereParameters atmosphere, float '
                                      'r, float mu)\n'
                                      '{\n'
                                      '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.top_radius * '
                                      'atmosphere.top_radius;\n'
                                      '    return ClampDistance(-r * mu + SafeSqrt(discriminant));\n'
                                      '}\n'
                                      '\n'
                                      'float DistanceToBottomAtmosphereBoundary(const in AtmosphereParameters atmosphere, '
                                      'float r, float mu)\n'
                                      '{\n'
                                      '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '    return ClampDistance(-r * mu - SafeSqrt(discriminant));\n'
                                      '}\n'
                                      '\n'
                                      'bool RayIntersectsGround(const in AtmosphereParameters atmosphere, float r, float mu)\n'
                                      '{\n'
                                      '    if(mu < 0.0)\n'
                                      '    {\n'
                                      '        float result = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '        if(0.0 <= result)\n'
                                      '        {\n'
                                      '            return true;\n'
                                      '        }\n'
                                      '    }\n'
                                      '    return false;\n'
                                      '}\n'
                                      '\n'
                                      'float GetLayerDensity(const in DensityProfileLayer layer, float altitude)\n'
                                      '{\n'
                                      '    float density =\n'
                                      '        layer.exp_term * exp(layer.exp_scale * altitude) + layer.linear_term * altitude '
                                      '+ layer.constant_term;\n'
                                      '    return clamp(density, 0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float GetProfileDensity(const in DensityProfile profile, float altitude)\n'
                                      '{\n'
                                      '    return altitude < profile.layers[0].width ?\n'
                                      '        GetLayerDensity(profile.layers[0], altitude) : '
                                      'GetLayerDensity(profile.layers[1], altitude);\n'
                                      '}\n'
                                      '\n'
                                      'float ComputeOpticalLengthToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in DensityProfile profile,\n'
                                      '    float r,\n'
                                      '    float mu)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 500;\n'
                                      '    float dx = DistanceToTopAtmosphereBoundary(atmosphere, r, mu) / '
                                      'float(SAMPLE_COUNT);\n'
                                      '    float result = 0.0;\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);\n'
                                      '        float y_i = GetProfileDensity(profile, r_i - atmosphere.bottom_radius);\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        result += y_i * weight_i * dx;\n'
                                      '    }\n'
                                      '    return result;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeTransmittanceToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu)\n'
                                      '{\n'
                                      '    return exp(-(\n'
                                      '        atmosphere.rayleigh_scattering *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.rayleigh_density, r, mu) +\n'
                                      '        atmosphere.mie_extinction *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.mie_density, r, mu) +\n'
                                      '        atmosphere.absorption_extinction *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.absorption_density, r, mu)));\n'
                                      '}\n'
                                      '\n'
                                      'float GetTextureCoordFromUnitRange(float x, int texture_size)\n'
                                      '{\n'
                                      '    return 0.5 / float(texture_size) + x * (1.0 - 1.0 / float(texture_size));\n'
                                      '}\n'
                                      '\n'
                                      'float GetUnitRangeFromTextureCoord(float u, int texture_size)\n'
                                      '{\n'
                                      '    return (u - 0.5 / float(texture_size)) / (1.0 - 1.0 / float(texture_size));\n'
                                      '}\n'
                                      '\n'
                                      'vec2 GetTransmittanceTextureUvFromRMu(const in AtmosphereParameters atmosphere, float '
                                      'r, float mu)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                      '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float d = DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '    float d_min = atmosphere.top_radius - r;\n'
                                      '    float d_max = rho + H;\n'
                                      '    float x_mu = (d - d_min) / (d_max - d_min);\n'
                                      '    float x_r = rho / H;\n'
                                      '    return vec2(GetTextureCoordFromUnitRange(x_mu, TRANSMITTANCE_TEXTURE_WIDTH),\n'
                                      '              GetTextureCoordFromUnitRange(x_r, TRANSMITTANCE_TEXTURE_HEIGHT));\n'
                                      '}\n'
                                      '\n'
                                      'void GetRMuFromTransmittanceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 uv, out float r, out float mu)\n'
                                      '{\n'
                                      '    float x_mu = GetUnitRangeFromTextureCoord(uv.x, TRANSMITTANCE_TEXTURE_WIDTH);\n'
                                      '    float x_r = GetUnitRangeFromTextureCoord(uv.y, TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                      '\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                      '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '\n'
                                      '    float rho = H * x_r;\n'
                                      '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float d_min = atmosphere.top_radius - r;\n'
                                      '    float d_max = rho + H;\n'
                                      '    float d = d_min + x_mu * (d_max - d_min);\n'
                                      '    mu = (d == 0.0) ? 1.0 : (H * H - rho * rho - d * d) / (2.0 * r * d);\n'
                                      '    mu = ClampCosine(mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeTransmittanceToTopAtmosphereBoundarytexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 gl_frag_coord)\n'
                                      '{\n'
                                      '    const vec2 TRANSMITTANCE_TEXTURE_SIZE = vec2(TRANSMITTANCE_TEXTURE_WIDTH, '
                                      'TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    GetRMuFromTransmittanceTextureUv(atmosphere, gl_frag_coord / '
                                      'TRANSMITTANCE_TEXTURE_SIZE, r, mu);\n'
                                      '    return ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittanceToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r, float mu)\n'
                                      '{\n'
                                      '    vec2 uv = GetTransmittanceTextureUvFromRMu(atmosphere, r, mu);\n'
                                      '    return vec3(texture2D(transmittance_texture, uv));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float d,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_d = ClampCosine((r * mu + d) / r_d);\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        return min(\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r_d, -mu_d) /\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, -mu),\n'
                                      '            vec3(1.0));\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        return min(\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, mu) /\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r_d, mu_d),\n'
                                      '            vec3(1.0));\n'
                                      '    }\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittanceToSun(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    float sin_theta_h = atmosphere.bottom_radius / r;\n'
                                      '    float cos_theta_h = -sqrt(max(1.0 - sin_theta_h * sin_theta_h, 0.0));\n'
                                      '    return GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, mu_s) *\n'
                                      '      smoothstep(-sin_theta_h * atmosphere.sun_angular_radius,\n'
                                      '                 sin_theta_h * atmosphere.sun_angular_radius,\n'
                                      '                 mu_s - cos_theta_h);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScatteringIntegrand(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    float d,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 rayleigh,\n'
                                      '    out vec3 mie)\n'
                                      '{\n'
                                      '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_s_d = ClampCosine((r * mu_s + d * nu) / r_d);\n'
                                      '    vec3 transmittance =\n'
                                      '        GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                      'ray_r_mu_intersects_ground) *\n'
                                      '        GetTransmittanceToSun(atmosphere, transmittance_texture, r_d, mu_s_d);\n'
                                      '    rayleigh = transmittance * GetProfileDensity(atmosphere.rayleigh_density, r_d - '
                                      'atmosphere.bottom_radius);\n'
                                      '    mie = transmittance * GetProfileDensity(atmosphere.mie_density, r_d - '
                                      'atmosphere.bottom_radius);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float DistanceToNearestAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        return DistanceToBottomAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '    }\n'
                                      '    return DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 rayleigh,\n'
                                      '    out vec3 mie)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 50;\n'
                                      '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                      'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                      '\n'
                                      '    vec3 rayleigh_sum = vec3(0.0);\n'
                                      '    vec3 mie_sum = vec3(0.0);\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        vec3 rayleigh_i;\n'
                                      '        vec3 mie_i;\n'
                                      '        ComputeSingleScatteringIntegrand(\n'
                                      '            atmosphere, transmittance_texture, r, mu, mu_s, nu, d_i, '
                                      'ray_r_mu_intersects_ground, rayleigh_i, mie_i);\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        rayleigh_sum += rayleigh_i * weight_i;\n'
                                      '        mie_sum += mie_i * weight_i;\n'
                                      '    }\n'
                                      '    rayleigh = rayleigh_sum * dx * atmosphere.solar_irradiance * '
                                      'atmosphere.rayleigh_scattering;\n'
                                      '    mie = mie_sum * dx * atmosphere.solar_irradiance * atmosphere.mie_scattering;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float RayleighPhaseFunction(float nu)\n'
                                      '{\n'
                                      '    float k = 3.0 / (16.0 * PI);\n'
                                      '    return k * (1.0 + nu * nu);\n'
                                      '}\n'
                                      '\n'
                                      'float MiePhaseFunction(float g, float nu)\n'
                                      '{\n'
                                      '    float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);\n'
                                      '    return k * (1.0 + nu * nu) / pow(1.0 + g * g - 2.0 * g * nu, 1.5);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec4 GetScatteringTextureUvwzFromRMuMuSNu(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                      'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float u_r = GetTextureCoordFromUnitRange(rho / H, SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    float r_mu = r * mu;\n'
                                      '    float discriminant = r_mu * r_mu - r * r + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '    float u_mu;\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        float d = -r_mu - SafeSqrt(discriminant);\n'
                                      '        float d_min = r - atmosphere.bottom_radius;\n'
                                      '        float d_max = rho;\n'
                                      '        u_mu = 0.5 - 0.5 * GetTextureCoordFromUnitRange(\n'
                                      '            d_max == d_min ? 0.0 : (d - d_min) / (d_max - d_min), '
                                      'SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d = -r_mu + SafeSqrt(discriminant + H * H);\n'
                                      '        float d_min = atmosphere.top_radius - r;\n'
                                      '        float d_max = rho + H;\n'
                                      '        u_mu = 0.5 + 0.5 * GetTextureCoordFromUnitRange(\n'
                                      '            (d - d_min) / (d_max - d_min), SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                      '    }\n'
                                      '\n'
                                      '    float d = DistanceToTopAtmosphereBoundary(atmosphere, atmosphere.bottom_radius, '
                                      'mu_s);\n'
                                      '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                      '    float d_max = H;\n'
                                      '    float a = (d - d_min) / (d_max - d_min);\n'
                                      '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                      '    float u_mu_s = GetTextureCoordFromUnitRange(max(1.0 - a / A, 0.0) / (1.0 + a), '
                                      'SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                      '    float u_nu = (nu + 1.0) / 2.0;\n'
                                      '    return vec4(u_nu, u_mu_s, u_mu, u_r);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuMuSNuFromScatteringTextureUvwz(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec4 uvwz,\n'
                                      '    out float r,\n'
                                      '    out float mu,\n'
                                      '    out float mu_s,\n'
                                      '    out float nu,\n'
                                      '    out bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                      'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = H * GetUnitRangeFromTextureCoord(uvwz.w, SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    if (uvwz.z < 0.5)\n'
                                      '    {\n'
                                      '        float d_min = r - atmosphere.bottom_radius;\n'
                                      '        float d_max = rho;\n'
                                      '        float d = d_min + (d_max - d_min) *\n'
                                      '            GetUnitRangeFromTextureCoord(1.0 - 2.0 * uvwz.z, SCATTERING_TEXTURE_MU_SIZE '
                                      '/ 2);\n'
                                      '        mu = (d == 0.0) ? -1.0 : ClampCosine(-(rho * rho + d * d) / (2.0 * r * d));\n'
                                      '        ray_r_mu_intersects_ground = true;\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d_min = atmosphere.top_radius - r;\n'
                                      '        float d_max = rho + H;\n'
                                      '        float d = d_min + (d_max - d_min) *\n'
                                      '            GetUnitRangeFromTextureCoord(2.0 * uvwz.z - 1.0, SCATTERING_TEXTURE_MU_SIZE '
                                      '/ 2);\n'
                                      '        mu = (d == 0.0) ? 1.0 : ClampCosine((H * H - rho * rho - d * d) / (2.0 * r * '
                                      'd));\n'
                                      '        ray_r_mu_intersects_ground = false;\n'
                                      '    }\n'
                                      '\n'
                                      '    float x_mu_s = GetUnitRangeFromTextureCoord(uvwz.y, SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                      '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                      '    float d_max = H;\n'
                                      '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                      '    float a = (A - x_mu_s * A) / (1.0 + x_mu_s * A);\n'
                                      '    float d = d_min + min(a, A) * (d_max - d_min);\n'
                                      '    mu_s = (d == 0.0) ? 1.0 : ClampCosine((H * H - d * d) / (2.0 * '
                                      'atmosphere.bottom_radius * d));\n'
                                      '    nu = ClampCosine(uvwz.x * 2.0 - 1.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuMuSNuFromScatteringTextureFragCoord(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec3 gl_frag_coord,\n'
                                      '    out float r,\n'
                                      '    out float mu,\n'
                                      '    out float mu_s,\n'
                                      '    out float nu,\n'
                                      '    out bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    const vec4 SCATTERING_TEXTURE_SIZE = vec4(\n'
                                      '        SCATTERING_TEXTURE_NU_SIZE - 1,\n'
                                      '        SCATTERING_TEXTURE_MU_S_SIZE,\n'
                                      '        SCATTERING_TEXTURE_MU_SIZE,\n'
                                      '        SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    float frag_coord_nu = floor(gl_frag_coord.x / '
                                      'float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                      '    float frag_coord_mu_s = mod(gl_frag_coord.x, float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                      '    vec4 uvwz = vec4(frag_coord_nu, frag_coord_mu_s, gl_frag_coord.y, gl_frag_coord.z) '
                                      '/ SCATTERING_TEXTURE_SIZE;\n'
                                      '    GetRMuMuSNuFromScatteringTextureUvwz(atmosphere, uvwz, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    nu = clamp(\n'
                                      '        nu,\n'
                                      '        mu * mu_s - sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)),\n'
                                      '        mu * mu_s + sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScatteringtexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in vec3 gl_frag_coord,\n'
                                      '    out vec3 rayleigh, out vec3 mie)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    float nu;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground);\n'
                                      '    ComputeSingleScattering(atmosphere, transmittance_texture,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground, rayleigh, mie);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                      '    float tex_x = floor(tex_coord_x);\n'
                                      '    float lerp = tex_coord_x - tex_x;\n'
                                      '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                      'uvwz.w);\n'
                                      '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), '
                                      'uvwz.z, uvwz.w);\n'
                                      '    return vec3(\n'
                                      '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                      'texture3D(scattering_texture, uvw1) * lerp);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    int scattering_order)\n'
                                      '{\n'
                                      '    if (scattering_order == 1)\n'
                                      '    {\n'
                                      '        vec3 rayleigh = GetScattering(\n'
                                      '            atmosphere, single_rayleigh_scattering_texture, r, mu, mu_s, nu,\n'
                                      '            ray_r_mu_intersects_ground);\n'
                                      '        vec3 mie = GetScattering(\n'
                                      '            atmosphere, single_mie_scattering_texture, r, mu, mu_s, nu,\n'
                                      '            ray_r_mu_intersects_ground);\n'
                                      '\n'
                                      '        return rayleigh * RayleighPhaseFunction(nu) + mie * '
                                      'MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '    }\n'
                                      '\n'
                                      '    return GetScattering(atmosphere, multiple_scattering_texture, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r, float mu_s);\n'
                                      '\n'
                                      'vec3 ComputeScatteringDensity(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r, float mu, float mu_s, float nu, int scattering_order)\n'
                                      '{\n'
                                      '    vec3 zenith_direction = vec3(0.0, 0.0, 1.0);\n'
                                      '    vec3 omega = vec3(sqrt(1.0 - mu * mu), 0.0, mu);\n'
                                      '    float sun_dir_x = omega.x == 0.0 ? 0.0 : (nu - mu * mu_s) / omega.x;\n'
                                      '    float sun_dir_y = sqrt(max(1.0 - sun_dir_x * sun_dir_x - mu_s * mu_s, 0.0));\n'
                                      '    vec3 omega_s = vec3(sun_dir_x, sun_dir_y, mu_s);\n'
                                      '\n'
                                      '    const int SAMPLE_COUNT = 16;\n'
                                      '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                      '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                      '    vec3 rayleigh_mie = vec3(0.0);\n'
                                      '\n'
                                      '    for (int l = 0; l < SAMPLE_COUNT; ++l)\n'
                                      '    {\n'
                                      '        float theta = (float(l) + 0.5) * dtheta;\n'
                                      '        float cos_theta = cos(theta);\n'
                                      '        float sin_theta = sin(theta);\n'
                                      '        bool ray_r_theta_intersects_ground = RayIntersectsGround(atmosphere, r, '
                                      'cos_theta);\n'
                                      '\n'
                                      '        float distance_to_ground = 0.0;\n'
                                      '        vec3 transmittance_to_ground = vec3(0.0);\n'
                                      '        vec3 ground_albedo = vec3(0.0);\n'
                                      '        if (ray_r_theta_intersects_ground)\n'
                                      '        {\n'
                                      '            distance_to_ground = DistanceToBottomAtmosphereBoundary(atmosphere, r, '
                                      'cos_theta);\n'
                                      '            transmittance_to_ground = GetTransmittance(atmosphere, '
                                      'transmittance_texture, r, cos_theta, distance_to_ground, true );\n'
                                      '            ground_albedo = atmosphere.ground_albedo;\n'
                                      '        }\n'
                                      '\n'
                                      '        for (int m = 0; m < 2 * SAMPLE_COUNT; ++m)\n'
                                      '        {\n'
                                      '            float phi = 1.5 * dphi;\n'
                                      '            vec3 omega_i = vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, '
                                      'cos_theta);\n'
                                      '            float domega_i = dtheta * dphi * sin(theta);\n'
                                      '\n'
                                      '            float nu1 = dot(omega_s, omega_i);\n'
                                      '            vec3 incident_radiance = GetScattering(atmosphere,\n'
                                      '                single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                      '                multiple_scattering_texture, r, omega_i.z, mu_s, nu1,\n'
                                      '                ray_r_theta_intersects_ground, scattering_order - 1);\n'
                                      '\n'
                                      '            vec3 ground_normal = normalize(zenith_direction * r + omega_i * '
                                      'distance_to_ground);\n'
                                      '            vec3 ground_irradiance = GetIrradiance(\n'
                                      '                atmosphere, irradiance_texture, atmosphere.bottom_radius,\n'
                                      '                dot(ground_normal, omega_s));\n'
                                      '            incident_radiance += transmittance_to_ground * ground_albedo * (1.0 / (PI)) '
                                      '* ground_irradiance;\n'
                                      '\n'
                                      '            float nu2 = dot(omega, omega_i);\n'
                                      '            float rayleigh_density = GetProfileDensity(\n'
                                      '                atmosphere.rayleigh_density, r - atmosphere.bottom_radius);\n'
                                      '            float mie_density = GetProfileDensity(\n'
                                      '                atmosphere.mie_density, r - atmosphere.bottom_radius);\n'
                                      '            rayleigh_mie += incident_radiance *\n'
                                      '                (atmosphere.rayleigh_scattering * rayleigh_density * '
                                      'RayleighPhaseFunction(nu2) +\n'
                                      '                atmosphere.mie_scattering * mie_density *\n'
                                      '                MiePhaseFunction(atmosphere.mie_phase_function_g, nu2)) * domega_i;\n'
                                      '        }\n'
                                      '    }\n'
                                      '    return rayleigh_mie;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeMultipleScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_density_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 50;\n'
                                      '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                      'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                      '    vec3 rayleigh_mie_sum = vec3(0.0);\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        float r_i = ClampRadius(atmosphere, sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * '
                                      'r));\n'
                                      '        float mu_i = ClampCosine((r * mu + d_i) / r_i);\n'
                                      '        float mu_s_i = ClampCosine((r * mu_s + d_i * nu) / r_i);\n'
                                      '        vec3 rayleigh_mie_i =\n'
                                      '            GetScattering(atmosphere, scattering_density_texture, r_i, mu_i, mu_s_i, '
                                      'nu, ray_r_mu_intersects_ground) *\n'
                                      '            GetTransmittance(atmosphere, transmittance_texture, r, mu, d_i, '
                                      'ray_r_mu_intersects_ground) * dx;\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        rayleigh_mie_sum += rayleigh_mie_i * weight_i;\n'
                                      '    }\n'
                                      '    return rayleigh_mie_sum;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeScatteringDensitytexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    const in vec3 gl_frag_coord, int scattering_order)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    float nu;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, '
                                      'nu, ray_r_mu_intersects_ground);\n'
                                      '    return ComputeScatteringDensity(atmosphere, transmittance_texture,\n'
                                      '        single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                      '        multiple_scattering_texture, irradiance_texture, r, mu, mu_s, nu,\n'
                                      '        scattering_order);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeMultipleScatteringtexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_density_texture,\n'
                                      '    const in vec3 gl_frag_coord, out float nu)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, '
                                      'nu, ray_r_mu_intersects_ground);\n'
                                      '    return ComputeMultipleScattering(atmosphere, transmittance_texture,\n'
                                      '        scattering_density_texture, r, mu, mu_s, nu,\n'
                                      '        ray_r_mu_intersects_ground);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeDirectIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    float alpha_s = atmosphere.sun_angular_radius;\n'
                                      '    float average_cosine_factor = 0.0;\n'
                                      '    if(-alpha_s <= mu_s)\n'
                                      '    {\n'
                                      '        if(mu_s <= alpha_s)\n'
                                      '        {\n'
                                      '            average_cosine_factor = (mu_s + alpha_s) * (mu_s + alpha_s) / (4.0 * '
                                      'alpha_s);\n'
                                      '        }\n'
                                      '        else\n'
                                      '        {\n'
                                      '            average_cosine_factor = mu_s;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    return atmosphere.solar_irradiance *\n'
                                      '        GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                      'mu_s) * average_cosine_factor;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeIndirectIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s,\n'
                                      '    int scattering_order)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 32;\n'
                                      '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                      '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                      '\n'
                                      '    vec3 result = vec3(0.0);\n'
                                      '    vec3 omega_s = vec3(sqrt(1.0 - mu_s * mu_s), 0.0, mu_s);\n'
                                      '    for (int j = 0; j < SAMPLE_COUNT / 2; ++j)\n'
                                      '    {\n'
                                      '        float theta = (float(j) + 0.5) * dtheta;\n'
                                      '        for (int i = 0; i < 2 * SAMPLE_COUNT; ++i)\n'
                                      '        {\n'
                                      '            float phi = (float(i) + 0.5) * dphi;\n'
                                      '            vec3 omega = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), '
                                      'cos(theta));\n'
                                      '            float domega = dtheta * dphi * sin(theta);\n'
                                      '            float nu = dot(omega, omega_s);\n'
                                      '            result += GetScattering(\n'
                                      '                atmosphere,\n'
                                      '                single_rayleigh_scattering_texture,\n'
                                      '                single_mie_scattering_texture,\n'
                                      '                multiple_scattering_texture,\n'
                                      '                r, omega.z, mu_s, nu, false, scattering_order) * omega.z * domega;\n'
                                      '        }\n'
                                      '    }\n'
                                      '  return result;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec2 GetIrradianceTextureUvFromRMuS(const in AtmosphereParameters atmosphere, float r, '
                                      'float mu_s)\n'
                                      '{\n'
                                      '    float x_r = (r - atmosphere.bottom_radius) / (atmosphere.top_radius - '
                                      'atmosphere.bottom_radius);\n'
                                      '    float x_mu_s = mu_s * 0.5 + 0.5;\n'
                                      '    return vec2(GetTextureCoordFromUnitRange(x_mu_s, IRRADIANCE_TEXTURE_WIDTH),\n'
                                      '                GetTextureCoordFromUnitRange(x_r, IRRADIANCE_TEXTURE_HEIGHT));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuSFromIrradianceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 uv, out float r, out float mu_s)\n'
                                      '{\n'
                                      '    float x_mu_s = GetUnitRangeFromTextureCoord(uv.x, IRRADIANCE_TEXTURE_WIDTH);\n'
                                      '    float x_r = GetUnitRangeFromTextureCoord(uv.y, IRRADIANCE_TEXTURE_HEIGHT);\n'
                                      '    r = atmosphere.bottom_radius + x_r * (atmosphere.top_radius - '
                                      'atmosphere.bottom_radius);\n'
                                      '    mu_s = ClampCosine(2.0 * x_mu_s - 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ComputeDirectIrradiancetexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in vec2 gl_frag_coord)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu_s;\n'
                                      '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                      'r, mu_s);\n'
                                      '    return ComputeDirectIrradiance(atmosphere, transmittance_texture, r, mu_s);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeIndirectIrradiancetexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in vec2 gl_frag_coord, int scattering_order)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu_s;\n'
                                      '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                      'r, mu_s);\n'
                                      '    return ComputeIndirectIrradiance(atmosphere, single_rayleigh_scattering_texture, '
                                      'single_mie_scattering_texture,\n'
                                      '        multiple_scattering_texture, r, mu_s, scattering_order);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    vec2 uv = GetIrradianceTextureUvFromRMuS(atmosphere, r, mu_s);\n'
                                      '    return vec3(texture2D(irradiance_texture, uv));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      'vec3 GetExtrapolatedSingleMieScattering(const in AtmosphereParameters atmosphere, const '
                                      'in vec4 scattering)\n'
                                      '{\n'
                                      '    if (scattering.r == 0.0)\n'
                                      '    {\n'
                                      '        return vec3(0.0);\n'
                                      '    }\n'
                                      '    return scattering.rgb * scattering.a / scattering.r *\n'
                                      '        (atmosphere.rayleigh_scattering.r / atmosphere.mie_scattering.r) *\n'
                                      '        (atmosphere.mie_scattering / atmosphere.rayleigh_scattering);\n'
                                      '}\n'
                                      '#endif\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetCombinedScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 single_mie_scattering)\n'
                                      '{\n'
                                      '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                      '    float tex_x = floor(tex_coord_x);\n'
                                      '    float lerp = tex_coord_x - tex_x;\n'
                                      '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                      'uvwz.w);\n'
                                      '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), '
                                      'uvwz.z, uvwz.w);\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      '    vec4 combined_scattering =\n'
                                      '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                      'texture3D(scattering_texture, uvw1) * lerp;\n'
                                      '    vec3 scattering = vec3(combined_scattering.xyz);\n'
                                      '    single_mie_scattering = GetExtrapolatedSingleMieScattering(atmosphere, '
                                      'combined_scattering);\n'
                                      '#else\n'
                                      '#endif\n'
                                      '    return scattering;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeSkyRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    vec3 camera, const in vec3 view_ray, float shadow_length,\n'
                                      '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    float r = length(camera);\n'
                                      '    float rmu = dot(camera, view_ray);\n'
                                      '    float distance_to_top_atmosphere_boundary = -rmu -\n'
                                      '        sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                      '\n'
                                      '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                      '    {\n'
                                      '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                      '        r = atmosphere.top_radius;\n'
                                      '        rmu += distance_to_top_atmosphere_boundary;\n'
                                      '    }\n'
                                      '    else if(r > atmosphere.top_radius)\n'
                                      '    {\n'
                                      '        transmittance = vec3(1.0);\n'
                                      '        return vec3(0.0);\n'
                                      '    }\n'
                                      '\n'
                                      '    float mu = rmu / r;\n'
                                      '    float mu_s = dot(camera, sun_direction) / r;\n'
                                      '    float nu = dot(view_ray, sun_direction);\n'
                                      '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                      '\n'
                                      '    transmittance = ray_r_mu_intersects_ground ?\n'
                                      '        vec3(0.0) : GetTransmittanceToTopAtmosphereBoundary(atmosphere, '
                                      'transmittance_texture, r, mu);\n'
                                      '    vec3 single_mie_scattering;\n'
                                      '    vec3 scattering;\n'
                                      '    if (shadow_length == 0.0)\n'
                                      '    {\n'
                                      '        scattering = GetCombinedScattering(\n'
                                      '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '            r, mu, mu_s, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d = shadow_length;\n'
                                      '        float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '        float mu_p = (r * mu + d) / r_p;\n'
                                      '        float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                      '\n'
                                      '        scattering = GetCombinedScattering(\n'
                                      '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '            r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                      '        vec3 shadow_transmittance =\n'
                                      '            GetTransmittance(atmosphere, transmittance_texture, r, mu, shadow_length, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '        scattering = scattering * shadow_transmittance;\n'
                                      '        single_mie_scattering = single_mie_scattering * shadow_transmittance;\n'
                                      '    }\n'
                                      '\n'
                                      '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                      '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeSkyRadianceToPoint(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    vec3 camera, const in vec3 point, float shadow_length,\n'
                                      '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    vec3 view_ray = normalize(point - camera);\n'
                                      '    float r = length(camera);\n'
                                      '    float rmu = dot(camera, view_ray);\n'
                                      '    float distance_to_top_atmosphere_boundary =\n'
                                      '        -rmu - sqrt(rmu * rmu - r * r + atmosphere.top_radius * '
                                      'atmosphere.top_radius);\n'
                                      '\n'
                                      '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                      '    {\n'
                                      '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                      '        r = atmosphere.top_radius;\n'
                                      '        rmu += distance_to_top_atmosphere_boundary;\n'
                                      '    }\n'
                                      '\n'
                                      '    float mu = rmu / r;\n'
                                      '    float mu_s = dot(camera, sun_direction) / r;\n'
                                      '    float nu = dot(view_ray, sun_direction);\n'
                                      '    float d = length(point - camera);\n'
                                      '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                      '\n'
                                      '    transmittance = GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '\n'
                                      '    vec3 single_mie_scattering;\n'
                                      '    vec3 scattering = GetCombinedScattering(\n'
                                      '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground,\n'
                                      '        single_mie_scattering);\n'
                                      '\n'
                                      '    d = max(d - shadow_length, 0.0);\n'
                                      '    float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_p = (r * mu + d) / r_p;\n'
                                      '    float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                      '\n'
                                      '    vec3 single_mie_scattering_p;\n'
                                      '    vec3 scattering_p = GetCombinedScattering(\n'
                                      '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '        r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground,\n'
                                      '        single_mie_scattering_p);\n'
                                      '\n'
                                      '    vec3 shadow_transmittance = transmittance;\n'
                                      '    if (shadow_length > 0.0)\n'
                                      '    {\n'
                                      '        shadow_transmittance = GetTransmittance(\n'
                                      '            atmosphere, transmittance_texture, r, mu, d, ray_r_mu_intersects_ground);\n'
                                      '    }\n'
                                      '    scattering = scattering - shadow_transmittance * scattering_p;\n'
                                      '    single_mie_scattering = single_mie_scattering - shadow_transmittance * '
                                      'single_mie_scattering_p;\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      '    single_mie_scattering = GetExtrapolatedSingleMieScattering(atmosphere, '
                                      'vec4(scattering, single_mie_scattering.r));\n'
                                      '#endif\n'
                                      '\n'
                                      '    single_mie_scattering = single_mie_scattering * smoothstep(0.0, float(0.01), '
                                      'mu_s);\n'
                                      '\n'
                                      '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                      '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ComputeSunAndSkyIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    const in vec3 point, const in vec3 normal, const in vec3 sun_direction,\n'
                                      '    out vec3 sky_irradiance)\n'
                                      '{\n'
                                      '    float r = length(point);\n'
                                      '    float mu_s = dot(point, sun_direction) / r;\n'
                                      '\n'
                                      '    sky_irradiance = GetIrradiance(atmosphere, irradiance_texture, r, mu_s) * (1.0 + '
                                      'dot(normal, point) / r) * 0.5;\n'
                                      '\n'
                                      '    return atmosphere.solar_irradiance *\n'
                                      '        GetTransmittanceToSun(atmosphere, transmittance_texture, r, mu_s) *\n'
                                      '        max(dot(normal, sun_direction), 0.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetSolarRadiance(const in AtmosphereParameters atmosphere)\n'
                                      '{\n'
                                      '    return atmosphere.solar_irradiance /\n'
                                      '        (PI * atmosphere.sun_angular_radius * atmosphere.sun_angular_radius) * '
                                      'SUN_RADIANCE_TO_LUMINANCE * atmosphere_exposure;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSkyRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 view_ray, float '
                                      'shadow_length,\n'
                                      '    vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    return ComputeSkyRadiance(atmosphere, transmittance_texture,\n'
                                      '        scattering_texture, single_mie_scattering_texture,\n'
                                      '        camera, view_ray, shadow_length, sun_direction, transmittance) * '
                                      'SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSkyRadianceToPoint(\n'
                                      '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 point, float '
                                      'shadow_length,\n'
                                      '    vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    return ComputeSkyRadianceToPoint(atmosphere, transmittance_texture,\n'
                                      '        scattering_texture, single_mie_scattering_texture,\n'
                                      '        camera, point, shadow_length, sun_direction, transmittance) * '
                                      'SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSunAndSkyIrradiance(\n'
                                      '   const in AtmosphereParameters atmosphere, vec3 p, vec3 normal, vec3 sun_direction,\n'
                                      '   out vec3 sky_irradiance)\n'
                                      '{\n'
                                      '    vec3 sun_irradiance = ComputeSunAndSkyIrradiance(\n'
                                      '        atmosphere, transmittance_texture, irradiance_texture, p, normal, '
                                      'sun_direction, sky_irradiance);\n'
                                      '    sky_irradiance *= SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '    return sun_irradiance * SUN_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'float GetSunVisibility(vec3 point, vec3 sun_direction)\n'
                                      '{\n'
                                      '    vec3 p = point - kSphereCenter;\n'
                                      '    float p_dot_v = dot(p, sun_direction);\n'
                                      '    float p_dot_p = dot(p, p);\n'
                                      '    float ray_sphere_center_squared_distance = p_dot_p - p_dot_v * p_dot_v;\n'
                                      '    float distance_to_intersection = -p_dot_v - sqrt(\n'
                                      '        kSphereRadius * kSphereRadius - ray_sphere_center_squared_distance);\n'
                                      '    if (distance_to_intersection > 0.0)\n'
                                      '    {\n'
                                      '        float ray_sphere_distance = kSphereRadius - '
                                      'sqrt(ray_sphere_center_squared_distance);\n'
                                      '        float ray_sphere_angular_distance = -ray_sphere_distance / p_dot_v;\n'
                                      '        return smoothstep(1.0, 0.0, ray_sphere_angular_distance / sun_size.x);\n'
                                      '    }\n'
                                      '    return 1.0;\n'
                                      '}\n'
                                      '\n'
                                      'float GetSkyVisibility(vec3 point)\n'
                                      '{\n'
                                      '  vec3 p = point - kSphereCenter;\n'
                                      '  float p_dot_p = dot(p, p);\n'
                                      '  return 1.0 + p.y / sqrt(p_dot_p) * kSphereRadius * kSphereRadius / p_dot_p;\n'
                                      '}\n'
                                      '\n'
                                      'void GetSphereShadowInOut(vec3 view_direction, vec3 sun_direction, out float d_in, out '
                                      'float d_out)\n'
                                      '{\n'
                                      '    vec3 pos = CAMERA_POSITION.xyz * atmosphere_ratio - kSphereCenter;\n'
                                      '    float pos_dot_sun = dot(pos, sun_direction);\n'
                                      '    float view_dot_sun = dot(view_direction, sun_direction);\n'
                                      '    float k = sun_size.x;\n'
                                      '    float l = 1.0 + k * k;\n'
                                      '    float a = 1.0 - l * view_dot_sun * view_dot_sun;\n'
                                      '    float b = dot(pos, view_direction) - l * pos_dot_sun * view_dot_sun - k * '
                                      'kSphereRadius * view_dot_sun;\n'
                                      '    float c = dot(pos, pos) - l * pos_dot_sun * pos_dot_sun -\n'
                                      '        2.0 * k * kSphereRadius * pos_dot_sun - kSphereRadius * kSphereRadius;\n'
                                      '    float discriminant = b * b - a * c;\n'
                                      '    if (discriminant > 0.0)\n'
                                      '    {\n'
                                      '        d_in = max(0.0, (-b - sqrt(discriminant)) / a);\n'
                                      '        d_out = (-b + sqrt(discriminant)) / a;\n'
                                      '        float d_base = -pos_dot_sun / view_dot_sun;\n'
                                      '        float d_apex = -(pos_dot_sun + kSphereRadius / k) / view_dot_sun;\n'
                                      '        if (view_dot_sun > 0.0)\n'
                                      '        {\n'
                                      '            d_in = max(d_in, d_apex);\n'
                                      '            d_out = a > 0.0 ? min(d_out, d_base) : d_base;\n'
                                      '        }\n'
                                      '        else\n'
                                      '        {\n'
                                      '            d_in = a > 0.0 ? max(d_in, d_base) : d_base;\n'
                                      '            d_out = min(d_out, d_apex);\n'
                                      '        }\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        d_in = 0.0;\n'
                                      '        d_out = 0.0;\n'
                                      '    }\n'
                                      '}\n'
                                      '\n'
                                      'float GetSceneShadowLength(float scene_dist, vec3 view_direction, sampler2D '
                                      'texture_shadow)\n'
                                      '{\n'
                                      '    const float earth_radius = abs(earth_center.y);\n'
                                      '    bool shadow_enter = false;\n'
                                      '    bool do_exit = false;\n'
                                      '    float scene_shadow_out = 0.0;\n'
                                      '    float scene_shadow_in = 0.0;\n'
                                      '    float shadow_length = 0.0;\n'
                                      '    const int LOOP = 64;\n'
                                      '    float d = min(NEAR_FAR.y * 0.01, scene_dist) / float(LOOP);\n'
                                      '    float enter_count = 0.0;\n'
                                      '\n'
                                      '    for(int i=0; i<LOOP; ++i)\n'
                                      '    {\n'
                                      '        float ray_dist = float(i) * d;\n'
                                      '        vec3 world_pos = CAMERA_POSITION.xyz + view_direction * ray_dist;\n'
                                      '        vec4 shadow_uv = SHADOW_MATRIX * vec4(world_pos, 1.0);\n'
                                      '        shadow_uv.xyz /= shadow_uv.w;\n'
                                      '        shadow_uv.xyz = shadow_uv.xyz * 0.5 + 0.5;\n'
                                      '        float shadow_depth = texture2D(texture_shadow, shadow_uv.xy, 0).x;\n'
                                      '\n'
                                      '        if(shadow_uv.x < 0.0 || 1.0 < shadow_uv.x || shadow_uv.y < 0.0 || 1.0 < '
                                      'shadow_uv.y || scene_dist <= ray_dist)\n'
                                      '        {\n'
                                      '            do_exit = true;\n'
                                      '        }\n'
                                      '        else if(length(world_pos - earth_center) < earth_radius)\n'
                                      '        {\n'
                                      '            \n'
                                      '            do_exit = true;\n'
                                      '        }\n'
                                      '        else if(false == shadow_enter && shadow_depth <= shadow_uv.z)\n'
                                      '        {\n'
                                      '            \n'
                                      '            shadow_enter = true;\n'
                                      '            scene_shadow_in = dot(view_direction, world_pos);\n'
                                      '        }\n'
                                      '        else if(shadow_enter && shadow_uv.z < shadow_depth)\n'
                                      '        {\n'
                                      '            \n'
                                      '            scene_shadow_out = dot(view_direction, world_pos);\n'
                                      '            shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                      '\n'
                                      '            \n'
                                      '            shadow_enter = false;\n'
                                      '            scene_shadow_in = 0.0;\n'
                                      '            scene_shadow_out = 0.0;\n'
                                      '            continue;\n'
                                      '        }\n'
                                      '\n'
                                      '        if(shadow_enter)\n'
                                      '        {\n'
                                      '            enter_count += 1.0;\n'
                                      '        }\n'
                                      '\n'
                                      '        if(do_exit || i == (LOOP-1))\n'
                                      '        {\n'
                                      '            if(shadow_enter)\n'
                                      '            {\n'
                                      '                \n'
                                      '                scene_shadow_out = dot(view_direction, world_pos);\n'
                                      '                shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                      '            }\n'
                                      '            else\n'
                                      '            {\n'
                                      '                \n'
                                      '                scene_shadow_in = 0.0;\n'
                                      '                scene_shadow_out = 0.0;\n'
                                      '            }\n'
                                      '            break;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    shadow_length = enter_count / float(LOOP);\n'
                                      '\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    float lightshaft_fadein_hack = smoothstep(0.02, 0.04, '
                                      'dot(normalize(relative_camera_pos - earth_center), sun_direction));\n'
                                      '\n'
                                      '    return max(0.0, shadow_length) * lightshaft_fadein_hack * 2.0;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetSceneRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float scene_linear_depth, vec3 eye_direction, vec3 normal,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    \n'
                                      '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                      '    relative_point.y = max(0.0, relative_point.y);\n'
                                      '\n'
                                      '    \n'
                                      '    float scene_shadow_length = 0.0;\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                      '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                      'transmittance);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetSceneRadianceWithShadow(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float scene_linear_depth, vec3 eye_direction, vec3 normal, sampler2D '
                                      'texture_shadow,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter, out float '
                                      'scene_shadow_length)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    \n'
                                      '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                      '    relative_point.y = max(0.0, relative_point.y);\n'
                                      '\n'
                                      '    scene_shadow_length = GetSceneShadowLength(scene_linear_depth, eye_direction, '
                                      'texture_shadow);\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                      '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                      'transmittance);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetCloudRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float dist, vec3 eye_direction, float scene_shadow_length,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 inscatter)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 point = camera_pos + eye_direction.xyz * max(NEAR_FAR.x, dist) * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '        atmosphere, point.xyz - earth_center, sun_direction, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    inscatter = GetSkyRadianceToPoint(atmosphere, camera_pos - earth_center,\n'
                                      '        point.xyz - earth_center, scene_shadow_length, sun_direction, transmittance);\n'
                                      '\n'
                                      '    sun_irradiance = max(vec3(0.0), sun_irradiance);\n'
                                      '    sky_irradiance = max(vec3(0.0), sky_irradiance);\n'
                                      '    transmittance = max(vec3(0.0), transmittance);\n'
                                      '    inscatter = max(vec3(0.0), inscatter);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '#endif /* UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d */\n'
                                      '\n'
                                      'const AtmosphereParameters ATMOSPHERE = AtmosphereParameters(\n'
                                      'vec3(1.474000, 1.850400, 1.911980),\n'
                                      '0.023375,\n'
                                      '6361.0,\n'
                                      '6420.0,\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.125000, 0.000000, '
                                      '0.000000))),\n'
                                      'vec3(0.005802, 0.013558, 0.033100),\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.833333, 0.000000, '
                                      '0.000000))),\n'
                                      'vec3(0.003996, 0.003996, 0.003996),\n'
                                      'vec3(0.004440, 0.004440, 0.004440),\n'
                                      '0.8,\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(25.000000, 0.000000, '
                                      '0.000000, 0.066667, -0.666667),DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '-0.066667, 2.666667))),\n'
                                      'vec3(0.000650, 0.001881, 0.000085),\n'
                                      'vec3(0.100000, 0.100000, 0.100000),\n'
                                      '-0.4999999690599179);\n'
                                      '#endif /* UUID_8f6331f7_2c1c_37f2_bed6_c85eab80eac2 */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "precomputed_atmosphere/precompute_vs.glsl"\n'
                                      '#ifndef UUID_2679845a_8264_3d64_b003_15038f5bacf4\n'
                                      '#define UUID_2679845a_8264_3d64_b003_15038f5bacf4\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                      '\n'
                                      '#ifdef VERTEX_SHADER\n'
                                      '#endif\n'
                                      '#endif /* UUID_2679845a_8264_3d64_b003_15038f5bacf4 */\n'
                                      '\n'
                                      '\n'
                                      '#ifdef FRAGMENT_SHADER\n'
                                      'layout(location = 0) out vec3 delta_rayleigh;\n'
                                      'layout(location = 1) out vec3 delta_mie;\n'
                                      'layout(location = 2) out vec4 scattering;\n'
                                      'layout(location = 3) out vec3 single_mie_scattering;\n'
                                      '\n'
                                      'uniform mat3 luminance_from_radiance;\n'
                                      'uniform int layer;\n'
                                      '\n'
                                      'void main()\n'
                                      '{\n'
                                      '    ComputeSingleScatteringtexture2D(\n'
                                      '        ATMOSPHERE, transmittance_texture, vec3(gl_FragCoord.xy, layer + 0.5),\n'
                                      '        delta_rayleigh, delta_mie);\n'
                                      '    scattering = vec4(luminance_from_radiance * delta_rayleigh.rgb, '
                                      '(luminance_from_radiance * delta_mie).r);\n'
                                      '    single_mie_scattering = luminance_from_radiance * delta_mie;\n'
                                      '}\n'
                                      '#endif',
                  GL_VERTEX_SHADER: '#version 430 core\n'
                                    '# extension GL_EXT_texture_array : enable\n'
                                    '#define MATERIAL_COMPONENTS 1\n'
                                    '#define VERTEX_SHADER 1\n'
                                    '#define COMBINED_SCATTERING_TEXTURES 1\n'
                                    '#if __VERSION__ >= 130\n'
                                    '#define texture2D texture\n'
                                    '#define texture2DLod textureLod\n'
                                    '#define texture2DGrad textureGrad\n'
                                    '#define texture2DArray texture\n'
                                    '#define texture2DArrayLod textureLod\n'
                                    '#define texture2DArrayGrad textureGrad\n'
                                    '#define texture3D texture\n'
                                    '#define texture3DLod textureLod\n'
                                    '#define texture3DGrad textureGrad\n'
                                    '#define textureCube texture\n'
                                    '#define textureCubeLod textureLod\n'
                                    '#define textureCubeGrad textureGrad\n'
                                    '#endif\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "precomputed_atmosphere/compute_atmosphere_predefine.glsl"\n'
                                    '#ifndef UUID_8f6331f7_2c1c_37f2_bed6_c85eab80eac2\n'
                                    '#define UUID_8f6331f7_2c1c_37f2_bed6_c85eab80eac2\n'
                                    'const int TRANSMITTANCE_TEXTURE_WIDTH = 256;\n'
                                    'const int TRANSMITTANCE_TEXTURE_HEIGHT = 64;\n'
                                    'const int SCATTERING_TEXTURE_R_SIZE = 32;\n'
                                    'const int SCATTERING_TEXTURE_MU_SIZE = 128;\n'
                                    'const int SCATTERING_TEXTURE_MU_S_SIZE = 32;\n'
                                    'const int SCATTERING_TEXTURE_NU_SIZE = 8;\n'
                                    'const int IRRADIANCE_TEXTURE_WIDTH = 64;\n'
                                    'const int IRRADIANCE_TEXTURE_HEIGHT = 16;\n'
                                    'const vec2 IRRADIANCE_TEXTURE_SIZE = vec2(64, 16);\n'
                                    '\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "precomputed_atmosphere/definitions.glsl"\n'
                                    '#ifndef UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d\n'
                                    '#define UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    'layout(std140, binding=0) uniform scene_constants\n'
                                    '{\n'
                                    '    float TIME;\n'
                                    '    float JITTER_FRAME;\n'
                                    '    bool RENDER_SSR;\n'
                                    '    bool RENDER_SSAO;\n'
                                    '    vec2 SCREEN_SIZE;\n'
                                    '    vec2 BACKBUFFER_SIZE;\n'
                                    '    vec2 MOUSE_POS;\n'
                                    '    float DELTA_TIME;\n'
                                    '    int SHADOWMAP_LOOP_COUNT;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=1) uniform view_constants\n'
                                    '{\n'
                                    '    mat4 VIEW;\n'
                                    '    mat4 INV_VIEW;\n'
                                    '    mat4 VIEW_ORIGIN;\n'
                                    '    mat4 INV_VIEW_ORIGIN;\n'
                                    '    mat4 PROJECTION;\n'
                                    '    mat4 INV_PROJECTION;\n'
                                    '    vec3 CAMERA_POSITION;\n'
                                    '    float VIEW_DUMMY_0;\n'
                                    '    vec2 NEAR_FAR;\n'
                                    '    vec2 JITTER_DELTA;\n'
                                    '    vec2 JITTER_OFFSET;\n'
                                    '    vec2 VIEWCONSTANTS_DUMMY0;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=2) uniform view_projection\n'
                                    '{\n'
                                    '    mat4 VIEW_PROJECTION;\n'
                                    '    mat4 PREV_VIEW_PROJECTION;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=3) uniform light_constants\n'
                                    '{\n'
                                    '    vec3 LIGHT_POSITION;\n'
                                    '    float LIGHT_DUMMY_0;\n'
                                    '    vec3 LIGHT_DIRECTION;\n'
                                    '    float LIGHT_DUMMY_1;\n'
                                    '    vec4 LIGHT_COLOR;\n'
                                    '    mat4 SHADOW_MATRIX;\n'
                                    '};\n'
                                    '\n'
                                    'const int MAX_POINT_LIGHTS = 10;\n'
                                    '\n'
                                    'struct POINT_LIGHT\n'
                                    '{\n'
                                    '    vec3 color;\n'
                                    '    float radius;\n'
                                    '    vec3 pos;\n'
                                    '    float render;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=4) uniform point_light_constants\n'
                                    '{\n'
                                    '    POINT_LIGHT POINT_LIGHTS[MAX_POINT_LIGHTS];\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    'layout(std140, binding=5) uniform particle_common\n'
                                    '{\n'
                                    '    vec3 PARTICLE_COLOR;\n'
                                    '    int PARTICLE_ALIGN_MODE;\n'
                                    '    ivec2 PARTICLE_CELL_COUNT;\n'
                                    '    int PARTICLE_BLEND_MODE;\n'
                                    '    int PARTICLE_COMMON_DUMMY_0;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=6) uniform particle_infos\n'
                                    '{\n'
                                    '    mat4 PARTICLE_PARENT_MATRIX;\n'
                                    '    vec2 PARTICLE_DELAY;\n'
                                    '    vec2 PARTICLE_LIFE_TIME;\n'
                                    '    vec3 PARTICLE_TRANSFORM_ROTATION_MIN;\n'
                                    '    float PARTICLE_FADE_IN;\n'
                                    '    vec3 PARTICLE_TRANSFORM_ROTATION_MAX;\n'
                                    '    float PARTICLE_FADE_OUT;\n'
                                    '    vec3 PARTICLE_TRANSFORM_SCALE_MIN;\n'
                                    '    float PARTICLE_OPACITY;\n'
                                    '    vec3 PARTICLE_TRANSFORM_SCALE_MAX;\n'
                                    '    bool PARTICLE_ENABLE_VECTOR_FIELD;\n'
                                    '    vec3 PARTICLE_VELOCITY_POSITION_MIN;\n'
                                    '    float PARTICLE_VECTOR_FIELD_STRENGTH;\n'
                                    '    vec3 PARTICLE_VELOCITY_POSITION_MAX;\n'
                                    '    float PARTICLE_VECTOR_FIELD_TIGHTNESS;\n'
                                    '    vec3 PARTICLE_VELOCITY_ROTATION_MIN;\n'
                                    '    uint PARTICLE_MAX_COUNT;\n'
                                    '    vec3 PARTICLE_VELOCITY_ROTATION_MAX;\n'
                                    '    uint PARTICLE_SPAWN_COUNT;\n'
                                    '    vec3 PARTICLE_VELOCITY_SCALE_MIN;\n'
                                    '    float PARTICLE_VELOCITY_STRETCH;\n'
                                    '    vec3 PARTICLE_VELOCITY_SCALE_MAX;\n'
                                    '    float PARTICLE_VELOCITY_ACCELERATION;\n'
                                    '    mat4 PARTICLE_VECTOR_FIELD_MATRIX;\n'
                                    '    mat4 PARTICLE_VECTOR_FIELD_INV_MATRIX;\n'
                                    '    vec3 PARTICLE_SPAWN_VOLUME_INFO;\n'
                                    '    uint PARTICLE_SPAWN_VOLUME_TYPE;\n'
                                    '    mat4 PARTICLE_SPAWN_VOLUME_MATRIX;\n'
                                    '    vec2 PARTICLE_VELOCITY_LIMIT;\n'
                                    '    float PARTICLE_FORCE_GRAVITY;\n'
                                    '    float PARTICLE_PLAY_SPEED;\n'
                                    '    uint PARTICLE_VELOCITY_TYPE;\n'
                                    '    float PARTICLE_FORCE_ELASTICITY;\n'
                                    '    float PARTICLE_FORCE_FRICTION;\n'
                                    '    uint PARTICLE_DUMMY_0;\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'const int BLEND = 0;\n'
                                    'const int ADDITIVE = 1;\n'
                                    'const int MULTIPLY = 2;\n'
                                    'const int SUBTRACT = 3;\n'
                                    '\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '\n'
                                    'const int MAX_BONES_PER_VERTEX = 4;\n'
                                    'const int MAX_BONES = 100;\n'
                                    'const float SHADOW_BIAS = -0.0001;\n'
                                    '\n'
                                    'const float PI = 3.14159265358979323846;\n'
                                    'const float HALF_PI = PI * 0.5;\n'
                                    'const float TWO_PI = PI * 2.0;\n'
                                    'const float deg = PI / 180.0;\n'
                                    '\n'
                                    'const vec3 kSphereCenter = vec3(1.0, 1.0, -2.0);\n'
                                    'const float kSphereRadius = 1.0;\n'
                                    'const vec3 kSphereAlbedo = vec3(0.8);\n'
                                    'const vec3 kGroundAlbedo = vec3(0.0, 0.0, 0.04);\n'
                                    '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                    '\n'
                                    '\n'
                                    'uniform vec3 earth_center;\n'
                                    'uniform vec2 sun_size;\n'
                                    'uniform float atmosphere_exposure;\n'
                                    'uniform bool render_light_probe_mode;\n'
                                    '\n'
                                    'uniform sampler2D transmittance_texture;\n'
                                    'uniform sampler2D irradiance_texture;\n'
                                    'uniform sampler3D scattering_texture;\n'
                                    'uniform sampler3D single_mie_scattering_texture;\n'
                                    'uniform sampler3D single_rayleigh_scattering_texture;\n'
                                    'uniform sampler3D scattering_density_texture;\n'
                                    'uniform sampler3D multiple_scattering_texture;\n'
                                    '\n'
                                    '\n'
                                    'uniform vec3 SKY_RADIANCE_TO_LUMINANCE;\n'
                                    'uniform vec3 SUN_RADIANCE_TO_LUMINANCE;\n'
                                    '\n'
                                    'const float atmosphere_ratio = 0.1;\n'
                                    '\n'
                                    'struct DensityProfileLayer\n'
                                    '{\n'
                                    '    float width;\n'
                                    '    float exp_term;\n'
                                    '    float exp_scale;\n'
                                    '    float linear_term;\n'
                                    '    float constant_term;\n'
                                    '};\n'
                                    '\n'
                                    'struct DensityProfile\n'
                                    '{\n'
                                    '    DensityProfileLayer layers[2];\n'
                                    '};\n'
                                    '\n'
                                    'struct AtmosphereParameters\n'
                                    '{\n'
                                    '    vec3 solar_irradiance;\n'
                                    '    float sun_angular_radius;\n'
                                    '    float bottom_radius;\n'
                                    '    float top_radius;\n'
                                    '    DensityProfile rayleigh_density;\n'
                                    '    vec3 rayleigh_scattering;\n'
                                    '    DensityProfile mie_density;\n'
                                    '    vec3 mie_scattering;\n'
                                    '    vec3 mie_extinction;\n'
                                    '    float mie_phase_function_g;\n'
                                    '    DensityProfile absorption_density;\n'
                                    '    vec3 absorption_extinction;\n'
                                    '    vec3 ground_albedo;\n'
                                    '    float mu_s_min;\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    'float ClampCosine(float mu)\n'
                                    '{\n'
                                    '    return clamp(mu, -1.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float ClampDistance(float d)\n'
                                    '{\n'
                                    '    return max(d, 0.0);\n'
                                    '}\n'
                                    '\n'
                                    'float ClampRadius(const in AtmosphereParameters atmosphere, float r)\n'
                                    '{\n'
                                    '    return clamp(r, atmosphere.bottom_radius, atmosphere.top_radius);\n'
                                    '}\n'
                                    '\n'
                                    'float SafeSqrt(float a)\n'
                                    '{\n'
                                    '    return sqrt(max(a, 0.0));\n'
                                    '}\n'
                                    '\n'
                                    'float DistanceToTopAtmosphereBoundary(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu)\n'
                                    '{\n'
                                    '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.top_radius * '
                                    'atmosphere.top_radius;\n'
                                    '    return ClampDistance(-r * mu + SafeSqrt(discriminant));\n'
                                    '}\n'
                                    '\n'
                                    'float DistanceToBottomAtmosphereBoundary(const in AtmosphereParameters atmosphere, float '
                                    'r, float mu)\n'
                                    '{\n'
                                    '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '    return ClampDistance(-r * mu - SafeSqrt(discriminant));\n'
                                    '}\n'
                                    '\n'
                                    'bool RayIntersectsGround(const in AtmosphereParameters atmosphere, float r, float mu)\n'
                                    '{\n'
                                    '    if(mu < 0.0)\n'
                                    '    {\n'
                                    '        float result = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '        if(0.0 <= result)\n'
                                    '        {\n'
                                    '            return true;\n'
                                    '        }\n'
                                    '    }\n'
                                    '    return false;\n'
                                    '}\n'
                                    '\n'
                                    'float GetLayerDensity(const in DensityProfileLayer layer, float altitude)\n'
                                    '{\n'
                                    '    float density =\n'
                                    '        layer.exp_term * exp(layer.exp_scale * altitude) + layer.linear_term * altitude + '
                                    'layer.constant_term;\n'
                                    '    return clamp(density, 0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float GetProfileDensity(const in DensityProfile profile, float altitude)\n'
                                    '{\n'
                                    '    return altitude < profile.layers[0].width ?\n'
                                    '        GetLayerDensity(profile.layers[0], altitude) : GetLayerDensity(profile.layers[1], '
                                    'altitude);\n'
                                    '}\n'
                                    '\n'
                                    'float ComputeOpticalLengthToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in DensityProfile profile,\n'
                                    '    float r,\n'
                                    '    float mu)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 500;\n'
                                    '    float dx = DistanceToTopAtmosphereBoundary(atmosphere, r, mu) / float(SAMPLE_COUNT);\n'
                                    '    float result = 0.0;\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);\n'
                                    '        float y_i = GetProfileDensity(profile, r_i - atmosphere.bottom_radius);\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        result += y_i * weight_i * dx;\n'
                                    '    }\n'
                                    '    return result;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeTransmittanceToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu)\n'
                                    '{\n'
                                    '    return exp(-(\n'
                                    '        atmosphere.rayleigh_scattering *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.rayleigh_density, r, mu) +\n'
                                    '        atmosphere.mie_extinction *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.mie_density, r, mu) +\n'
                                    '        atmosphere.absorption_extinction *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.absorption_density, r, mu)));\n'
                                    '}\n'
                                    '\n'
                                    'float GetTextureCoordFromUnitRange(float x, int texture_size)\n'
                                    '{\n'
                                    '    return 0.5 / float(texture_size) + x * (1.0 - 1.0 / float(texture_size));\n'
                                    '}\n'
                                    '\n'
                                    'float GetUnitRangeFromTextureCoord(float u, int texture_size)\n'
                                    '{\n'
                                    '    return (u - 0.5 / float(texture_size)) / (1.0 - 1.0 / float(texture_size));\n'
                                    '}\n'
                                    '\n'
                                    'vec2 GetTransmittanceTextureUvFromRMu(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                    '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float d = DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '    float d_min = atmosphere.top_radius - r;\n'
                                    '    float d_max = rho + H;\n'
                                    '    float x_mu = (d - d_min) / (d_max - d_min);\n'
                                    '    float x_r = rho / H;\n'
                                    '    return vec2(GetTextureCoordFromUnitRange(x_mu, TRANSMITTANCE_TEXTURE_WIDTH),\n'
                                    '              GetTextureCoordFromUnitRange(x_r, TRANSMITTANCE_TEXTURE_HEIGHT));\n'
                                    '}\n'
                                    '\n'
                                    'void GetRMuFromTransmittanceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 uv, out float r, out float mu)\n'
                                    '{\n'
                                    '    float x_mu = GetUnitRangeFromTextureCoord(uv.x, TRANSMITTANCE_TEXTURE_WIDTH);\n'
                                    '    float x_r = GetUnitRangeFromTextureCoord(uv.y, TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                    '\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                    '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '\n'
                                    '    float rho = H * x_r;\n'
                                    '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float d_min = atmosphere.top_radius - r;\n'
                                    '    float d_max = rho + H;\n'
                                    '    float d = d_min + x_mu * (d_max - d_min);\n'
                                    '    mu = (d == 0.0) ? 1.0 : (H * H - rho * rho - d * d) / (2.0 * r * d);\n'
                                    '    mu = ClampCosine(mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeTransmittanceToTopAtmosphereBoundarytexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 gl_frag_coord)\n'
                                    '{\n'
                                    '    const vec2 TRANSMITTANCE_TEXTURE_SIZE = vec2(TRANSMITTANCE_TEXTURE_WIDTH, '
                                    'TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    GetRMuFromTransmittanceTextureUv(atmosphere, gl_frag_coord / '
                                    'TRANSMITTANCE_TEXTURE_SIZE, r, mu);\n'
                                    '    return ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittanceToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r, float mu)\n'
                                    '{\n'
                                    '    vec2 uv = GetTransmittanceTextureUvFromRMu(atmosphere, r, mu);\n'
                                    '    return vec3(texture2D(transmittance_texture, uv));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float d,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_d = ClampCosine((r * mu + d) / r_d);\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        return min(\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                    'r_d, -mu_d) /\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    '-mu),\n'
                                    '            vec3(1.0));\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        return min(\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu) /\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                    'r_d, mu_d),\n'
                                    '            vec3(1.0));\n'
                                    '    }\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittanceToSun(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    float sin_theta_h = atmosphere.bottom_radius / r;\n'
                                    '    float cos_theta_h = -sqrt(max(1.0 - sin_theta_h * sin_theta_h, 0.0));\n'
                                    '    return GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu_s) *\n'
                                    '      smoothstep(-sin_theta_h * atmosphere.sun_angular_radius,\n'
                                    '                 sin_theta_h * atmosphere.sun_angular_radius,\n'
                                    '                 mu_s - cos_theta_h);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScatteringIntegrand(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    float d,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 rayleigh,\n'
                                    '    out vec3 mie)\n'
                                    '{\n'
                                    '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_s_d = ClampCosine((r * mu_s + d * nu) / r_d);\n'
                                    '    vec3 transmittance =\n'
                                    '        GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                    'ray_r_mu_intersects_ground) *\n'
                                    '        GetTransmittanceToSun(atmosphere, transmittance_texture, r_d, mu_s_d);\n'
                                    '    rayleigh = transmittance * GetProfileDensity(atmosphere.rayleigh_density, r_d - '
                                    'atmosphere.bottom_radius);\n'
                                    '    mie = transmittance * GetProfileDensity(atmosphere.mie_density, r_d - '
                                    'atmosphere.bottom_radius);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float DistanceToNearestAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        return DistanceToBottomAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '    }\n'
                                    '    return DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 rayleigh,\n'
                                    '    out vec3 mie)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 50;\n'
                                    '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                    'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                    '\n'
                                    '    vec3 rayleigh_sum = vec3(0.0);\n'
                                    '    vec3 mie_sum = vec3(0.0);\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        vec3 rayleigh_i;\n'
                                    '        vec3 mie_i;\n'
                                    '        ComputeSingleScatteringIntegrand(\n'
                                    '            atmosphere, transmittance_texture, r, mu, mu_s, nu, d_i, '
                                    'ray_r_mu_intersects_ground, rayleigh_i, mie_i);\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        rayleigh_sum += rayleigh_i * weight_i;\n'
                                    '        mie_sum += mie_i * weight_i;\n'
                                    '    }\n'
                                    '    rayleigh = rayleigh_sum * dx * atmosphere.solar_irradiance * '
                                    'atmosphere.rayleigh_scattering;\n'
                                    '    mie = mie_sum * dx * atmosphere.solar_irradiance * atmosphere.mie_scattering;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float RayleighPhaseFunction(float nu)\n'
                                    '{\n'
                                    '    float k = 3.0 / (16.0 * PI);\n'
                                    '    return k * (1.0 + nu * nu);\n'
                                    '}\n'
                                    '\n'
                                    'float MiePhaseFunction(float g, float nu)\n'
                                    '{\n'
                                    '    float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);\n'
                                    '    return k * (1.0 + nu * nu) / pow(1.0 + g * g - 2.0 * g * nu, 1.5);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec4 GetScatteringTextureUvwzFromRMuMuSNu(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                    'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float u_r = GetTextureCoordFromUnitRange(rho / H, SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    float r_mu = r * mu;\n'
                                    '    float discriminant = r_mu * r_mu - r * r + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '    float u_mu;\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        float d = -r_mu - SafeSqrt(discriminant);\n'
                                    '        float d_min = r - atmosphere.bottom_radius;\n'
                                    '        float d_max = rho;\n'
                                    '        u_mu = 0.5 - 0.5 * GetTextureCoordFromUnitRange(\n'
                                    '            d_max == d_min ? 0.0 : (d - d_min) / (d_max - d_min), '
                                    'SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d = -r_mu + SafeSqrt(discriminant + H * H);\n'
                                    '        float d_min = atmosphere.top_radius - r;\n'
                                    '        float d_max = rho + H;\n'
                                    '        u_mu = 0.5 + 0.5 * GetTextureCoordFromUnitRange(\n'
                                    '            (d - d_min) / (d_max - d_min), SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                    '    }\n'
                                    '\n'
                                    '    float d = DistanceToTopAtmosphereBoundary(atmosphere, atmosphere.bottom_radius, '
                                    'mu_s);\n'
                                    '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                    '    float d_max = H;\n'
                                    '    float a = (d - d_min) / (d_max - d_min);\n'
                                    '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                    '    float u_mu_s = GetTextureCoordFromUnitRange(max(1.0 - a / A, 0.0) / (1.0 + a), '
                                    'SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                    '    float u_nu = (nu + 1.0) / 2.0;\n'
                                    '    return vec4(u_nu, u_mu_s, u_mu, u_r);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuMuSNuFromScatteringTextureUvwz(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec4 uvwz,\n'
                                    '    out float r,\n'
                                    '    out float mu,\n'
                                    '    out float mu_s,\n'
                                    '    out float nu,\n'
                                    '    out bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                    'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = H * GetUnitRangeFromTextureCoord(uvwz.w, SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    if (uvwz.z < 0.5)\n'
                                    '    {\n'
                                    '        float d_min = r - atmosphere.bottom_radius;\n'
                                    '        float d_max = rho;\n'
                                    '        float d = d_min + (d_max - d_min) *\n'
                                    '            GetUnitRangeFromTextureCoord(1.0 - 2.0 * uvwz.z, SCATTERING_TEXTURE_MU_SIZE / '
                                    '2);\n'
                                    '        mu = (d == 0.0) ? -1.0 : ClampCosine(-(rho * rho + d * d) / (2.0 * r * d));\n'
                                    '        ray_r_mu_intersects_ground = true;\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d_min = atmosphere.top_radius - r;\n'
                                    '        float d_max = rho + H;\n'
                                    '        float d = d_min + (d_max - d_min) *\n'
                                    '            GetUnitRangeFromTextureCoord(2.0 * uvwz.z - 1.0, SCATTERING_TEXTURE_MU_SIZE / '
                                    '2);\n'
                                    '        mu = (d == 0.0) ? 1.0 : ClampCosine((H * H - rho * rho - d * d) / (2.0 * r * '
                                    'd));\n'
                                    '        ray_r_mu_intersects_ground = false;\n'
                                    '    }\n'
                                    '\n'
                                    '    float x_mu_s = GetUnitRangeFromTextureCoord(uvwz.y, SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                    '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                    '    float d_max = H;\n'
                                    '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                    '    float a = (A - x_mu_s * A) / (1.0 + x_mu_s * A);\n'
                                    '    float d = d_min + min(a, A) * (d_max - d_min);\n'
                                    '    mu_s = (d == 0.0) ? 1.0 : ClampCosine((H * H - d * d) / (2.0 * '
                                    'atmosphere.bottom_radius * d));\n'
                                    '    nu = ClampCosine(uvwz.x * 2.0 - 1.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuMuSNuFromScatteringTextureFragCoord(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec3 gl_frag_coord,\n'
                                    '    out float r,\n'
                                    '    out float mu,\n'
                                    '    out float mu_s,\n'
                                    '    out float nu,\n'
                                    '    out bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    const vec4 SCATTERING_TEXTURE_SIZE = vec4(\n'
                                    '        SCATTERING_TEXTURE_NU_SIZE - 1,\n'
                                    '        SCATTERING_TEXTURE_MU_S_SIZE,\n'
                                    '        SCATTERING_TEXTURE_MU_SIZE,\n'
                                    '        SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    float frag_coord_nu = floor(gl_frag_coord.x / float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                    '    float frag_coord_mu_s = mod(gl_frag_coord.x, float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                    '    vec4 uvwz = vec4(frag_coord_nu, frag_coord_mu_s, gl_frag_coord.y, gl_frag_coord.z) / '
                                    'SCATTERING_TEXTURE_SIZE;\n'
                                    '    GetRMuMuSNuFromScatteringTextureUvwz(atmosphere, uvwz, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    nu = clamp(\n'
                                    '        nu,\n'
                                    '        mu * mu_s - sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)),\n'
                                    '        mu * mu_s + sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScatteringtexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in vec3 gl_frag_coord,\n'
                                    '    out vec3 rayleigh, out vec3 mie)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    float nu;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground);\n'
                                    '    ComputeSingleScattering(atmosphere, transmittance_texture,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground, rayleigh, mie);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                    '    float tex_x = floor(tex_coord_x);\n'
                                    '    float lerp = tex_coord_x - tex_x;\n'
                                    '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    return vec3(\n'
                                    '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                    'texture3D(scattering_texture, uvw1) * lerp);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    int scattering_order)\n'
                                    '{\n'
                                    '    if (scattering_order == 1)\n'
                                    '    {\n'
                                    '        vec3 rayleigh = GetScattering(\n'
                                    '            atmosphere, single_rayleigh_scattering_texture, r, mu, mu_s, nu,\n'
                                    '            ray_r_mu_intersects_ground);\n'
                                    '        vec3 mie = GetScattering(\n'
                                    '            atmosphere, single_mie_scattering_texture, r, mu, mu_s, nu,\n'
                                    '            ray_r_mu_intersects_ground);\n'
                                    '\n'
                                    '        return rayleigh * RayleighPhaseFunction(nu) + mie * '
                                    'MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '    }\n'
                                    '\n'
                                    '    return GetScattering(atmosphere, multiple_scattering_texture, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r, float mu_s);\n'
                                    '\n'
                                    'vec3 ComputeScatteringDensity(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r, float mu, float mu_s, float nu, int scattering_order)\n'
                                    '{\n'
                                    '    vec3 zenith_direction = vec3(0.0, 0.0, 1.0);\n'
                                    '    vec3 omega = vec3(sqrt(1.0 - mu * mu), 0.0, mu);\n'
                                    '    float sun_dir_x = omega.x == 0.0 ? 0.0 : (nu - mu * mu_s) / omega.x;\n'
                                    '    float sun_dir_y = sqrt(max(1.0 - sun_dir_x * sun_dir_x - mu_s * mu_s, 0.0));\n'
                                    '    vec3 omega_s = vec3(sun_dir_x, sun_dir_y, mu_s);\n'
                                    '\n'
                                    '    const int SAMPLE_COUNT = 16;\n'
                                    '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                    '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                    '    vec3 rayleigh_mie = vec3(0.0);\n'
                                    '\n'
                                    '    for (int l = 0; l < SAMPLE_COUNT; ++l)\n'
                                    '    {\n'
                                    '        float theta = (float(l) + 0.5) * dtheta;\n'
                                    '        float cos_theta = cos(theta);\n'
                                    '        float sin_theta = sin(theta);\n'
                                    '        bool ray_r_theta_intersects_ground = RayIntersectsGround(atmosphere, r, '
                                    'cos_theta);\n'
                                    '\n'
                                    '        float distance_to_ground = 0.0;\n'
                                    '        vec3 transmittance_to_ground = vec3(0.0);\n'
                                    '        vec3 ground_albedo = vec3(0.0);\n'
                                    '        if (ray_r_theta_intersects_ground)\n'
                                    '        {\n'
                                    '            distance_to_ground = DistanceToBottomAtmosphereBoundary(atmosphere, r, '
                                    'cos_theta);\n'
                                    '            transmittance_to_ground = GetTransmittance(atmosphere, transmittance_texture, '
                                    'r, cos_theta, distance_to_ground, true );\n'
                                    '            ground_albedo = atmosphere.ground_albedo;\n'
                                    '        }\n'
                                    '\n'
                                    '        for (int m = 0; m < 2 * SAMPLE_COUNT; ++m)\n'
                                    '        {\n'
                                    '            float phi = 1.5 * dphi;\n'
                                    '            vec3 omega_i = vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);\n'
                                    '            float domega_i = dtheta * dphi * sin(theta);\n'
                                    '\n'
                                    '            float nu1 = dot(omega_s, omega_i);\n'
                                    '            vec3 incident_radiance = GetScattering(atmosphere,\n'
                                    '                single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                    '                multiple_scattering_texture, r, omega_i.z, mu_s, nu1,\n'
                                    '                ray_r_theta_intersects_ground, scattering_order - 1);\n'
                                    '\n'
                                    '            vec3 ground_normal = normalize(zenith_direction * r + omega_i * '
                                    'distance_to_ground);\n'
                                    '            vec3 ground_irradiance = GetIrradiance(\n'
                                    '                atmosphere, irradiance_texture, atmosphere.bottom_radius,\n'
                                    '                dot(ground_normal, omega_s));\n'
                                    '            incident_radiance += transmittance_to_ground * ground_albedo * (1.0 / (PI)) * '
                                    'ground_irradiance;\n'
                                    '\n'
                                    '            float nu2 = dot(omega, omega_i);\n'
                                    '            float rayleigh_density = GetProfileDensity(\n'
                                    '                atmosphere.rayleigh_density, r - atmosphere.bottom_radius);\n'
                                    '            float mie_density = GetProfileDensity(\n'
                                    '                atmosphere.mie_density, r - atmosphere.bottom_radius);\n'
                                    '            rayleigh_mie += incident_radiance *\n'
                                    '                (atmosphere.rayleigh_scattering * rayleigh_density * '
                                    'RayleighPhaseFunction(nu2) +\n'
                                    '                atmosphere.mie_scattering * mie_density *\n'
                                    '                MiePhaseFunction(atmosphere.mie_phase_function_g, nu2)) * domega_i;\n'
                                    '        }\n'
                                    '    }\n'
                                    '    return rayleigh_mie;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeMultipleScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_density_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 50;\n'
                                    '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                    'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                    '    vec3 rayleigh_mie_sum = vec3(0.0);\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        float r_i = ClampRadius(atmosphere, sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * '
                                    'r));\n'
                                    '        float mu_i = ClampCosine((r * mu + d_i) / r_i);\n'
                                    '        float mu_s_i = ClampCosine((r * mu_s + d_i * nu) / r_i);\n'
                                    '        vec3 rayleigh_mie_i =\n'
                                    '            GetScattering(atmosphere, scattering_density_texture, r_i, mu_i, mu_s_i, nu, '
                                    'ray_r_mu_intersects_ground) *\n'
                                    '            GetTransmittance(atmosphere, transmittance_texture, r, mu, d_i, '
                                    'ray_r_mu_intersects_ground) * dx;\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        rayleigh_mie_sum += rayleigh_mie_i * weight_i;\n'
                                    '    }\n'
                                    '    return rayleigh_mie_sum;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeScatteringDensitytexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    const in vec3 gl_frag_coord, int scattering_order)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    float nu;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    return ComputeScatteringDensity(atmosphere, transmittance_texture,\n'
                                    '        single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                    '        multiple_scattering_texture, irradiance_texture, r, mu, mu_s, nu,\n'
                                    '        scattering_order);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeMultipleScatteringtexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_density_texture,\n'
                                    '    const in vec3 gl_frag_coord, out float nu)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    return ComputeMultipleScattering(atmosphere, transmittance_texture,\n'
                                    '        scattering_density_texture, r, mu, mu_s, nu,\n'
                                    '        ray_r_mu_intersects_ground);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeDirectIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    float alpha_s = atmosphere.sun_angular_radius;\n'
                                    '    float average_cosine_factor = 0.0;\n'
                                    '    if(-alpha_s <= mu_s)\n'
                                    '    {\n'
                                    '        if(mu_s <= alpha_s)\n'
                                    '        {\n'
                                    '            average_cosine_factor = (mu_s + alpha_s) * (mu_s + alpha_s) / (4.0 * '
                                    'alpha_s);\n'
                                    '        }\n'
                                    '        else\n'
                                    '        {\n'
                                    '            average_cosine_factor = mu_s;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '    return atmosphere.solar_irradiance *\n'
                                    '        GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu_s) * average_cosine_factor;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeIndirectIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s,\n'
                                    '    int scattering_order)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 32;\n'
                                    '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                    '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                    '\n'
                                    '    vec3 result = vec3(0.0);\n'
                                    '    vec3 omega_s = vec3(sqrt(1.0 - mu_s * mu_s), 0.0, mu_s);\n'
                                    '    for (int j = 0; j < SAMPLE_COUNT / 2; ++j)\n'
                                    '    {\n'
                                    '        float theta = (float(j) + 0.5) * dtheta;\n'
                                    '        for (int i = 0; i < 2 * SAMPLE_COUNT; ++i)\n'
                                    '        {\n'
                                    '            float phi = (float(i) + 0.5) * dphi;\n'
                                    '            vec3 omega = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));\n'
                                    '            float domega = dtheta * dphi * sin(theta);\n'
                                    '            float nu = dot(omega, omega_s);\n'
                                    '            result += GetScattering(\n'
                                    '                atmosphere,\n'
                                    '                single_rayleigh_scattering_texture,\n'
                                    '                single_mie_scattering_texture,\n'
                                    '                multiple_scattering_texture,\n'
                                    '                r, omega.z, mu_s, nu, false, scattering_order) * omega.z * domega;\n'
                                    '        }\n'
                                    '    }\n'
                                    '  return result;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec2 GetIrradianceTextureUvFromRMuS(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu_s)\n'
                                    '{\n'
                                    '    float x_r = (r - atmosphere.bottom_radius) / (atmosphere.top_radius - '
                                    'atmosphere.bottom_radius);\n'
                                    '    float x_mu_s = mu_s * 0.5 + 0.5;\n'
                                    '    return vec2(GetTextureCoordFromUnitRange(x_mu_s, IRRADIANCE_TEXTURE_WIDTH),\n'
                                    '                GetTextureCoordFromUnitRange(x_r, IRRADIANCE_TEXTURE_HEIGHT));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuSFromIrradianceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 uv, out float r, out float mu_s)\n'
                                    '{\n'
                                    '    float x_mu_s = GetUnitRangeFromTextureCoord(uv.x, IRRADIANCE_TEXTURE_WIDTH);\n'
                                    '    float x_r = GetUnitRangeFromTextureCoord(uv.y, IRRADIANCE_TEXTURE_HEIGHT);\n'
                                    '    r = atmosphere.bottom_radius + x_r * (atmosphere.top_radius - '
                                    'atmosphere.bottom_radius);\n'
                                    '    mu_s = ClampCosine(2.0 * x_mu_s - 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ComputeDirectIrradiancetexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in vec2 gl_frag_coord)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu_s;\n'
                                    '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                    'r, mu_s);\n'
                                    '    return ComputeDirectIrradiance(atmosphere, transmittance_texture, r, mu_s);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeIndirectIrradiancetexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in vec2 gl_frag_coord, int scattering_order)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu_s;\n'
                                    '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                    'r, mu_s);\n'
                                    '    return ComputeIndirectIrradiance(atmosphere, single_rayleigh_scattering_texture, '
                                    'single_mie_scattering_texture,\n'
                                    '        multiple_scattering_texture, r, mu_s, scattering_order);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    vec2 uv = GetIrradianceTextureUvFromRMuS(atmosphere, r, mu_s);\n'
                                    '    return vec3(texture2D(irradiance_texture, uv));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    'vec3 GetExtrapolatedSingleMieScattering(const in AtmosphereParameters atmosphere, const '
                                    'in vec4 scattering)\n'
                                    '{\n'
                                    '    if (scattering.r == 0.0)\n'
                                    '    {\n'
                                    '        return vec3(0.0);\n'
                                    '    }\n'
                                    '    return scattering.rgb * scattering.a / scattering.r *\n'
                                    '        (atmosphere.rayleigh_scattering.r / atmosphere.mie_scattering.r) *\n'
                                    '        (atmosphere.mie_scattering / atmosphere.rayleigh_scattering);\n'
                                    '}\n'
                                    '#endif\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetCombinedScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 single_mie_scattering)\n'
                                    '{\n'
                                    '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                    '    float tex_x = floor(tex_coord_x);\n'
                                    '    float lerp = tex_coord_x - tex_x;\n'
                                    '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    '    vec4 combined_scattering =\n'
                                    '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                    'texture3D(scattering_texture, uvw1) * lerp;\n'
                                    '    vec3 scattering = vec3(combined_scattering.xyz);\n'
                                    '    single_mie_scattering = GetExtrapolatedSingleMieScattering(atmosphere, '
                                    'combined_scattering);\n'
                                    '#else\n'
                                    '#endif\n'
                                    '    return scattering;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeSkyRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    vec3 camera, const in vec3 view_ray, float shadow_length,\n'
                                    '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    float r = length(camera);\n'
                                    '    float rmu = dot(camera, view_ray);\n'
                                    '    float distance_to_top_atmosphere_boundary = -rmu -\n'
                                    '        sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                    '\n'
                                    '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                    '    {\n'
                                    '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                    '        r = atmosphere.top_radius;\n'
                                    '        rmu += distance_to_top_atmosphere_boundary;\n'
                                    '    }\n'
                                    '    else if(r > atmosphere.top_radius)\n'
                                    '    {\n'
                                    '        transmittance = vec3(1.0);\n'
                                    '        return vec3(0.0);\n'
                                    '    }\n'
                                    '\n'
                                    '    float mu = rmu / r;\n'
                                    '    float mu_s = dot(camera, sun_direction) / r;\n'
                                    '    float nu = dot(view_ray, sun_direction);\n'
                                    '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                    '\n'
                                    '    transmittance = ray_r_mu_intersects_ground ?\n'
                                    '        vec3(0.0) : GetTransmittanceToTopAtmosphereBoundary(atmosphere, '
                                    'transmittance_texture, r, mu);\n'
                                    '    vec3 single_mie_scattering;\n'
                                    '    vec3 scattering;\n'
                                    '    if (shadow_length == 0.0)\n'
                                    '    {\n'
                                    '        scattering = GetCombinedScattering(\n'
                                    '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '            r, mu, mu_s, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d = shadow_length;\n'
                                    '        float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '        float mu_p = (r * mu + d) / r_p;\n'
                                    '        float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                    '\n'
                                    '        scattering = GetCombinedScattering(\n'
                                    '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '            r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                    '        vec3 shadow_transmittance =\n'
                                    '            GetTransmittance(atmosphere, transmittance_texture, r, mu, shadow_length, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '        scattering = scattering * shadow_transmittance;\n'
                                    '        single_mie_scattering = single_mie_scattering * shadow_transmittance;\n'
                                    '    }\n'
                                    '\n'
                                    '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                    '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeSkyRadianceToPoint(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    vec3 camera, const in vec3 point, float shadow_length,\n'
                                    '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    vec3 view_ray = normalize(point - camera);\n'
                                    '    float r = length(camera);\n'
                                    '    float rmu = dot(camera, view_ray);\n'
                                    '    float distance_to_top_atmosphere_boundary =\n'
                                    '        -rmu - sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                    '\n'
                                    '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                    '    {\n'
                                    '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                    '        r = atmosphere.top_radius;\n'
                                    '        rmu += distance_to_top_atmosphere_boundary;\n'
                                    '    }\n'
                                    '\n'
                                    '    float mu = rmu / r;\n'
                                    '    float mu_s = dot(camera, sun_direction) / r;\n'
                                    '    float nu = dot(view_ray, sun_direction);\n'
                                    '    float d = length(point - camera);\n'
                                    '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                    '\n'
                                    '    transmittance = GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '\n'
                                    '    vec3 single_mie_scattering;\n'
                                    '    vec3 scattering = GetCombinedScattering(\n'
                                    '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground,\n'
                                    '        single_mie_scattering);\n'
                                    '\n'
                                    '    d = max(d - shadow_length, 0.0);\n'
                                    '    float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_p = (r * mu + d) / r_p;\n'
                                    '    float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                    '\n'
                                    '    vec3 single_mie_scattering_p;\n'
                                    '    vec3 scattering_p = GetCombinedScattering(\n'
                                    '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '        r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground,\n'
                                    '        single_mie_scattering_p);\n'
                                    '\n'
                                    '    vec3 shadow_transmittance = transmittance;\n'
                                    '    if (shadow_length > 0.0)\n'
                                    '    {\n'
                                    '        shadow_transmittance = GetTransmittance(\n'
                                    '            atmosphere, transmittance_texture, r, mu, d, ray_r_mu_intersects_ground);\n'
                                    '    }\n'
                                    '    scattering = scattering - shadow_transmittance * scattering_p;\n'
                                    '    single_mie_scattering = single_mie_scattering - shadow_transmittance * '
                                    'single_mie_scattering_p;\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    '    single_mie_scattering = GetExtrapolatedSingleMieScattering(atmosphere, '
                                    'vec4(scattering, single_mie_scattering.r));\n'
                                    '#endif\n'
                                    '\n'
                                    '    single_mie_scattering = single_mie_scattering * smoothstep(0.0, float(0.01), mu_s);\n'
                                    '\n'
                                    '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                    '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ComputeSunAndSkyIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    const in vec3 point, const in vec3 normal, const in vec3 sun_direction,\n'
                                    '    out vec3 sky_irradiance)\n'
                                    '{\n'
                                    '    float r = length(point);\n'
                                    '    float mu_s = dot(point, sun_direction) / r;\n'
                                    '\n'
                                    '    sky_irradiance = GetIrradiance(atmosphere, irradiance_texture, r, mu_s) * (1.0 + '
                                    'dot(normal, point) / r) * 0.5;\n'
                                    '\n'
                                    '    return atmosphere.solar_irradiance *\n'
                                    '        GetTransmittanceToSun(atmosphere, transmittance_texture, r, mu_s) *\n'
                                    '        max(dot(normal, sun_direction), 0.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetSolarRadiance(const in AtmosphereParameters atmosphere)\n'
                                    '{\n'
                                    '    return atmosphere.solar_irradiance /\n'
                                    '        (PI * atmosphere.sun_angular_radius * atmosphere.sun_angular_radius) * '
                                    'SUN_RADIANCE_TO_LUMINANCE * atmosphere_exposure;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSkyRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 view_ray, float '
                                    'shadow_length,\n'
                                    '    vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    return ComputeSkyRadiance(atmosphere, transmittance_texture,\n'
                                    '        scattering_texture, single_mie_scattering_texture,\n'
                                    '        camera, view_ray, shadow_length, sun_direction, transmittance) * '
                                    'SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSkyRadianceToPoint(\n'
                                    '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 point, float '
                                    'shadow_length,\n'
                                    '    vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    return ComputeSkyRadianceToPoint(atmosphere, transmittance_texture,\n'
                                    '        scattering_texture, single_mie_scattering_texture,\n'
                                    '        camera, point, shadow_length, sun_direction, transmittance) * '
                                    'SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSunAndSkyIrradiance(\n'
                                    '   const in AtmosphereParameters atmosphere, vec3 p, vec3 normal, vec3 sun_direction,\n'
                                    '   out vec3 sky_irradiance)\n'
                                    '{\n'
                                    '    vec3 sun_irradiance = ComputeSunAndSkyIrradiance(\n'
                                    '        atmosphere, transmittance_texture, irradiance_texture, p, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '    sky_irradiance *= SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '    return sun_irradiance * SUN_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'float GetSunVisibility(vec3 point, vec3 sun_direction)\n'
                                    '{\n'
                                    '    vec3 p = point - kSphereCenter;\n'
                                    '    float p_dot_v = dot(p, sun_direction);\n'
                                    '    float p_dot_p = dot(p, p);\n'
                                    '    float ray_sphere_center_squared_distance = p_dot_p - p_dot_v * p_dot_v;\n'
                                    '    float distance_to_intersection = -p_dot_v - sqrt(\n'
                                    '        kSphereRadius * kSphereRadius - ray_sphere_center_squared_distance);\n'
                                    '    if (distance_to_intersection > 0.0)\n'
                                    '    {\n'
                                    '        float ray_sphere_distance = kSphereRadius - '
                                    'sqrt(ray_sphere_center_squared_distance);\n'
                                    '        float ray_sphere_angular_distance = -ray_sphere_distance / p_dot_v;\n'
                                    '        return smoothstep(1.0, 0.0, ray_sphere_angular_distance / sun_size.x);\n'
                                    '    }\n'
                                    '    return 1.0;\n'
                                    '}\n'
                                    '\n'
                                    'float GetSkyVisibility(vec3 point)\n'
                                    '{\n'
                                    '  vec3 p = point - kSphereCenter;\n'
                                    '  float p_dot_p = dot(p, p);\n'
                                    '  return 1.0 + p.y / sqrt(p_dot_p) * kSphereRadius * kSphereRadius / p_dot_p;\n'
                                    '}\n'
                                    '\n'
                                    'void GetSphereShadowInOut(vec3 view_direction, vec3 sun_direction, out float d_in, out '
                                    'float d_out)\n'
                                    '{\n'
                                    '    vec3 pos = CAMERA_POSITION.xyz * atmosphere_ratio - kSphereCenter;\n'
                                    '    float pos_dot_sun = dot(pos, sun_direction);\n'
                                    '    float view_dot_sun = dot(view_direction, sun_direction);\n'
                                    '    float k = sun_size.x;\n'
                                    '    float l = 1.0 + k * k;\n'
                                    '    float a = 1.0 - l * view_dot_sun * view_dot_sun;\n'
                                    '    float b = dot(pos, view_direction) - l * pos_dot_sun * view_dot_sun - k * '
                                    'kSphereRadius * view_dot_sun;\n'
                                    '    float c = dot(pos, pos) - l * pos_dot_sun * pos_dot_sun -\n'
                                    '        2.0 * k * kSphereRadius * pos_dot_sun - kSphereRadius * kSphereRadius;\n'
                                    '    float discriminant = b * b - a * c;\n'
                                    '    if (discriminant > 0.0)\n'
                                    '    {\n'
                                    '        d_in = max(0.0, (-b - sqrt(discriminant)) / a);\n'
                                    '        d_out = (-b + sqrt(discriminant)) / a;\n'
                                    '        float d_base = -pos_dot_sun / view_dot_sun;\n'
                                    '        float d_apex = -(pos_dot_sun + kSphereRadius / k) / view_dot_sun;\n'
                                    '        if (view_dot_sun > 0.0)\n'
                                    '        {\n'
                                    '            d_in = max(d_in, d_apex);\n'
                                    '            d_out = a > 0.0 ? min(d_out, d_base) : d_base;\n'
                                    '        }\n'
                                    '        else\n'
                                    '        {\n'
                                    '            d_in = a > 0.0 ? max(d_in, d_base) : d_base;\n'
                                    '            d_out = min(d_out, d_apex);\n'
                                    '        }\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        d_in = 0.0;\n'
                                    '        d_out = 0.0;\n'
                                    '    }\n'
                                    '}\n'
                                    '\n'
                                    'float GetSceneShadowLength(float scene_dist, vec3 view_direction, sampler2D '
                                    'texture_shadow)\n'
                                    '{\n'
                                    '    const float earth_radius = abs(earth_center.y);\n'
                                    '    bool shadow_enter = false;\n'
                                    '    bool do_exit = false;\n'
                                    '    float scene_shadow_out = 0.0;\n'
                                    '    float scene_shadow_in = 0.0;\n'
                                    '    float shadow_length = 0.0;\n'
                                    '    const int LOOP = 64;\n'
                                    '    float d = min(NEAR_FAR.y * 0.01, scene_dist) / float(LOOP);\n'
                                    '    float enter_count = 0.0;\n'
                                    '\n'
                                    '    for(int i=0; i<LOOP; ++i)\n'
                                    '    {\n'
                                    '        float ray_dist = float(i) * d;\n'
                                    '        vec3 world_pos = CAMERA_POSITION.xyz + view_direction * ray_dist;\n'
                                    '        vec4 shadow_uv = SHADOW_MATRIX * vec4(world_pos, 1.0);\n'
                                    '        shadow_uv.xyz /= shadow_uv.w;\n'
                                    '        shadow_uv.xyz = shadow_uv.xyz * 0.5 + 0.5;\n'
                                    '        float shadow_depth = texture2D(texture_shadow, shadow_uv.xy, 0).x;\n'
                                    '\n'
                                    '        if(shadow_uv.x < 0.0 || 1.0 < shadow_uv.x || shadow_uv.y < 0.0 || 1.0 < '
                                    'shadow_uv.y || scene_dist <= ray_dist)\n'
                                    '        {\n'
                                    '            do_exit = true;\n'
                                    '        }\n'
                                    '        else if(length(world_pos - earth_center) < earth_radius)\n'
                                    '        {\n'
                                    '            \n'
                                    '            do_exit = true;\n'
                                    '        }\n'
                                    '        else if(false == shadow_enter && shadow_depth <= shadow_uv.z)\n'
                                    '        {\n'
                                    '            \n'
                                    '            shadow_enter = true;\n'
                                    '            scene_shadow_in = dot(view_direction, world_pos);\n'
                                    '        }\n'
                                    '        else if(shadow_enter && shadow_uv.z < shadow_depth)\n'
                                    '        {\n'
                                    '            \n'
                                    '            scene_shadow_out = dot(view_direction, world_pos);\n'
                                    '            shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                    '\n'
                                    '            \n'
                                    '            shadow_enter = false;\n'
                                    '            scene_shadow_in = 0.0;\n'
                                    '            scene_shadow_out = 0.0;\n'
                                    '            continue;\n'
                                    '        }\n'
                                    '\n'
                                    '        if(shadow_enter)\n'
                                    '        {\n'
                                    '            enter_count += 1.0;\n'
                                    '        }\n'
                                    '\n'
                                    '        if(do_exit || i == (LOOP-1))\n'
                                    '        {\n'
                                    '            if(shadow_enter)\n'
                                    '            {\n'
                                    '                \n'
                                    '                scene_shadow_out = dot(view_direction, world_pos);\n'
                                    '                shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                    '            }\n'
                                    '            else\n'
                                    '            {\n'
                                    '                \n'
                                    '                scene_shadow_in = 0.0;\n'
                                    '                scene_shadow_out = 0.0;\n'
                                    '            }\n'
                                    '            break;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '    shadow_length = enter_count / float(LOOP);\n'
                                    '\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    float lightshaft_fadein_hack = smoothstep(0.02, 0.04, '
                                    'dot(normalize(relative_camera_pos - earth_center), sun_direction));\n'
                                    '\n'
                                    '    return max(0.0, shadow_length) * lightshaft_fadein_hack * 2.0;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetSceneRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float scene_linear_depth, vec3 eye_direction, vec3 normal,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    \n'
                                    '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                    '    relative_point.y = max(0.0, relative_point.y);\n'
                                    '\n'
                                    '    \n'
                                    '    float scene_shadow_length = 0.0;\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                    '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                    'transmittance);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetSceneRadianceWithShadow(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float scene_linear_depth, vec3 eye_direction, vec3 normal, sampler2D texture_shadow,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter, out float '
                                    'scene_shadow_length)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    \n'
                                    '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                    '    relative_point.y = max(0.0, relative_point.y);\n'
                                    '\n'
                                    '    scene_shadow_length = GetSceneShadowLength(scene_linear_depth, eye_direction, '
                                    'texture_shadow);\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                    '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                    'transmittance);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetCloudRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float dist, vec3 eye_direction, float scene_shadow_length,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 inscatter)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 point = camera_pos + eye_direction.xyz * max(NEAR_FAR.x, dist) * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '        atmosphere, point.xyz - earth_center, sun_direction, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    inscatter = GetSkyRadianceToPoint(atmosphere, camera_pos - earth_center,\n'
                                    '        point.xyz - earth_center, scene_shadow_length, sun_direction, transmittance);\n'
                                    '\n'
                                    '    sun_irradiance = max(vec3(0.0), sun_irradiance);\n'
                                    '    sky_irradiance = max(vec3(0.0), sky_irradiance);\n'
                                    '    transmittance = max(vec3(0.0), transmittance);\n'
                                    '    inscatter = max(vec3(0.0), inscatter);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '#endif /* UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d */\n'
                                    '\n'
                                    'const AtmosphereParameters ATMOSPHERE = AtmosphereParameters(\n'
                                    'vec3(1.474000, 1.850400, 1.911980),\n'
                                    '0.023375,\n'
                                    '6361.0,\n'
                                    '6420.0,\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                    '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.125000, 0.000000, '
                                    '0.000000))),\n'
                                    'vec3(0.005802, 0.013558, 0.033100),\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                    '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.833333, 0.000000, '
                                    '0.000000))),\n'
                                    'vec3(0.003996, 0.003996, 0.003996),\n'
                                    'vec3(0.004440, 0.004440, 0.004440),\n'
                                    '0.8,\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(25.000000, 0.000000, 0.000000, '
                                    '0.066667, -0.666667),DensityProfileLayer(0.000000, 0.000000, 0.000000, -0.066667, '
                                    '2.666667))),\n'
                                    'vec3(0.000650, 0.001881, 0.000085),\n'
                                    'vec3(0.100000, 0.100000, 0.100000),\n'
                                    '-0.4999999690599179);\n'
                                    '#endif /* UUID_8f6331f7_2c1c_37f2_bed6_c85eab80eac2 */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "precomputed_atmosphere/precompute_vs.glsl"\n'
                                    '#ifndef UUID_2679845a_8264_3d64_b003_15038f5bacf4\n'
                                    '#define UUID_2679845a_8264_3d64_b003_15038f5bacf4\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                    '\n'
                                    '#ifdef VERTEX_SHADER\n'
                                    'layout(location = 0) in vec4 vertex;\n'
                                    'out vec2 uv;\n'
                                    'void main()\n'
                                    '{\n'
                                    '    uv = vertex.xy * 0.5 + 0.5;\n'
                                    '    gl_Position = vertex;\n'
                                    '}\n'
                                    '#endif\n'
                                    '#endif /* UUID_2679845a_8264_3d64_b003_15038f5bacf4 */\n'
                                    '\n'
                                    '\n'
                                    '#ifdef FRAGMENT_SHADER\n'
                                    '#endif'},
 'shader_name': 'precomputed_atmosphere.compute_single_scattering',
 'uniforms': [('vec3', 'earth_center'),
              ('vec2', 'sun_size'),
              ('float', 'atmosphere_exposure'),
              ('bool', 'render_light_probe_mode'),
              ('sampler2D', 'transmittance_texture'),
              ('sampler2D', 'irradiance_texture'),
              ('sampler3D', 'scattering_texture'),
              ('sampler3D', 'single_mie_scattering_texture'),
              ('sampler3D', 'single_rayleigh_scattering_texture'),
              ('sampler3D', 'scattering_density_texture'),
              ('sampler3D', 'multiple_scattering_texture'),
              ('vec3', 'SKY_RADIANCE_TO_LUMINANCE'),
              ('vec3', 'SUN_RADIANCE_TO_LUMINANCE'),
              ('mat3', 'luminance_from_radiance'),
              ('int', 'layer')]}

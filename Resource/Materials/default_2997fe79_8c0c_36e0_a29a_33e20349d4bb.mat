{'binary_data': b'\x80\x03cnumpy.core.multiarray\n_reconstruct\nq\x00cnumpy\nndarray\nq\x01K\x00\x85q\x02C\x01bq\x03\x87q\x04Rq'
                b'\x05(K\x01JM\xa9\x01\x00\x85q\x06cnumpy\ndtype\nq\x07X\x02\x00\x00\x00u1q\x08K\x00K\x01\x87q\tRq\n(K'
                b'\x03X\x01\x00\x00\x00|q\x0bNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\x0cb\x89BM\xa9\x01\x00\n\x00'
                b'\x00\x00\xb2\xfa\xfak\x86T\xabT\xba\xaf\x9a\x1d\xfb\xed\x91\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00d\x00\x00\x00\x80\x18\x00\x00M\xa9\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x00\x00\x00\x88\x00'
                b'\x00\x00\x88\x00\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00y\n\x00\x00 \x00\x00\x00\xbe\x0c\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00t\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x06\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x04\x00'
                b'\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\x00\x00\x08\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x83\x00\x00\x00\x15\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xba\x00\x00\x00\x1d\x00\x00\x00\x08\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00-\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00M\xa9\x01\x00\x00\x00'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\xbfu\x85\x9369\xb6\x8d\xbfu\x85\x9369\xb6\x8d\xdbmP\x18;\x14'
                b'>\xd5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x83\x00\x00\x00\x15\x00\x00\x00\x05\x00'
                b'\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x00'
                b'\x00\x00\x1d\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00-\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x18\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x80\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x0e\x00\x00\x00+\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00'
                b'\x00\x00\x00\x01\x00\x00@\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00:\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00C\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00'
                b'\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x10\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00S\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14'
                b'\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x98\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x0c\x00\x00\x00`\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x04\x00'
                b'\x00\x00\x00\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00m\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\xa0\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00{\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x0f\x00\x00\x00\x87\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x01\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x97\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\xa6\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00'
                b'\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x08\x00\x00\x00\xb0\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x05\x00'
                b'\x00\x00\x00\x01\x00\x00\x90\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00'
                b'\x00\x00\xb9\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14\x00\x00\x01\x00'
                b'\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00'
                b'\x00\x00\xcd\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14\x00\x00\x01\x00'
                b'\x00\x00\x00\x01\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00'
                b'\x00\x00\xe1\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00S\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x04\x14\x00\x00\x01\x00\x00\x00\x00\x01'
                b'\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\xf5\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x04\x01\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x1c\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x1c\x01\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00'
                b'\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00+\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xdc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x1c\x00\x00\x00<\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\x02\x00\x00\x00\x00\x01'
                b'\x00\x00\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00Y\x01\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\\\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00j\x01\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00l\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00|\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd4\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x17\x00\x00\x00\x96\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd8\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x16\x00\x00\x00\xae\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xc8\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x12\x00\x00\x00\xc5\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x02\x00'
                b'\x00\x00\x00\x01\x00\x00H\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\xd8\x01'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01'
                b'\x00\x00\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xeb\x01'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00|\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xfc\x01\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x13\x02\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xcc\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00'\x02\x00\x00\x01\x00\x00\x00\x00\x00"
                b'\x00\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xcc\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00<\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00p\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x1c\x00\x00\x00W\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00'
                b'\x00\x00\x00\x01\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00t\x02'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00|\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x8f\x02\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\xaf\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00'
                b'\x00\x00\xcf\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01'
                b'\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\xec\x02'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00p\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\t\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00'
                b'\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x000\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x1c\x00\x00\x00*\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00'
                b'\x00\x00\x00\x01\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00G\x03'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01'
                b'\x00\x00\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00f\x03\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xac\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x86\x03\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xec\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\xa5\x03\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00'
                b'\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xc0\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\xbd\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\xdc\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x1e\x00\x00\x00\xfb\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00'
                b'\x00\x00\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00'
                b'\x00\x00\x1a\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01'
                b'\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x009\x04\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xe0\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00U\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00q\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x16\x00\x00\x00\x8b\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x15\x00\x00\x00\xa2\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00'
                b'\x00\x00\xb8\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01'
                b'\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xcc\x04'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01'
                b'\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xe3\x04'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01'
                b'\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\xfa\x04'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x10\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x16\x00\x00\x00$\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00;\x05\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00<\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00R\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x13\x00\x00\x00h\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00|\x05\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00L\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x93\x05\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\\\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\xaa\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x13\x00\x00\x00\xc0\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xd4\x05'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00l\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xeb\x05\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00|\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x02\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x18\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x16\x00\x00\x00,\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00C\x06'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01'
                b'\x00\x00\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00Z\x06\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xa0\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00p\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x84\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x9b\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\xb2\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x13\x00\x00\x00\xc8\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00'
                b'\x00\x00\xdc\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00'
                b'\x00\x00\xf3\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00'
                b'\x00\x00\n\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01'
                b'\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00 \x07\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xf0\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x004\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00K\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x15\x00\x00\x00b\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00x\x07'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x10\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x8c\x07\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x0c\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xa3\x07\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x1c\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\xba\x07\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00 \x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\xd0\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x000\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00'
                b'\x00\x00\xe4\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00,\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xfb\x07'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00<\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x12\x08\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x06\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00'\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b"
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00'
                b'\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x10\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x002\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\x04\x00'
                b'\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00>\x08'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x08\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00I\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x04\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x0b\x00\x00\x00W\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x04\x00'
                b'\x00\x00\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00c\x08'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01'
                b'\x00\x00\\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00o\x08\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00L\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00z\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00'
                b'\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x88\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00l\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x19\x00\x00\x00\x97\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x03\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00(\xdb\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00\xb1\x08'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xe8\xe1\xc4@EV'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\xcb\x08\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\xd0\x08\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00'
                b'\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\xd5\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00'
                b'\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\xa8\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\xea\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x8c\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\xf7\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00'
                b'\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x10\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x03\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14'
                b'\x00\x00\x06\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff'
                b'\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\x13\t\x00\x00d\x00\x00\x00\x01\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\x00\x00\x00d\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\xff\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00X\xea'
                b'\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00$\t\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xffF\x06\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x05\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00f\x00\x00\x00\x00\x00\x00\x000\xeb\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\r\x00\x00\x00/\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\x06\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0b\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00g\x00\x00\x00\x00\x00\x00\x00\xb8\xed'
                b'\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00=\t\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffK\x06'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\x00'
                b'\x00\x00\x00\x00\x00\x00\xa0\xf3\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00J\t'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\x06\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\n\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00i\x00\x00\x00\x00\x00\x00\x00\xc0\xe2\xc4@EV\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00Y\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffR\x06\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00j\x00\x00\x00\x00\x00'
                b'\x00\x00P\xda\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00l\t\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00V\x8b\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffT\x06'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\x00\x00\x00%\x03\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00k\x00\x00\x00\x00\x00'
                b'\x00\x00\xa8\xe8\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00z\t\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xffU\x06\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x0f\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00l\x00'
                b'\x00\x00\x00\x00\x00\x00\xe0\xec\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x8c\t'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffV\x06\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00m\x00\x00\x00\x00\x00\x00\x00\x80\xe9\xc4@EV'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x98\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00'
                b'\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffW\x06'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00n\x00'
                b'\x00\x00\x00\x00\x00\x00\x10\xe1\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x9e\t'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffg\x06\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\t\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00o\x00\x00\x00\x00\x00\x00\x00x\xf4\xc4@EV'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\xaf\t\x00\x00d\x00\x00\x00\x01\x00\x00\x00\\\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00'
                b'\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffh\x06'
                b'\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\x00\x00\x00\x94\x01\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00p\x00\x00\x00\x00\x00'
                b'\x00\x00\xf8\xe6\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\xc5\t\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa8\x0c\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x06\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x00\x00\x00\x00\x00\x00\x00\x08\xec\xc4@EV'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\xd1\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xa9\x0c\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x07\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xd5\x00\x00\x00\x00\x00\x00\x00\xd0\xe7\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\r\x00\x00\x00\xdb\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa\x0c\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x10\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd6\x00'
                b'\x00\x00\x00\x00\x00\x00\xf0\xf1\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\xe9\t'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xac\x0c\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0c\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd7\x00\x00\x00\x00\x00\x00\x00\x90\xee\xc4@EV'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xf9\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00'
                b'\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xae\x0c\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\r\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xd8\x00\x00\x00\x00\x00\x00\x00h\xef\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x0e\x00\x00\x00\n\n\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb0\x0c\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0e\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd9\x00'
                b'\x00\x00\x00\x00\x00\x00 \xe6\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x19\n'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00`\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb2\x0c\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x14\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xda\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00'\n\x00\x00\x01\x00\x00\x00\x00\x00"
                b'\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00'
                b'\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xb4\x0c\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x13\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xdb\x00\x00\x00\x00\x00\x00\x00@\xf0\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x0e\x00\x00\x00=\n\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb6\x0c\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x11\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdc\x00'
                b'\x00\x00\x00\x00\x00\x00\xc8\xf2\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00L\n'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb8\x0c\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdd\x00\x00\x00\x00\x00\x00\x00\x18\xf1\xc4@EV'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00Y\n\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00'
                b'\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xba\x0c\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xde\x00\x00\x00\x00\x00\x00\x00H\xe5\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\t\x00\x00\x00o\n\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbc\x0c\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\x00\x00\x00$\x03\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x00\x00\x00\x00p\xe4'
                b'\xc4@EV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00'
                b'\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00'
                b'\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00'
                b'\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00'
                b'\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00'
                b'\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00'
                b"\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00"
                b'\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00'
                b'\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00'
                b'\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00'
                b'\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00'
                b'\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00'
                b'\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00'
                b'\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00'
                b'\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00'
                b'\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00'
                b'\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00'
                b'\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00'
                b'\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00'
                b'\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00'
                b'\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00'
                b'\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00'
                b'\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00'
                b'\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00'
                b'\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00'
                b'\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00'
                b'\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00'
                b'\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00'
                b'\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00'
                b'\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00\xc8\x00\x00\x00\xc9\x00\x00\x00\xca\x00'
                b'\x00\x00\xcb\x00\x00\x00\xcc\x00\x00\x00\xcd\x00\x00\x00\xce\x00\x00\x00\xcf\x00\x00\x00\xd0\x00'
                b'\x00\x00\xd1\x00\x00\x00\xd2\x00\x00\x00\xd3\x00\x00\x00\xd4\x00\x00\x00\xd5\x00\x00\x00\xd6\x00'
                b'\x00\x00\xd7\x00\x00\x00\xd8\x00\x00\x00\xd9\x00\x00\x00\xda\x00\x00\x00\xdb\x00\x00\x00\xdc\x00'
                b'\x00\x00\xdd\x00\x00\x00\xde\x00\x00\x00\xdf\x00\x00\x00h\x00\x00\x00i\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00'
                b'\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00\x00\x00{\x00'
                b'\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00'
                b'\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00BACKBUFFER_SIZE\x00CAMERA_POSITION\x00DELTA_TIME'
                b'\x00INV_PROJECTION\x00INV_VIEW\x00INV_VIEW_ORIGIN\x00JITTER_DELTA\x00JITTER_FRAME\x00JITTER_OFFSET\x00LIGHT_C'
                b'OLOR\x00LIGHT_DIRECTION\x00LIGHT_POSITION\x00MOUSE_POS\x00NEAR_FAR\x00PARTICLE_ALIGN_MODE\x00PARTICLE_BLEN'
                b'D_MODE\x00PARTICLE_CELL_COUNT\x00PARTICLE_COLOR\x00PARTICLE_COMMON_DUMMY_0\x00PARTICLE_DELAY\x00PARTICLE_DU'
                b'MMY_0\x00PARTICLE_ENABLE_VECTOR_FIELD\x00PARTICLE_FADE_IN\x00PARTICLE_FADE_OUT\x00PARTICLE_FORCE_ELASTIC'
                b'ITY\x00PARTICLE_FORCE_FRICTION\x00PARTICLE_FORCE_GRAVITY\x00PARTICLE_LIFE_TIME\x00PARTICLE_MAX_COUNT\x00PAR'
                b'TICLE_OPACITY\x00PARTICLE_PARENT_MATRIX\x00PARTICLE_PLAY_SPEED\x00PARTICLE_SPAWN_COUNT\x00PARTICLE_SPAWN_VOL'
                b'UME_INFO\x00PARTICLE_SPAWN_VOLUME_MATRIX\x00PARTICLE_SPAWN_VOLUME_TYPE\x00PARTICLE_TRANSFORM_ROTATION_MAX'
                b'\x00PARTICLE_TRANSFORM_ROTATION_MIN\x00PARTICLE_TRANSFORM_SCALE_MAX\x00PARTICLE_TRANSFORM_SCALE_MIN\x00PARTI'
                b'CLE_VECTOR_FIELD_INV_MATRIX\x00PARTICLE_VECTOR_FIELD_MATRIX\x00PARTICLE_VECTOR_FIELD_STRENGTH\x00PARTICLE_VEC'
                b'TOR_FIELD_TIGHTNESS\x00PARTICLE_VELOCITY_ACCELERATION\x00PARTICLE_VELOCITY_LIMIT\x00PARTICLE_VELOCITY_POSITIO'
                b'N_MAX\x00PARTICLE_VELOCITY_POSITION_MIN\x00PARTICLE_VELOCITY_ROTATION_MAX\x00PARTICLE_VELOCITY_ROTATION_M'
                b'IN\x00PARTICLE_VELOCITY_SCALE_MAX\x00PARTICLE_VELOCITY_SCALE_MIN\x00PARTICLE_VELOCITY_STRETCH\x00PARTICLE_VE'
                b'LOCITY_TYPE\x00POINT_LIGHTS[0].color\x00POINT_LIGHTS[0].pos\x00POINT_LIGHTS[0].radius\x00POINT_LIGHTS[0].ren'
                b'der\x00POINT_LIGHTS[1].color\x00POINT_LIGHTS[1].pos\x00POINT_LIGHTS[1].radius\x00POINT_LIGHTS[1].render\x00'
                b'POINT_LIGHTS[2].color\x00POINT_LIGHTS[2].pos\x00POINT_LIGHTS[2].radius\x00POINT_LIGHTS[2].render\x00POINT_LI'
                b'GHTS[3].color\x00POINT_LIGHTS[3].pos\x00POINT_LIGHTS[3].radius\x00POINT_LIGHTS[3].render\x00POINT_LIGHTS[4].'
                b'color\x00POINT_LIGHTS[4].pos\x00POINT_LIGHTS[4].radius\x00POINT_LIGHTS[4].render\x00POINT_LIGHTS[5].colo'
                b'r\x00POINT_LIGHTS[5].pos\x00POINT_LIGHTS[5].radius\x00POINT_LIGHTS[5].render\x00POINT_LIGHTS[6].color\x00PO'
                b'INT_LIGHTS[6].pos\x00POINT_LIGHTS[6].radius\x00POINT_LIGHTS[6].render\x00POINT_LIGHTS[7].color\x00POINT_LIGH'
                b'TS[7].pos\x00POINT_LIGHTS[7].radius\x00POINT_LIGHTS[7].render\x00POINT_LIGHTS[8].color\x00POINT_LIGHTS[8].po'
                b's\x00POINT_LIGHTS[8].radius\x00POINT_LIGHTS[8].render\x00POINT_LIGHTS[9].color\x00POINT_LIGHTS[9].pos\x00PO'
                b'INT_LIGHTS[9].radius\x00POINT_LIGHTS[9].render\x00PREV_VIEW_PROJECTION\x00PROJECTION\x00RENDER_SSAO\x00REND'
                b'ER_SSR\x00SCENE_DUMMY_0\x00SCREEN_SIZE\x00SHADOW_BIAS\x00SHADOW_EXP\x00SHADOW_MATRIX\x00SHADOW_SAMPLES\x00SKY'
                b'_RADIANCE_TO_LUMINANCE\x00SUN_RADIANCE_TO_LUMINANCE\x00TIME\x00VIEW\x00VIEWCONSTANTS_DUMMY0\x00VIEW_DUMMY_0'
                b'\x00VIEW_ORIGIN\x00VIEW_PROJECTION\x00bone_matrices[0]\x00brightness\x00diffuse_color\x00earth_center\x00emis'
                b'sive_color\x00irradiance_texture\x00is_instancing\x00is_render_gbuffer\x00metalicness\x00model\x00normal_i'
                b'ntensity\x00prev_bone_matrices[0]\x00reflectance\x00roughness\x00texture_depth\x00texture_diffuse\x00textu'
                b're_material\x00texture_normal\x00texture_probe\x00texture_scene_reflect\x00texture_shadow\x00texture_ss'
                b'ao\x00transmittance_texture\x00uv_tiling\x00\x13\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b"\x00\x00\x00\x0b\x00\x00\x00'\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R"
                b'\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x003'
                b'\x00\x00\x00\x07\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00I\x00\x00\x00\x02'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00V\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\r\x00\x00\x00e\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Q'
                b'\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00s'
                b'\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00vs_in_bone_indicies\x00vs_in_bone_weights\x00vs'
                b'_in_color\x00vs_in_isntance_matrix\x00vs_in_normal\x00vs_in_position\x00vs_in_tangent\x00vs_in_tex_coor'
                b'd\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00'
                b'\x00\x00\x07\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00'
                b'\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00)\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x18\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00'
                b'\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x1a\x00\x00\x007\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x04\x00'
                b'\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00$\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x13\x00\x00\x00R\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x01\x00'
                b'\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00#\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x16\x00\x00\x00f\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00'
                b'\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x17\x00\x00\x00}\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00'
                b'\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00!\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x18\x00\x00\x00\x95\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00'
                b'\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x0b\x00\x00\x00\xae\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00'
                b'\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xffvs_output.prev_projection_pos\x00vs_output.projection_pos\x00vs_outp'
                b'ut.tangent_to_world\x00vs_output.tex_coord\x00vs_output.vertex_color\x00vs_output.vertex_normal\x00vs_output'
                b'.world_position\x00gl_Position\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x0b\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00!\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00fs_diffuse\x00fs_material\x00fs_normal\x00fs_velocity\x00\x0f\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x03\x03\xff\xff\xff\xff\xff\xff\x00\x00\x00p\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00'
                b'\x00\x10\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x05\x05\xff\xff\xff\xff\xff\xff\x00\x00\x00 \x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x0e\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x06\x06\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\xe0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x15\x00\x00\x00/\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x04\x04\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00@\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x0f\x00\x00\x00E\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x0e\x00\x00\x00U\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x01\x01\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\xb0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00d\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x02\x02'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00light_constants\x00particle_common\x00particle_infos\x00'
                b'point_light_constants\x00scene_constants\x00view_constants\x00view_projection\x00\x13\x00\x00\x00\x00\x00\x00'
                b'\x00\x05\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffR\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x06\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffR\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01'
                b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00'\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00"
                b'\x00\xff\xff\xff\xffR\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x15\x00\x00\x003\x00\x00\x00\x07\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\\\x8b\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00I\x00\x00'
                b'\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffQ\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00V\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\xff\xff\xff\xffQ\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\r\x00\x00\x00e\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff'
                b'\xffQ\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00'
                b'\x00s\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffP\x8b\x00\x00\x01\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00vs_in_bone_indicies\x00vs_in_bone_weig'
                b'hts\x00vs_in_color\x00vs_in_isntance_matrix\x00vs_in_normal\x00vs_in_position\x00vs_in_tangent\x00vs_in_te'
                b'x_coord\x00\x1d\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'R\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00'
                b'\x1e\x00\x00\x00\x08\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffR\x8b\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x007\x00\x00\x00\x04\x00\x00\x00'
                b'\x04\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\\\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00R\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xffP\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x18\x00\x00\x00f\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'Q\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00vs_output.prev_p'
                b'rojection_pos\x00vs_output.projection_pos\x00vs_output.tangent_to_world\x00vs_output.tex_coord\x00vs_output.'
                b'world_position\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x0b'
                b'\x00\x00\x00\x0b\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x17'
                b'\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00!\x00\x00\x00\x03\x00\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00fs_diffuse\x00fs_material\x00fs_normal\x00fs_velocity\x00\x00\x9e,\x00\x00!!NVvp5'
                b'.0\nOPTION NV_internal;\nOPTION NV_bindless_texture;\nPARAM c[806] = { program.local[0..805] };\nCBUFFER buf'
                b'0[] = { program.buffer[0] };\nCBUFFER buf1[] = { program.buffer[1] };\nCBUFFER buf2[] = { program.buffer[2'
                b'] };\nCBUFFER buf3[] = { program.buffer[3] };\nCBUFFER buf4[] = { program.buffer[4] };\nCBUFFER buf5[] = { '
                b'program.buffer[5] };\nCBUFFER buf6[] = { program.buffer[6] };\nATTRIB vertex_attrib[] = { vertex.attrib[0.'
                b'.10] };\nOUTPUT result_attrib[] = { result.attrib[0..9] };\nTEMP R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R'
                b'10, R11, R12;\nTEMP T;\nTEMP RC;\nSHORT TEMP HC;\nMOV.F R6, {0, 0, 0, 0}.x;\nMOV.F R7, {0, 0, 0, 0}.x;\nMO'
                b'V.F R5.xyz, {0, 0, 0, 0}.x;\nMOV.F R4.xyz, {0, 0, 0, 0}.x;\nMOV.S R4.w, {0, 0, 0, 0}.x;\nREP.S {4, 0, 0, 0}'
                b';\nSEQ.S R1.xyz, R4.w, {0, 1, 2, 0};\nMOV.U.CC RC.x, -R1;\nMOV.F R0.xyz, vertex.attrib[0];\nMOV.U R1.zw, -R1'
                b'.xyyz;\nMOV.F R0.w, {1, 0, 0, 0}.x;\nIF NE.x;\nMOV.F R1.x, vertex.attrib[5];\nELSE;\nMOV.U.CC RC.x, R1.z;'
                b'\nIF NE.x;\nMOV.F R1.x, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R1.w;\nIF NE.x;\nMOV.F R1.x, vertex.att'
                b'rib[5].z;\nELSE;\nMOV.F R1.x, vertex.attrib[5].w;\nENDIF;\nENDIF;\nENDIF;\nSEQ.S R2.xyz, R4.w, {0, 1, 2, 0'
                b'};\nTRUNC.S R1.x, R1;\nMUL.S R1.x, R1, {4, 0, 0, 0};\nMOV.S R1.x, R1;\nMOV.U.CC RC.x, -R2;\nMOV.F R1, c[R1.x '
                b'+ 404];\nMOV.U R2.zw, -R2.xyyz;\nIF NE.x;\nMOV.F R2.x, vertex.attrib[5];\nELSE;\nMOV.U.CC RC.x, R2.z;\nIF '
                b'NE.x;\nMOV.F R2.x, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R2.w;\nIF NE.x;\nMOV.F R2.x, vertex.attrib[5].z'
                b';\nELSE;\nMOV.F R2.x, vertex.attrib[5].w;\nENDIF;\nENDIF;\nENDIF;\nSEQ.S R3.xyz, R4.w, {0, 1, 2, 0};\nTRUNC'
                b'.S R2.x, R2;\nMUL.S R2.x, R2, {4, 0, 0, 0};\nMOV.S R2.x, R2;\nMOV.U.CC RC.x, -R3;\nMOV.F R2, c[R2.x + 405];\n'
                b'MOV.U R3.zw, -R3.xyyz;\nIF NE.x;\nMOV.F R3.x, vertex.attrib[5];\nELSE;\nMOV.U.CC RC.x, R3.z;\nIF NE.x;\nMO'
                b'V.F R3.x, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R3.w;\nIF NE.x;\nMOV.F R3.x, vertex.attrib[5].z;\nEL'
                b'SE;\nMOV.F R3.x, vertex.attrib[5].w;\nENDIF;\nENDIF;\nENDIF;\nSEQ.S R8.xyz, R4.w, {0, 1, 2, 0};\nTRUNC.S R'
                b'3.x, R3;\nMUL.S R3.x, R3, {4, 0, 0, 0};\nMOV.S R3.x, R3;\nMOV.U.CC RC.x, -R8;\nMOV.F R3, c[R3.x + 406];\nMOV.'
                b'U R8.zw, -R8.xyyz;\nIF NE.x;\nMOV.F R5.w, vertex.attrib[5].x;\nELSE;\nMOV.U.CC RC.x, R8.z;\nIF NE.x;\nMOV.'
                b'F R5.w, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R8.w;\nIF NE.x;\nMOV.F R5.w, vertex.attrib[5].z;\nELSE'
                b';\nMOV.F R5.w, vertex.attrib[5];\nENDIF;\nENDIF;\nENDIF;\nMUL.F32 R2, R0.y, R2;\nMAD.F32 R1, R0.x, R1, R2;'
                b'\nSEQ.S R2.xyz, R4.w, {0, 1, 2, 0};\nTRUNC.S R0.x, R5.w;\nMUL.S R0.x, R0, {4, 0, 0, 0};\nMOV.U.CC RC.x, -R2;'
                b'\nMAD.F32 R1, R0.z, R3, R1;\nMOV.S R0.x, R0;\nMAD.F32 R0, R0.w, c[R0.x + 407], R1;\nMOV.U R1.xy, -R2.yzzw;\nI'
                b'F NE.x;\nMOV.F R1.x, vertex.attrib[6];\nELSE;\nMOV.U.CC RC.x, R1;\nIF NE.x;\nMOV.F R1.x, vertex.attrib[6]'
                b'.y;\nELSE;\nMOV.U.CC RC.x, R1.y;\nIF NE.x;\nMOV.F R1.x, vertex.attrib[6].z;\nELSE;\nMOV.F R1.x, vertex.att'
                b'rib[6].w;\nENDIF;\nENDIF;\nENDIF;\nMAD.F32 R7, R0, R1.x, R7;\nSEQ.S R1.xyz, R4.w, {0, 1, 2, 0};\nMOV.U.CC '
                b'RC.x, -R1;\nMOV.F R0.xyz, vertex.attrib[0];\nMOV.U R1.zw, -R1.xyyz;\nMOV.F R0.w, {1, 0, 0, 0}.x;\nIF NE.x;\nM'
                b'OV.F R1.x, vertex.attrib[5];\nELSE;\nMOV.U.CC RC.x, R1.z;\nIF NE.x;\nMOV.F R1.x, vertex.attrib[5].y;\nELS'
                b'E;\nMOV.U.CC RC.x, R1.w;\nIF NE.x;\nMOV.F R1.x, vertex.attrib[5].z;\nELSE;\nMOV.F R1.x, vertex.attrib[5].'
                b'w;\nENDIF;\nENDIF;\nENDIF;\nSEQ.S R2.xyz, R4.w, {0, 1, 2, 0};\nTRUNC.S R1.x, R1;\nMUL.S R1.x, R1, {4, 0, 0'
                b', 0};\nMOV.S R1.x, R1;\nMOV.U.CC RC.x, -R2;\nMOV.F R1, c[R1.x + 4];\nMOV.U R2.zw, -R2.xyyz;\nIF NE.x;\nMOV'
                b'.F R2.x, vertex.attrib[5];\nELSE;\nMOV.U.CC RC.x, R2.z;\nIF NE.x;\nMOV.F R2.x, vertex.attrib[5].y;\nELSE;'
                b'\nMOV.U.CC RC.x, R2.w;\nIF NE.x;\nMOV.F R2.x, vertex.attrib[5].z;\nELSE;\nMOV.F R2.x, vertex.attrib[5].w;'
                b'\nENDIF;\nENDIF;\nENDIF;\nSEQ.S R3.xyz, R4.w, {0, 1, 2, 0};\nTRUNC.S R2.x, R2;\nMUL.S R2.x, R2, {4, 0, 0, '
                b'0};\nMOV.S R2.x, R2;\nMOV.U.CC RC.x, -R3;\nMOV.F R2, c[R2.x + 5];\nMOV.U R3.zw, -R3.xyyz;\nIF NE.x;\nMOV.F'
                b' R3.x, vertex.attrib[5];\nELSE;\nMOV.U.CC RC.x, R3.z;\nIF NE.x;\nMOV.F R3.x, vertex.attrib[5].y;\nELSE;\nM'
                b'OV.U.CC RC.x, R3.w;\nIF NE.x;\nMOV.F R3.x, vertex.attrib[5].z;\nELSE;\nMOV.F R3.x, vertex.attrib[5].w;\nENDIF'
                b';\nENDIF;\nENDIF;\nSEQ.S R8.xyz, R4.w, {0, 1, 2, 0};\nTRUNC.S R3.x, R3;\nMUL.S R3.x, R3, {4, 0, 0, 0};\nMO'
                b'V.S R3.x, R3;\nMOV.U.CC RC.x, -R8;\nMOV.F R3, c[R3.x + 6];\nMOV.U R8.zw, -R8.xyyz;\nIF NE.x;\nMOV.F R5.w, ver'
                b'tex.attrib[5].x;\nELSE;\nMOV.U.CC RC.x, R8.z;\nIF NE.x;\nMOV.F R5.w, vertex.attrib[5].y;\nELSE;\nMOV.U.CC '
                b'RC.x, R8.w;\nIF NE.x;\nMOV.F R5.w, vertex.attrib[5].z;\nELSE;\nMOV.F R5.w, vertex.attrib[5];\nENDIF;\nENDI'
                b'F;\nENDIF;\nMUL.F32 R2, R0.y, R2;\nMAD.F32 R1, R0.x, R1, R2;\nSEQ.S R2.xyz, R4.w, {0, 1, 2, 0};\nTRUNC.S R0.x'
                b', R5.w;\nMUL.S R0.x, R0, {4, 0, 0, 0};\nMOV.U.CC RC.x, -R2;\nMAD.F32 R1, R0.z, R3, R1;\nMOV.S R0.x, R0;\nMAD.'
                b'F32 R0, R0.w, c[R0.x + 7], R1;\nMOV.U R1.xy, -R2.yzzw;\nIF NE.x;\nMOV.F R1.x, vertex.attrib[6];\nELSE;\nMOV.U'
                b'.CC RC.x, R1;\nIF NE.x;\nMOV.F R1.x, vertex.attrib[6].y;\nELSE;\nMOV.U.CC RC.x, R1.y;\nIF NE.x;\nMOV.F R1.'
                b'x, vertex.attrib[6].z;\nELSE;\nMOV.F R1.x, vertex.attrib[6].w;\nENDIF;\nENDIF;\nENDIF;\nMAD.F32 R6, R0, R1'
                b'.x, R6;\nSEQ.S R1.xyz, R4.w, {0, 1, 2, 0};\nMOV.U.CC RC.x, -R1;\nMOV.F R0.xyz, vertex.attrib[2];\nMOV.U R1.z'
                b'w, -R1.xyyz;\nMOV.F R0.w, {0, 0, 0, 0}.x;\nIF NE.x;\nMOV.F R1.x, vertex.attrib[5];\nELSE;\nMOV.U.CC RC.x, R1.'
                b'z;\nIF NE.x;\nMOV.F R1.x, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R1.w;\nIF NE.x;\nMOV.F R1.x, vertex.a'
                b'ttrib[5].z;\nELSE;\nMOV.F R1.x, vertex.attrib[5].w;\nENDIF;\nENDIF;\nENDIF;\nSEQ.S R2.xyz, R4.w, {0, 1, 2,'
                b' 0};\nTRUNC.S R1.x, R1;\nMUL.S R1.x, R1, {4, 0, 0, 0};\nMOV.S R1.x, R1;\nMOV.U.CC RC.x, -R2;\nMOV.F R1.xyz, c'
                b'[R1.x + 4];\nMOV.U R2.zw, -R2.xyyz;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].x;\nELSE;\nMOV.U.CC RC.x, R2.'
                b'z;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R2.w;\nIF NE.x;\nMOV.F R1.w, vertex.a'
                b'ttrib[5].z;\nELSE;\nMOV.F R1.w, vertex.attrib[5];\nENDIF;\nENDIF;\nENDIF;\nSEQ.S R3.xyz, R4.w, {0, 1, 2, 0'
                b'};\nTRUNC.S R1.w, R1;\nMUL.S R1.w, R1, {4, 0, 0, 0}.x;\nMOV.S R1.w, R1;\nMOV.U.CC RC.x, -R3;\nMOV.F R2.xyz, c'
                b'[R1.w + 5];\nMOV.U R3.zw, -R3.xyyz;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].x;\nELSE;\nMOV.U.CC RC.x, R3.'
                b'z;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R3.w;\nIF NE.x;\nMOV.F R1.w, vertex.a'
                b'ttrib[5].z;\nELSE;\nMOV.F R1.w, vertex.attrib[5];\nENDIF;\nENDIF;\nENDIF;\nSEQ.S R8.xyz, R4.w, {0, 1, 2, 0'
                b'};\nTRUNC.S R1.w, R1;\nMUL.S R1.w, R1, {4, 0, 0, 0}.x;\nMOV.S R1.w, R1;\nMOV.U.CC RC.x, -R8;\nMOV.F R3.xyz, c'
                b'[R1.w + 6];\nMOV.U R8.zw, -R8.xyyz;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].x;\nELSE;\nMOV.U.CC RC.x, R8.'
                b'z;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R8.w;\nIF NE.x;\nMOV.F R1.w, vertex.a'
                b'ttrib[5].z;\nELSE;\nMOV.F R1.w, vertex.attrib[5];\nENDIF;\nENDIF;\nENDIF;\nMUL.F32 R2.xyz, R0.y, R2;\nMAD.F'
                b'32 R1.xyz, R0.x, R1, R2;\nMAD.F32 R0.xyz, R0.z, R3, R1;\nSEQ.S R1.xyz, R4.w, {0, 1, 2, 0};\nTRUNC.S R1.w, R'
                b'1;\nMUL.S R1.w, R1, {4, 0, 0, 0}.x;\nMOV.S R1.w, R1;\nMAD.F32 R0.xyz, R0.w, c[R1.w + 7], R0;\nMOV.U.CC RC.x,'
                b' -R1;\nMOV.U R1.zw, -R1.xyyz;\nIF NE.x;\nMOV.F R0.w, vertex.attrib[6].x;\nELSE;\nMOV.U.CC RC.x, R1.z;\nIF '
                b'NE.x;\nMOV.F R0.w, vertex.attrib[6].y;\nELSE;\nMOV.U.CC RC.x, R1.w;\nIF NE.x;\nMOV.F R0.w, vertex.attrib[6].z'
                b';\nELSE;\nMOV.F R0.w, vertex.attrib[6];\nENDIF;\nENDIF;\nENDIF;\nMAD.F32 R5.xyz, R0, R0.w, R5;\nSEQ.S R1.xy'
                b'z, R4.w, {0, 1, 2, 0};\nMOV.U.CC RC.x, -R1;\nMOV.F R0.xyz, vertex.attrib[3];\nMOV.U R1.zw, -R1.xyyz;\nMOV.F '
                b'R0.w, {0, 0, 0, 0}.x;\nIF NE.x;\nMOV.F R1.x, vertex.attrib[5];\nELSE;\nMOV.U.CC RC.x, R1.z;\nIF NE.x;\nMOV'
                b'.F R1.x, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R1.w;\nIF NE.x;\nMOV.F R1.x, vertex.attrib[5].z;\nELS'
                b'E;\nMOV.F R1.x, vertex.attrib[5].w;\nENDIF;\nENDIF;\nENDIF;\nSEQ.S R2.xyz, R4.w, {0, 1, 2, 0};\nTRUNC.S R1'
                b'.x, R1;\nMUL.S R1.x, R1, {4, 0, 0, 0};\nMOV.S R1.x, R1;\nMOV.U.CC RC.x, -R2;\nMOV.F R1.xyz, c[R1.x + 4];\nMOV'
                b'.U R2.zw, -R2.xyyz;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].x;\nELSE;\nMOV.U.CC RC.x, R2.z;\nIF NE.x;\nMOV'
                b'.F R1.w, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R2.w;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].z;\nELS'
                b'E;\nMOV.F R1.w, vertex.attrib[5];\nENDIF;\nENDIF;\nENDIF;\nSEQ.S R3.xyz, R4.w, {0, 1, 2, 0};\nTRUNC.S R1.w'
                b', R1;\nMUL.S R1.w, R1, {4, 0, 0, 0}.x;\nMOV.S R1.w, R1;\nMOV.U.CC RC.x, -R3;\nMOV.F R2.xyz, c[R1.w + 5];\nMOV'
                b'.U R3.zw, -R3.xyyz;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].x;\nELSE;\nMOV.U.CC RC.x, R3.z;\nIF NE.x;\nMOV'
                b'.F R1.w, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R3.w;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].z;\nELS'
                b'E;\nMOV.F R1.w, vertex.attrib[5];\nENDIF;\nENDIF;\nENDIF;\nSEQ.S R8.xyz, R4.w, {0, 1, 2, 0};\nTRUNC.S R1.w'
                b', R1;\nMUL.S R1.w, R1, {4, 0, 0, 0}.x;\nMOV.S R1.w, R1;\nMOV.U.CC RC.x, -R8;\nMOV.F R3.xyz, c[R1.w + 6];\nMOV'
                b'.U R8.zw, -R8.xyyz;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].x;\nELSE;\nMOV.U.CC RC.x, R8.z;\nIF NE.x;\nMOV'
                b'.F R1.w, vertex.attrib[5].y;\nELSE;\nMOV.U.CC RC.x, R8.w;\nIF NE.x;\nMOV.F R1.w, vertex.attrib[5].z;\nELS'
                b'E;\nMOV.F R1.w, vertex.attrib[5];\nENDIF;\nENDIF;\nENDIF;\nMUL.F32 R2.xyz, R0.y, R2;\nMAD.F32 R1.xyz, R0.x'
                b', R1, R2;\nMAD.F32 R0.xyz, R0.z, R3, R1;\nSEQ.S R1.xyz, R4.w, {0, 1, 2, 0};\nTRUNC.S R1.w, R1;\nMUL.S R1.w, '
                b'R1, {4, 0, 0, 0}.x;\nMOV.S R1.w, R1;\nMAD.F32 R0.xyz, R0.w, c[R1.w + 7], R0;\nMOV.U.CC RC.x, -R1;\nMOV.U R1.'
                b'zw, -R1.xyyz;\nIF NE.x;\nMOV.F R0.w, vertex.attrib[6].x;\nELSE;\nMOV.U.CC RC.x, R1.z;\nIF NE.x;\nMOV.F R0.'
                b'w, vertex.attrib[6].y;\nELSE;\nMOV.U.CC RC.x, R1.w;\nIF NE.x;\nMOV.F R0.w, vertex.attrib[6].z;\nELSE;\nMOV'
                b'.F R0.w, vertex.attrib[6];\nENDIF;\nENDIF;\nENDIF;\nMAD.F32 R4.xyz, R0, R0.w, R4;\nADD.S R4.w, R4, {1, 0, 0, '
                b'0}.x;\nENDREP;\nDP3.F32 R0.x, R5, R5;\nDP3.F32 R0.y, R4, R4;\nRSQ.F32 R0.x, R0.x;\nRSQ.F32 R0.y, R0.y;\nSN'
                b'E.U.CC HC.x, c[805], {0, 0, 0, 0};\nDIV.F32 R6, R6, R6.w;\nDIV.F32 R7, R7, R7.w;\nMUL.F32 R9.xyz, R0.x, R5;'
                b'\nMUL.F32 R10.xyz, R0.y, R4;\nIF NE.x;\nMUL.F32 R1, vertex.attrib[7].y, c[1];\nMUL.F32 R0, vertex.attrib[8].'
                b'y, c[1];\nMAD.F32 R1, vertex.attrib[7].x, c[0], R1;\nMAD.F32 R0, vertex.attrib[8].x, c[0], R0;\nMAD.F32 R0,'
                b' vertex.attrib[8].z, c[2], R0;\nMAD.F32 R1, vertex.attrib[7].z, c[2], R1;\nMAD.F32 R2, vertex.attrib[8].w,'
                b' c[3], R0;\nMUL.F32 R3, vertex.attrib[9].y, c[1];\nMUL.F32 R0, vertex.attrib[10].y, c[1];\nMAD.F32 R3, vert'
                b'ex.attrib[9].x, c[0], R3;\nMAD.F32 R0, vertex.attrib[10].x, c[0], R0;\nMAD.F32 R3, vertex.attrib[9].z, c[2'
                b'], R3;\nMAD.F32 R0, vertex.attrib[10].z, c[2], R0;\nMAD.F32 R1, vertex.attrib[7].w, c[3], R1;\nMAD.F32 R3, '
                b'vertex.attrib[9].w, c[3], R3;\nMAD.F32 R4, vertex.attrib[10].w, c[3], R0;\nELSE;\nMOV.F R1, c[0];\nMOV.F R2,'
                b' c[1];\nMOV.F R3, c[2];\nMOV.F R4, c[3];\nENDIF;\nMUL.F32 R0, R6.y, R2;\nMAD.F32 R0, R6.x, R1, R0;\nMAD.F3'
                b'2 R5, R6.z, R3, R0;\nMAD.F32 R8, R6.w, R4, R5;\nLDC.F32X4 R0, buf2[16];\nMUL.F32 R5, R8.y, R0;\nLDC.F32X4 R0'
                b', buf2[0];\nMAD.F32 R5, R8.x, R0, R5;\nLDC.F32X4 R0, buf2[32];\nMAD.F32 R5, R8.z, R0, R5;\nLDC.F32X4 R0, buf'
                b'2[48];\nMAD.F32 R6, R8.w, R0, R5;\nMUL.F32 R0, R2, R7.y;\nMUL.F32 R5.xyz, R9.yzxw, R10.zxyw;\nMAD.F32 R0, R1'
                b', R7.x, R0;\nMAD.F32 R12.xyz, R9.zxyw, R10.yzxw, -R5;\nMAD.F32 R5, R3, R7.z, R0;\nMAD.F32 R11, R4, R7.w, R5'
                b';\nLDC.F32X4 R0, buf2[80];\nMUL.F32 R5, R11.y, R0;\nLDC.F32X4 R0, buf2[64];\nMAD.F32 R7, R11.x, R0, R5;\nLDC.'
                b'F32X4 R5, buf2[96];\nMUL.F32 R0, R2, R12.y;\nMAD.F32 R7, R11.z, R5, R7;\nMAD.F32 R5, R1, R12.x, R0;\nLDC.F32'
                b'X4 R0, buf2[112];\nMOV.F result.attrib[8], R6;\nMAD.F32 result.attrib[9], R11.w, R0, R7;\nMAD.F32 R0, R3, R'
                b'12.z, R5;\nMOV.F result.position, R6;\nADD.F32 result.attrib[6], R0, {0, 0, 0, 0}.x;\nMUL.F32 R0, R2, R10.y'
                b';\nMAD.F32 R0, R1, R10.x, R0;\nMUL.F32 R2, R2, R9.y;\nMAD.F32 R1, R1, R9.x, R2;\nMOV.F result.attrib[0].xyz,'
                b' R8;\nMAD.F32 R0, R3, R10.z, R0;\nMAD.F32 R1, R3, R9.z, R1;\nADD.F32 result.attrib[4], R0, {0, 0, 0, 0}.x;\n'
                b'ADD.F32 result.attrib[5], R1, {0, 0, 0, 0}.x;\nMOV.F result.attrib[2], vertex.attrib[1];\nMOV.F result.att'
                b'rib[7], R4;\nMOV.F result.attrib[1].xyz, R9;\nMUL.F32 result.attrib[3].xy, vertex.attrib[4], c[804];\nEND\n('
                b'\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00'
                b'\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x10k\x00\x00!!NVfp5.0\nOPTION NV_internal;\nOPTION NV_gpu_progr'
                b'am_fp64;\nOPTION NV_bindless_texture;\nOPTION ARB_draw_buffers;\nPARAM c[21] = { program.local[0..20] };\nCB'
                b'UFFER buf0[] = { program.buffer[0] };\nCBUFFER buf1[] = { program.buffer[1] };\nCBUFFER buf2[] = { program'
                b'.buffer[2] };\nCBUFFER buf3[] = { program.buffer[3] };\nCBUFFER buf4[] = { program.buffer[4] };\nCBUFFER bu'
                b'f5[] = { program.buffer[5] };\nCBUFFER buf6[] = { program.buffer[6] };\nATTRIB fragment_attrib[] = { fragm'
                b'ent.attrib[0..9] };\nSHORT TEMP H0;\nTEMP R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14,'
                b' R15, R16, R17;\nLONG TEMP D0;\nTEMP T;\nTEMP RC;\nSHORT TEMP HC;\nTEMP lmem0[64];\nOUTPUT result_color0 ='
                b' result.color;\nOUTPUT result_color1 = result.color[1];\nOUTPUT result_color2 = result.color[2];\nOUTPUT re'
                b'sult_color3 = result.color[3];\nPK64.U D0.x, c[12];\nTEX.F R0, fragment.attrib[3], handle(D0.x), 2D;\nMOV.F'
                b' lmem0[0].xy, {-0.511962473, -0.482793808, 0, 0};\nMOV.F lmem0[1].xy, {-0.217126399, -0.476872593, 0, 0};'
                b'\nMOV.F lmem0[2].xy, {-0.755293071, -0.242650703, 0, 0};\nMOV.F lmem0[3].xy, {-0.713676512, -0.449661404, '
                b'0, 0};\nMOV.F lmem0[4].xy, {-0.593884885, -0.68956542, 0, 0};\nMOV.F lmem0[5].xy, {-0.314800292, -0.704765'
                b'379, 0, 0};\nMOV.F lmem0[6].xy, {-0.422149986, -0.202460706, 0, 0};\nMOV.F lmem0[7].xy, {-0.946681619, -0.'
                b'201450795, 0, 0};\nMOV.F lmem0[8].xy, {-0.840906322, -0.0346577801, 0, 0};\nMOV.F lmem0[9].xy, {-0.6517571'
                b'81, -0.0747632608, 0, 0};\nMOV.F lmem0[10].xy, {-0.104182199, -0.0252121408, 0, 0};\nMOV.F lmem0[11].xy, {'
                b'-0.304271191, -0.0219543092, 0, 0};\nMOV.F lmem0[12].xy, {-0.508230686, 0.107980601, 0, 0};\nMOV.F lmem0[1'
                b'3].xy, {-0.0842987671, -0.231629804, 0, 0};\nMOV.F lmem0[14].xy, {-0.987912774, 0.111368299, 0, 0};\nMOV.F'
                b' lmem0[15].xy, {-0.385963589, 0.336354494, 0, 0};\nMOV.F lmem0[16].xy, {-0.192533404, 0.178728804, 0, 0};'
                b'\nMOV.F lmem0[17].xy, {0.00325618195, 0.138135001, 0, 0};\nMOV.F lmem0[18].xy, {-0.87068373, 0.301067889, '
                b'0, 0};\nMOV.F lmem0[19].xy, {-0.698203802, 0.190432593, 0, 0};\nMOV.F lmem0[20].xy, {0.197504297, 0.222131'
                b'699, 0, 0};\nMOV.F lmem0[21].xy, {0.1507788, 0.420416802, 0, 0};\nMOV.F lmem0[22].xy, {0.351405591, 0.0986'
                b'557901, 0, 0};\nMOV.F lmem0[23].xy, {0.155878305, -0.0846093521, 0, 0};\nMOV.F lmem0[24].xy, {-0.068497799'
                b'3, 0.446199298, 0, 0};\nMOV.F lmem0[25].xy, {0.378052205, 0.347867906, 0, 0};\nMOV.F lmem0[26].xy, {0.3956'
                b'79891, -0.146917701, 0, 0};\nMOV.F lmem0[27].xy, {0.583897471, 0.105494298, 0, 0};\nMOV.F lmem0[28].xy, {0'
                b'.615510523, 0.324571609, 0, 0};\nMOV.F lmem0[29].xy, {0.392862409, -0.44176209, 0, 0};\nMOV.F lmem0[30].xy'
                b', {0.174988404, -0.420217514, 0, 0};\nMOV.F lmem0[31].xy, {0.681372702, -0.2424808, 0, 0};\nMOV.F lmem0[32'
                b'].xy, {-0.670771122, 0.491274089, 0, 0};\nMOV.F lmem0[33].xy, {0.000513052801, -0.805833399, 0, 0};\nMOV.F'
                b' lmem0[34].xy, {0.0270301308, -0.601072788, 0, 0};\nMOV.F lmem0[35].xy, {-0.165818796, -0.969567418, 0, 0'
                b'};\nMOV.F lmem0[36].xy, {0.406059086, -0.710072577, 0, 0};\nMOV.F lmem0[37].xy, {0.771339595, -0.471365899'
                b', 0, 0};\nMOV.F lmem0[38].xy, {0.573212028, -0.515439987, 0, 0};\nMOV.F lmem0[39].xy, {-0.344889611, -0.90'
                b'4649675, 0, 0};\nMOV.F lmem0[40].xy, {0.126854405, -0.987469196, 0, 0};\nMOV.F lmem0[41].xy, {0.741853297,'
                b' -0.666736603, 0, 0};\nMOV.F lmem0[42].xy, {0.349252194, 0.592466176, 0, 0};\nMOV.F lmem0[43].xy, {0.56798'
                b'9707, 0.534346521, 0, 0};\nMOV.F lmem0[44].xy, {0.566341698, 0.770869792, 0, 0};\nMOV.F lmem0[45].xy, {0.7'
                b'37549722, 0.669141471, 0, 0};\nMOV.F lmem0[46].xy, {0.227199405, -0.616350174, 0, 0};\nMOV.F lmem0[47].xy,'
                b' {0.231284395, 0.872565925, 0, 0};\nMOV.F lmem0[48].xy, {0.421699286, 0.900283813, 0, 0};\nMOV.F lmem0[49]'
                b'.xy, {0.426209092, -0.901328385, 0, 0};\nMOV.F lmem0[50].xy, {0.200140804, -0.808381021, 0, 0};\nMOV.F lme'
                b'm0[51].xy, {0.149394006, 0.665076315, 0, 0};\nMOV.F lmem0[52].xy, {-0.0964037627, 0.984373629, 0, 0};\nMOV'
                b'.F lmem0[53].xy, {0.768232822, -0.0727384388, 0, 0};\nMOV.F lmem0[54].xy, {0.0414658412, 0.831318378, 0, '
                b'0};\nMOV.F lmem0[55].xy, {0.970526576, -0.114330404, 0, 0};\nMOV.F lmem0[56].xy, {0.967001677, 0.129338503'
                b', 0, 0};\nMOV.F lmem0[57].xy, {0.901503682, -0.330694914, 0, 0};\nMOV.F lmem0[58].xy, {-0.50856477, 0.7534'
                b'17671, 0, 0};\nMOV.F lmem0[59].xy, {0.905550122, 0.375839293, 0, 0};\nMOV.F lmem0[60].xy, {0.759994626, 0.'
                b'1809109, 0, 0};\nMOV.F lmem0[61].xy, {-0.2483695, 0.794295192, 0, 0};\nMOV.F lmem0[62].xy, {-0.424105197, '
                b'0.558108687, 0, 0};\nDIV.F32 R1.xy, fragment.attrib[8], fragment.attrib[8].w;\nPOW.F32 R0.x, R0.x, {2.2000'
                b'0005, 0, 0, 0}.x;\nPOW.F32 R0.y, R0.y, {2.20000005, 0, 0, 0}.x;\nPOW.F32 R0.z, R0.z, {2.20000005, 0, 0, 0}'
                b'.x;\nMUL.F32 R0.xyz, R0, c[5].x;\nMUL.F32 R4.xyz, R0, c[11];\nSLT.F32 R0.y, R0.w, {0.333000004, 0, 0, 0}.x;'
                b'\nTRUNC.U.CC HC.x, R0.y;\nMAD.F32 R6.xy, R1, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nPK64.U D0.x, c[16];\nMOV.F'
                b' lmem0[63].xy, {-0.1020106, 0.672446787, 0, 0};\nTEX.F R0.x, R6, handle(D0.x), 2D;\nIF NE.x;\nMOV.U.CC RC.x'
                b', {1, 0, 0, 0};\nKIL NE.x;\nENDIF;\nPK64.U D0.x, c[14];\nTEX.F R1.xyz, fragment.attrib[3], handle(D0.x), 2D;'
                b'\nMAD.F32 R1.xyz, R1.xzyw, {2, -1, 0, 0}.x, {2, -1, 0, 0}.y;\nMUL.F32 R1.xz, R1, c[9].x;\nDP3.F32 R0.y, R1,'
                b' R1;\nRSQ.F32 R0.y, R0.y;\nMUL.F32 R2.xyz, R0.y, R1;\nMUL.F32 R1.xyz, R2.y, fragment.attrib[5];\nMAD.F32 R1.'
                b'xyz, R2.x, fragment.attrib[4], R1;\nMAD.F32 R1.xyz, R2.z, fragment.attrib[6], R1;\nADD.F32 R1.xyz, R1, {0,'
                b' 0, 0, 0}.x;\nDP3.F32 R0.y, R1, R1;\nRSQ.F32 R0.y, R0.y;\nLDC.F32X4 R2.xyz, buf1[384];\nADD.F32 R5.xyz, R2, '
                b'-fragment.attrib[0];\nMUL.F32 R3.xyz, R0.y, R1;\nDP3.F32 R0.y, R5, R5;\nRSQ.F32 R0.z, R0.y;\nLDC.F32X4 R2.xy'
                b'z, buf3[80];\nDP3.F32 R0.y, R2, R2;\nPK64.U D0.x, c[13];\nTEX.F R1.xyz, fragment.attrib[3], handle(D0.x), 2'
                b'D;\nMUL.F32 R5.xyz, R0.z, R5;\nRSQ.F32 R0.y, R0.y;\nMAX.F.SAT R0.z, c[7].x, {0.0500000007, 0, 0, 0}.x;\nSNE.'
                b'U.CC HC.x, c[15], {0, 0, 0, 0};\nMUL.F32 R4.xyz, R1.x, R4;\nMUL.F32 R2.xyz, R0.y, R2;\nMUL.F32 R3.w, R1.y, '
                b'R0.z;\nMUL.F32 R1.w, R1.z, c[8].x;\nIF NE.x;\nMUL.F32 R1.xyz, c[10], {0.5, 0, 0, 0}.x;\nDP3.F32 R0.w, R1, {0'
                b'.212599993, 0.715200007, 0.0722000003, 0};\nMUL.F32 R1.y, R0.w, c[10].w;\nMUL.F32 R0.xyz, R4, c[10];\nMUL.F'
                b'32 R0.xyz, R0, c[10].w;\nMAD.F32 result_color0.xyz, R0, {0.5, 0, 0, 0}.x, R4;\nMUL.F32.SAT result_color0.w'
                b', R1.y, {0.100000001, 0, 0, 0}.x;\nMOV.F result_color1.w, {0, 0, 0, 0}.x;\nLDC.F32X2 R0.xy, buf1[408];\nDIV'
                b'.F32 R0.zw, fragment.attrib[9].xyxy, fragment.attrib[9].w;\nRCP.F32 R1.x, fragment.attrib[8].w;\nMAD.F32 R'
                b'0.zw, fragment.attrib[8].xyxy, R1.x, -R0;\nMAD.F32 result_color3.xy, R0.zwzw, {0.5, 0, 0, 0}.x, -R0;\nMAD.'
                b'F32 result_color2.xyz, R3, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nMOV.F result_color1.x, R3.w;\nMOV.F result'
                b'_color1.y, c[8].x;\nMOV.F result_color1.z, c[6].x;\nMOV.F result_color2.w, {0, 0, 0, 0}.x;\nELSE;\nLDC.F32X2'
                b' R1.xy, buf1[400];\nADD.F32 R0.y, R1, -R1.x;\nMUL.F32 R0.x, R0, R0.y;\nMAD.F32 R0.x, R0, {2, 0, 0, 0}, -R0.'
                b'y;\nADD.F32 R0.y, R1, R1.x;\nADD.F32 R1.z, R0.y, -R0.x;\nMUL.F32 R1.x, R1, R1.y;\nDIV.F32 R3.w, R1.x, R1.z;\n'
                b'LDC.F32X4 R0.xyz, buf1[384];\nMUL.F32 R1.xyz, R0, {0.100000001, 0, 0, 0}.x;\nMUL.F32 R0.xyz, R3.w, -R5;\nMA'
                b'D.F32 R0.xyz, R0, {0.200000003, 0, 0, 0}.x, R1;\nMAX.F R0.y, R0, {0, 0, 0, 0}.x;\nADD.F32 R7.xyz, R0, -c[0'
                b'];\nLDC.F32X4 R0.xyz, buf3[80];\nDP3.F32 R4.w, R7, R7;\nRSQ.F32 R5.w, R4.w;\nRCP.F32 R6.w, R5.w;\nDP3.F32 R3.'
                b'w, R7, R0;\nMUL.F32 R6.z, R5.w, R3.w;\nMUL.F32 R7.w, R5, {6361, 0, 0, 0}.x;\nMAD.F32 R3.w, -R7, R7, {1, 0, '
                b'0, 0}.x;\nMAX.F R3.w, R3, {0, 0, 0, 0}.x;\nMAX.F R1.y, R1, {0, 0, 0, 0}.x;\nADD.F32 R1.xyz, R1, -c[0];\nMUL.'
                b'F32 R8.x, R6.z, R6.z;\nDIV.F32 R4.w, R6, R5.w;\nMAD.F32 R4.w, R8.x, R4, -R4;\nDP3.F32 R8.w, R3, R7;\nADD.F32'
                b' R8.x, R4.w, {41216400, 0, 0, 0};\nRSQ.F32 R3.w, R3.w;\nRCP.F32 R4.w, R3.w;\nMUL.F32 R3.w, -R7, {0.01174999'
                b'96, 0, 0, 0}.x;\nADD.F32 R4.w, R6.z, R4;\nMAD.F32 R3.w, R7, {0.0117499996, 0, 0, 0}.x, -R3;\nMAD.F32 R4.w, '
                b'R7, {0.0117499996, 0, 0, 0}.x, R4;\nDIV.F32.SAT R4.w, R4, R3.w;\nMAX.F R7.w, R8.x, {0, 0, 0, 0}.x;\nMAD.F32'
                b' R3.w, R6, R6, {-40462320, 0, 0, 0}.x;\nRSQ.F32 R7.w, R7.w;\nRCP.F32 R7.w, R7.w;\nMAD.F32 R8.x, R6.z, -R6.w'
                b', R7.w;\nADD.F32 R7.w, -R6, {6420, 0, 0, 0}.x;\nMAX.F R3.w, R3, {0, 0, 0, 0}.x;\nRSQ.F32 R3.w, R3.w;\nRCP.F3'
                b'2 R8.y, R3.w;\nADD.F32 R3.w, -R7, R8.y;\nMAX.F R8.x, R8, {0, 0, 0, 0};\nMAD.F32 R6.z, R6, {0.5, 0, 0, 0}.x,'
                b' {0.5, 0, 0, 0}.x;\nADD.F32 R6.w, R6, {-6361, 0, 0, 0}.x;\nADD.F32 R3.w, R3, {868.377747, 0, 0, 0}.x;\nADD.'
                b'F32 R7.w, R8.x, -R7;\nDIV.F32 R7.w, R7, R3.w;\nMAD.F32 R3.w, -R4, {2, 3, 0, 0}.x, {2, 3, 0, 0}.y;\nMUL.F32 '
                b'R4.w, R4, R4;\nMUL.F32 R4.w, R4, R3;\nDP3.F32 R3.w, R3, R0;\nMAD.F32 R8.x, R7.w, {0.99609375, 0.001953125, '
                b'0, 0}, {0.99609375, 0.001953125, 0, 0}.y;\nMAD.F32 R8.y, R8, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793'
                b', 0.0078125, 0, 0};\nPK64.U D0.x, c[1];\nTEX.F R0.xyz, R8, handle(D0.x), 2D;\nADD.F32 R8.xyz, R7, -R1;\nDP3.'
                b'F32 R7.w, R8, R8;\nRSQ.F32 R7.w, R7.w;\nMUL.F32 R0.xyz, R0, R4.w;\nMAX.F R3.w, R3, {0, 0, 0, 0}.x;\nMUL.F32 '
                b'R0.xyz, R0, R3.w;\nDP3.F32 R3.w, R1, R1;\nRSQ.F32 R4.w, R3.w;\nMUL.F32 R0.xyz, R0, c[4];\nRCP.F32 R3.w, R4.w'
                b';\nMUL.F32 R8.xyz, R7.w, R8;\nDIV.F32 R7.w, R3, R4.w;\nDP3.F32 R4.w, R1, R8;\nMAD.F32 R7.w, R4, R4, -R7;\nMAD'
                b'.F32 R6.z, R6, {0.984375, 0.0078125, 0, 0}.x, {0.984375, 0.0078125, 0, 0}.y;\nPK64.U D0.x, c[2];\nMAD.F32 '
                b'R6.w, R6, {0.0158898309, 0.03125, 0, 0}.x, {0.0158898309, 0.03125, 0, 0}.y;\nTEX.F R9.xyz, R6.zwzw, handle(D0'
                b'.x), 2D;\nMUL.F32 R5.w, R5, R8;\nMAD.F32 R9.xyz, R5.w, R9, R9;\nPK64.U D0.x, c[19];\nTEX.F R10, R6, handle(D'
                b'0.x), 2D;\nADD.F32 R7.w, R7, {41216400, 0, 0, 0}.x;\nRSQ.F32 R5.w, R7.w;\nRCP.F32 R5.w, R5.w;\nMUL.F32 R9.xy'
                b'z, R9, c[3];\nADD.F32 R6.z, -R4.w, -R5.w;\nSGT.F32 R5.w, -R4, R5;\nPK64.U D0.x, c[18];\nTRUNC.U.CC HC.x, R5.'
                b'w;\nMOV.F R11.xyz, R1;\nMOV.F R12.xyz, R1;\nMUL.F32 R1.xyz, R4, c[10];\nMUL.F32 R0.xyz, R0, {1.47399998, 1.8'
                b'5039997, 1.91198003, 0};\nMUL.F32 R9.xyz, R9, {0.5, 0, 0, 0}.x;\nMUL.F32 R1.xyz, R1, c[10].w;\nTEX.F R6.x, '
                b'R6, handle(D0.x), 2D;\nIF NE.x;\nMAD.F32 R12.xyz, R8, R6.z, R11;\nADD.F32 R4.w, R6.z, R4;\nMOV.F R3.w, {6420'
                b', 0, 0, 0}.x;\nENDIF;\nADD.F32 R7.xyz, R7, -R12;\nDP3.F32 R5.w, R7, R7;\nRSQ.F32 R5.w, R5.w;\nRCP.F32 R5.w, R'
                b'5.w;\nDIV.F32 R4.w, R4, R3.w;\nREP.S ;\nSEQ.U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nSLT.F32 R2.w'
                b', R4, {0, 0, 0, 0}.x;\nTRUNC.U.CC HC.x, R2.w;\nIF NE.x;\nMUL.F32 R6.y, R3.w, R3.w;\nMUL.F32 R2.w, R4, R4;\nMA'
                b'D.F32 R2.w, R2, R6.y, -R6.y;\nADD.F32 R2.w, R2, {40462320, 0, 0, 0}.x;\nSLE.F32 R2.w, {0, 0, 0, 0}.x, R2;\n'
                b'TRUNC.U.CC HC.x, R2.w;\nIF NE.x;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.U R2.w, {1, 0, 0, 0}.x;\nBRK (NE.x);\nEND'
                b'IF;\nENDIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMOV.U R2.w, {0, 0, 0, 0}.x;\nBRK (NE.x);\nENDREP;\nREP.S ;\nSEQ.'
                b'U.CC HC.x, {1, 0, 0, 0}, {0, 0, 0, 0};\nBRK (NE.x);\nMUL.F32 R6.y, R3.w, R4.w;\nMUL.F32 R6.y, R5.w, R6;\nMUL'
                b'.F32 R6.y, R6, {2, 0, 0, 0}.x;\nMAD.F32 R6.y, R5.w, R5.w, R6;\nMAD.F32 R6.y, R3.w, R3.w, R6;\nRSQ.F32 R6.y,'
                b' R6.y;\nRCP.F32 R6.y, R6.y;\nMIN.F R6.y, R6, {6420, 0, 0, 0}.x;\nMOV.U.CC RC.x, R2.w;\nMAX.F R6.y, R6, {6361'
                b', 0, 0, 0}.x;\nMAD.F32 R6.z, R3.w, R4.w, R5.w;\nDIV.F32 R6.z, R6, R6.y;\nMIN.F R6.z, R6, {1, 0, 0, 0}.x;\nMA'
                b'X.F R7.w, R6.z, {-1, 0, 0, 0}.x;\nIF NE.x;\nMUL.F32 R6.w, R3, R3;\nMUL.F32 R6.z, -R4.w, -R4.w;\nMAD.F32 R6.z'
                b', R6, R6.w, -R6.w;\nADD.F32 R6.z, R6, {41216400, 0, 0, 0}.x;\nMAX.F R6.z, R6, {0, 0, 0, 0}.x;\nMAD.F32 R6.w'
                b', R3, R3, {-40462320, 0, 0, 0}.x;\nRSQ.F32 R6.z, R6.z;\nRCP.F32 R6.z, R6.z;\nMAD.F32 R7.x, -R3.w, -R4.w, R6'
                b'.z;\nMAX.F R6.w, R6, {0, 0, 0, 0}.x;\nRSQ.F32 R6.w, R6.w;\nRCP.F32 R7.y, R6.w;\nADD.F32 R6.w, -R3, {6420, 0,'
                b' 0, 0}.x;\nADD.F32 R6.z, -R6.w, R7.y;\nMAX.F R7.x, R7, {0, 0, 0, 0};\nADD.F32 R6.w, R7.x, -R6;\nADD.F32 R6.z'
                b', R6, {868.377747, 0, 0, 0}.x;\nDIV.F32 R6.z, R6.w, R6.z;\nMUL.F32 R7.x, R6.y, R6.y;\nMUL.F32 R6.w, -R7, -R'
                b'7;\nMAD.F32 R6.w, R6, R7.x, -R7.x;\nADD.F32 R8.x, R6.w, {41216400, 0, 0, 0};\nMAD.F32 R6.w, R7.y, {0.001133'
                b'5793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0}.y;\nMAD.F32 R6.z, R6, {0.99609375, 0.001953125, 0, '
                b'0}.x, {0.99609375, 0.001953125, 0, 0}.y;\nPK64.U D0.x, c[1];\nTEX.F R7.xyz, R6.zwzw, handle(D0.x), 2D;\nMAX'
                b'.F R6.z, R8.x, {0, 0, 0, 0}.x;\nMAD.F32 R6.w, R6.y, R6.y, {-40462320, 0, 0, 0}.x;\nMAX.F R6.w, R6, {0, 0, '
                b'0, 0}.x;\nRSQ.F32 R6.z, R6.z;\nRSQ.F32 R8.x, R6.w;\nRCP.F32 R6.z, R6.z;\nMAD.F32 R6.w, -R6.y, -R7, R6.z;\nRCP'
                b'.F32 R7.w, R8.x;\nADD.F32 R6.z, -R6.y, {6420, 0, 0, 0}.x;\nADD.F32 R6.y, -R6.z, R7.w;\nMAX.F R6.w, R6, {0, '
                b'0, 0, 0}.x;\nADD.F32 R6.z, R6.w, -R6;\nADD.F32 R6.y, R6, {868.377747, 0, 0, 0}.x;\nDIV.F32 R6.y, R6.z, R6.y'
                b';\nMAD.F32 R6.w, R7, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0}.y;\nMAD.F32 R6.z, '
                b'R6.y, {0.99609375, 0.001953125, 0, 0}.x, {0.99609375, 0.001953125, 0, 0}.y;\nTEX.F R8.xyz, R6.zwzw, handle(D0'
                b'.x), 2D;\nRCP.F32 R7.x, R7.x;\nRCP.F32 R7.z, R7.z;\nRCP.F32 R7.y, R7.y;\nMUL.F32 R7.xyz, R8, R7;\nMIN.F R13.x'
                b'yz, R7, {1, 0, 0, 0}.x;\nELSE;\nMUL.F32 R6.w, R6.y, R6.y;\nMUL.F32 R6.z, R7.w, R7.w;\nMAD.F32 R6.z, R6, R6.w'
                b', -R6.w;\nMAD.F32 R6.w, R6.y, R6.y, {-40462320, 0, 0, 0}.x;\nMAX.F R6.w, R6, {0, 0, 0, 0}.x;\nRSQ.F32 R7.x,'
                b' R6.w;\nADD.F32 R6.z, R6, {41216400, 0, 0, 0}.x;\nMAX.F R6.z, R6, {0, 0, 0, 0}.x;\nRSQ.F32 R6.z, R6.z;\nRCP.'
                b'F32 R6.z, R6.z;\nMAD.F32 R6.w, -R6.y, R7, R6.z;\nRCP.F32 R7.x, R7.x;\nADD.F32 R6.z, -R6.y, {6420, 0, 0, 0}.'
                b'x;\nADD.F32 R6.y, -R6.z, R7.x;\nMAX.F R6.w, R6, {0, 0, 0, 0}.x;\nADD.F32 R6.z, R6.w, -R6;\nADD.F32 R6.y, R6,'
                b' {868.377747, 0, 0, 0}.x;\nDIV.F32 R6.y, R6.z, R6.y;\nMUL.F32 R6.z, R4.w, R4.w;\nMUL.F32 R6.w, R3, R3;\nMAD.'
                b'F32 R6.w, R6.z, R6, -R6;\nMAD.F32 R6.z, R6.y, {0.99609375, 0.001953125, 0, 0}.x, {0.99609375, 0.001953125, 0,'
                b' 0}.y;\nADD.F32 R6.y, R6.w, {41216400, 0, 0, 0}.x;\nMAX.F R6.y, R6, {0, 0, 0, 0}.x;\nRSQ.F32 R6.y, R6.y;\nMA'
                b'D.F32 R6.w, R7.x, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0}.y;\nPK64.U D0.x, c[1'
                b'];\nTEX.F R7.xyz, R6.zwzw, handle(D0.x), 2D;\nRCP.F32 R6.y, R6.y;\nMAD.F32 R6.w, -R3, R4, R6.y;\nMAD.F32 R6.'
                b'z, R3.w, R3.w, {-40462320, 0, 0, 0}.x;\nMAX.F R6.z, R6, {0, 0, 0, 0}.x;\nRSQ.F32 R6.z, R6.z;\nRCP.F32 R7.w,'
                b' R6.z;\nADD.F32 R6.z, -R3.w, {6420, 0, 0, 0}.x;\nADD.F32 R6.y, -R6.z, R7.w;\nMAX.F R6.w, R6, {0, 0, 0, 0}.x'
                b';\nADD.F32 R6.z, R6.w, -R6;\nADD.F32 R6.y, R6, {868.377747, 0, 0, 0}.x;\nDIV.F32 R6.y, R6.z, R6.y;\nMAD.F32 '
                b'R6.w, R7, {0.0011335793, 0.0078125, 0, 0}.x, {0.0011335793, 0.0078125, 0, 0}.y;\nMAD.F32 R6.z, R6.y, {0.99609'
                b'375, 0.001953125, 0, 0}.x, {0.99609375, 0.001953125, 0, 0}.y;\nTEX.F R8.xyz, R6.zwzw, handle(D0.x), 2D;\nR'
                b'CP.F32 R7.x, R7.x;\nRCP.F32 R7.z, R7.z;\nRCP.F32 R7.y, R7.y;\nMUL.F32 R7.xyz, R8, R7;\nMIN.F R13.xyz, R7, {1'
                b', 0, 0, 0}.x;\nENDIF;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nBRK (NE.x);\nENDREP;\nDP3.F32 R3.w, R3, -R5;\nMUL.F32'
                b' R9.xyz, R13, R9;\nMAX.F R4.w, -R3, {0.00100000005, 0, 0, 0}.x;\nLDC.F32X4 R7, buf3[16];\nADD.F32 R5.w, -R4'
                b', {1, 0, 0, 0}.x;\nLDC.F32X4 R8, buf3[0];\nMUL.F32 R7, fragment.attrib[0].y, R7;\nMAD.F32 R7, fragment.attr'
                b'ib[0].x, R8, R7;\nADD.F32 R8.xyz, R5, R2;\nLDC.F32X4 R11, buf3[32];\nMAD.F32 R7, fragment.attrib[0].z, R11,'
                b' R7;\nDP3.F32 R2.w, R8, R8;\nLDC.F32X4 R11, buf3[48];\nADD.F32 R7, R7, R11;\nDIV.F32 R7.xyz, R7, R7.w;\nRSQ.F'
                b'32 R2.w, R2.w;\nMUL.F32 R8.xyz, R2.w, R8;\nDP3.F32 R2.w, R3, R8;\nLDC.S32 R15.x, buf3[108];\nSLT.S R8.w, {1,'
                b' 0, 0, 0}.x, R15.x;\nMOV.U.CC RC.x, -R8.w;\nDP3.F32 R6.z, R5, R8;\nMAX.F R6.y, c[6].x, {0.0399999991, 0, 0,'
                b' 0}.x;\nADD.F32 R8.xyz, R4, -R6.y;\nMAD.F32 R8.xyz, R8, c[8].x, R6.y;\nPOW.F32 R5.w, R5.w, {5, 0, 0, 0}.x;\n'
                b'MAD.F32 R11.xyz, -R8, R5.w, R5.w;\nMUL.F32 R0.xyz, R13, R0;\nLDC.F32X4 R12.xyz, buf3[96];\nMUL.F32 R0.xyz, '
                b'R0, R12;\nMUL.F32 R12.xyz, R3, R3.w;\nPK64.U D0.x, c[17];\nDP3.F32 R3.w, R3, R2;\nTXQ R13.xy, {0, 0, 0, 0}, '
                b'handle(D0.x), 2D;\nMAX.F R5.w, R6.z, {0.00100000005, 0, 0, 0}.x;\nI2F.S R6.zw, R13.xyxy;\nRCP.F32 R14.w, R6'
                b'.w;\nRCP.F32 R14.x, R6.z;\nMOV.F R13.y, R14.w;\nMOV.F R13.x, R14;\nMAD.F32 R7.xyz, R7, {0.5, 0, 0, 0}.x, {0.'
                b'5, 0, 0, 0}.x;\nMAX.F R2.w, R2, {0.00100000005, 0, 0, 0}.x;\nADD.F32 R11.xyz, R8, R11;\nMUL.F32 R9.xyz, R9,'
                b' {0.318309873, 0, 0, 0}.x;\nMUL.F32 R0.xyz, R0, {0.318309873, 0, 0, 0}.x;\nMAD.F32 R12.xyz, -R12, {2, 0, 0'
                b', 0}.x, -R5;\nMAX.F R6.y, R3.w, {0, 0, 0, 0}.x;\nMOV.F R13.zw, R13.xyxy;\nMAX.F.SAT R1.w, R1, {0.0500000007'
                b', 0, 0, 0}.x;\nMOV.F R14.y, {0, 0, 0, 0}.x;\nMOV.F R14.z, {0, 0, 0, 0}.x;\nMOV.F R7.w, {0, 0, 0, 0}.x;\nIF N'
                b'E.x;\nMUL.F32 R13.zw, R13, {4, 0, 0, 0}.x;\nELSE;\nMOV.F R13.zw, {0, 0, 0, 0}.x;\nENDIF;\nMOV.S R8.w, {0, 0, '
                b'0, 0}.x;\nREP.S ;\nLDC.S32 R15.x, buf3[108];\nSGE.S.CC HC.x, R8.w, R15;\nBRK (NE.x);\nMOD.S R9.w, R8, {64, 0,'
                b' 0, 0}.x;\nMOV.S R9.w, R9;\nMOV.F R15.xy, lmem0[R9.w].xyzw;\nMAD.F32 R15.xy, R15, R13.zwzw, R7;\nSLE.F32 R11'
                b'.w, R15.x, {1, 0, 0, 0}.x;\nSLE.F32 R12.w, {0, 0, 0, 0}.x, R15.x;\nMUL.F32 R15.zw, R15.xyxy, R6;\nSLE.F32 R'
                b'9.w, {0, 0, 0, 0}.x, R15.y;\nTRUNC.U R11.w, R11;\nTRUNC.U R12.w, R12;\nAND.U R12.w, R12, R11;\nTRUNC.U R11.w'
                b', R9;\nSLE.F32 R9.w, R15.y, {1, 0, 0, 0}.x;\nTRUNC.U R9.w, R9;\nAND.U R11.w, R12, R11;\nAND.U R11.w, R11, R9'
                b';\nMOV.F R16.xy, R15;\nMOV.F R16.z, {0, 0, 0, 0}.x;\nPK64.U D0.x, c[17];\nTXL.F R17.x, R16.xyzz, handle(D0.x'
                b'), 2D;\nSLT.F32 R9.w, R17.x, {1, 0, 0, 0}.x;\nTRUNC.U R9.w, R9;\nAND.U.CC HC.x, R11.w, R9.w;\nFRC.F32 R15.zw'
                b', R15;\nIF NE.x;\nLDC.F32 R16.x, buf3[92];\nMOV.F.SAT R9.w, R3;\nMAD.F32 R9.w, -R9, R16.x, R16.x;\nADD.F32 R1'
                b'1.w, R7.z, -R17.x;\nADD.F32 R9.w, R11, -R9;\nLDC.F32 R16.x, buf3[76];\nMUL.F32 R9.w, -R16.x, R9;\nMUL.F32 R9'
                b'.w, R9, {1.44269502, 0, 0, 0}.x;\nEX2.F32.SAT R17.y, R9.w;\nELSE;\nMOV.F R17.y, {1, 0, 0, 0}.x;\nENDIF;\nADD.'
                b'F32 R16.xy, R15, R14;\nSLE.F32 R9.w, {0, 0, 0, 0}.x, R16.y;\nSLE.F32 R11.w, R16.x, {1, 0, 0, 0}.x;\nSLE.F32'
                b' R12.w, {0, 0, 0, 0}.x, R16.x;\nTRUNC.U R12.w, R12;\nTRUNC.U R11.w, R11;\nAND.U R11.w, R12, R11;\nTRUNC.U R9'
                b'.w, R9;\nSLE.F32 R12.w, R16.y, {1, 0, 0, 0}.x;\nAND.U R9.w, R11, R9;\nTRUNC.U R12.w, R12;\nMOV.F R16.z, {0, '
                b'0, 0, 0}.x;\nPK64.U D0.x, c[17];\nTXL.F R17.x, R16.xyzz, handle(D0.x), 2D;\nSLT.F32 R11.w, R17.x, {1, 0, 0,'
                b' 0}.x;\nTRUNC.U R11.w, R11;\nAND.U R9.w, R9, R12;\nAND.U.CC HC.x, R9.w, R11.w;\nIF NE.x;\nLDC.F32 R16.x, buf3'
                b'[92];\nMOV.F.SAT R9.w, R3;\nMAD.F32 R9.w, -R9, R16.x, R16.x;\nADD.F32 R11.w, R7.z, -R17.x;\nADD.F32 R9.w, R1'
                b'1, -R9;\nLDC.F32 R16.x, buf3[76];\nMUL.F32 R9.w, -R16.x, R9;\nMUL.F32 R9.w, R9, {1.44269502, 0, 0, 0}.x;\nEX'
                b'2.F32.SAT R17.z, R9.w;\nELSE;\nMOV.F R17.z, {1, 0, 0, 0}.x;\nENDIF;\nADD.F32 R16.xy, R15, R14.zwzw;\nSLE.F32 '
                b'R9.w, {0, 0, 0, 0}.x, R16.y;\nSLE.F32 R12.w, R16.x, {1, 0, 0, 0}.x;\nSLE.F32 R11.w, {0, 0, 0, 0}.x, R16.x;'
                b'\nTRUNC.U R12.w, R12;\nTRUNC.U R11.w, R11;\nAND.U R11.w, R11, R12;\nTRUNC.U R9.w, R9;\nSLE.F32 R12.w, R16.y, '
                b'{1, 0, 0, 0}.x;\nAND.U R9.w, R11, R9;\nTRUNC.U R12.w, R12;\nMOV.F R16.z, {0, 0, 0, 0}.x;\nPK64.U D0.x, c[17]'
                b';\nTXL.F R17.x, R16.xyzz, handle(D0.x), 2D;\nSLT.F32 R11.w, R17.x, {1, 0, 0, 0}.x;\nTRUNC.U R11.w, R11;\nAND'
                b'.U R9.w, R9, R12;\nAND.U.CC HC.x, R9.w, R11.w;\nIF NE.x;\nLDC.F32 R16.x, buf3[92];\nMOV.F.SAT R9.w, R3;\nMAD.'
                b'F32 R9.w, -R9, R16.x, R16.x;\nADD.F32 R11.w, R7.z, -R17.x;\nADD.F32 R9.w, R11, -R9;\nLDC.F32 R16.x, buf3[76'
                b'];\nMUL.F32 R9.w, -R16.x, R9;\nMUL.F32 R9.w, R9, {1.44269502, 0, 0, 0}.x;\nEX2.F32.SAT R17.w, R9.w;\nELSE;\nM'
                b'OV.F R17.w, {1, 0, 0, 0}.x;\nENDIF;\nADD.F32 R16.xy, R15, R13;\nSLE.F32 R9.w, {0, 0, 0, 0}.x, R16.y;\nSLE.F3'
                b'2 R11.w, R16.x, {1, 0, 0, 0}.x;\nSLE.F32 R12.w, {0, 0, 0, 0}.x, R16.x;\nTRUNC.U R12.w, R12;\nTRUNC.U R11.w,'
                b' R11;\nAND.U R11.w, R12, R11;\nTRUNC.U R9.w, R9;\nSLE.F32 R12.w, R16.y, {1, 0, 0, 0}.x;\nAND.U R9.w, R11, R9'
                b';\nTRUNC.U R12.w, R12;\nMOV.F R16.z, {0, 0, 0, 0}.x;\nPK64.U D0.x, c[17];\nTXL.F R17.x, R16.xyzz, handle(D0.'
                b'x), 2D;\nSLT.F32 R11.w, R17.x, {1, 0, 0, 0}.x;\nTRUNC.U R11.w, R11;\nAND.U R9.w, R9, R12;\nAND.U.CC HC.x, R9'
                b'.w, R11.w;\nIF NE.x;\nLDC.F32 R15.x, buf3[92];\nMOV.F.SAT R9.w, R3;\nMAD.F32 R9.w, -R9, R15.x, R15.x;\nADD.F3'
                b'2 R11.w, R7.z, -R17.x;\nADD.F32 R9.w, R11, -R9;\nLDC.F32 R15.x, buf3[76];\nMUL.F32 R9.w, -R15.x, R9;\nMUL.F3'
                b'2 R9.w, R9, {1.44269502, 0, 0, 0}.x;\nEX2.F32.SAT R17.x, R9.w;\nELSE;\nMOV.F R17.x, {1, 0, 0, 0};\nENDIF;\nAD'
                b'D.F32 R9.w, R17.z, -R17.y;\nMAD.F32 R11.w, R15.z, R9, R17.y;\nADD.F32 R12.w, R17.x, -R17;\nMAD.F32 R9.w, R1'
                b'5.z, R12, R17;\nADD.F32 R9.w, R9, -R11;\nMAD.F32 R9.w, R15, R9, R11;\nADD.F32 R7.w, R7, R9;\nADD.S R8.w, R8,'
                b' {1, 0, 0, 0}.x;\nENDREP;\nMAD.F32 R14, R1.w, {-1, -0.0274999999, -0.572000027, 0.0219999999}, {1, 0.04250'
                b'00004, 1.03999996, -0.0399999991};\nMOV.F R13.y, -R3;\nMOV.F R13.xz, R3;\nPK64.U D0.x, c[20];\nMOV.F R13.w, '
                b'{8, 0, 0, 0}.x;\nTXL.F R7.xyz, R13, handle(D0.x), CUBE;\nADD.F32 R13.xyz, R9, -R7;\nMAD.F32 R13.xyz, R13, {'
                b'0.5, 0, 0, 0}.x, R7;\nDP3.F32 R3.w, R13, R13;\nRSQ.F32 R3.w, R3.w;\nMUL.F32 R13.xyz, R3.w, R13;\nMUL.F32 R3.'
                b'w, R4, {-9.27999973, 0, 0, 0}.x;\nEX2.F32 R3.w, R3.w;\nMUL.F32 R6.z, R14.x, R14.x;\nMIN.F R6.z, R6, R3.w;\nM'
                b'AD.F32 R6.z, R6, R14.x, R14.y;\nDP3.F32 R3.w, R9, R9;\nRSQ.F32 R3.w, R3.w;\nDIV.F32 R9.xyz, R13, R3.w;\nMAD.'
                b'F32.SAT R6.zw, R6.z, {-1.03999996, 1.03999996, 0, 0}.xyxy, R14;\nLDC.S32 R14.x, buf3[108];\nI2F.S R3.w, R1'
                b'4.x;\nDIV.F32.SAT R3.w, R7, R3.w;\nMAX.F R9.xyz, R3.w, R9;\nMAD.F32 R13.xyz, R11, R6.z, R6.w;\nMOV.F R12.y, '
                b'-R12;\nMUL.F32 R12.w, R1, {8, 0, 0, 0}.x;\nTXL.F R12.xyz, R12, handle(D0.x), CUBE;\nMUL.F32 R12.xyz, R13, R'
                b'12;\nMUL.F32 R15.xyz, R9, R12;\nLDC.U32 R12.x, buf0[8];\nSNE.U.CC HC.x, R12, {0, 0, 0, 0};\nMUL.F32 R14.xyz,'
                b' R9, R7;\nIF NE.x;\nMUL.F32 R7.xyz, R10, R13;\nMAD.F32 R7.xyz, R7, R9, -R15;\nMAD.F32 R15.xyz, R10.w, R7, R1'
                b'5;\nENDIF;\nMAD.F32 R2.xyz, -R3, R6.y, R2;\nMAD.F32 R7.xyz, -R3, R4.w, R5;\nDP3.F32 R3.w, R2, R2;\nDP3.F32 R6'
                b'.z, R7, R7;\nRSQ.F32 R3.w, R3.w;\nRSQ.F32 R6.z, R6.z;\nSLT.F32 R6.w, R6.y, {0, 0, 0, 0}.x;\nTRUNC.U R6.w, R6'
                b';\nMUL.F32 R2.xyz, R3.w, R2;\nMUL.F32 R7.xyz, R6.z, R7;\nDP3.F32 R2.x, R7, R2;\nADD.F32 R2.y, R1.w, {0.09000'
                b'00036, 0, 0, 0}.x;\nSLT.F32 R2.z, R4.w, {0, 0, 0, 0}.x;\nTRUNC.U R2.z, R2;\nI2F.U R2.z, R2;\nI2F.U R6.w, R6;'
                b'\nMAX.F R2.x, R2, {0, 0, 0, 0};\nDIV.F32 R2.y, R1.w, R2.y;\nMUL.F32 R7.x, R2.y, R2;\nMAD.F32 R2.y, |R6|, {-0'
                b'.0187292993, 0.0742610022, 0, 0}.x, {-0.0187292993, 0.0742610022, 0, 0};\nMAD.F32 R3.w, |R6.y|, R2.y, {-0.212'
                b'114394, 0, 0, 0}.x;\nMAD.F32 R6.z, |R6.y|, R3.w, {1.57072878, 0, 0, 0}.x;\nMAD.F32 R2.x, |R4.w|, {-0.01872'
                b'92993, 0.0742610022, 0, 0}, {-0.0187292993, 0.0742610022, 0, 0}.y;\nMAD.F32 R2.x, |R4.w|, R2, {-0.212114394, '
                b'0, 0, 0};\nMAD.F32 R2.y, |R4.w|, R2.x, {1.57072878, 0, 0, 0}.x;\nADD.F32 R2.x, -|R4.w|, {1, 0, 0, 0};\nRSQ.'
                b'F32 R2.x, R2.x;\nDIV.F32 R2.y, R2, R2.x;\nMUL.F32 R2.x, R2.z, R2.y;\nMAD.F32 R2.x, -R2, {2, 0, 0, 0}, R2.y;'
                b'\nADD.F32 R3.w, -|R6.y|, {1, 0, 0, 0}.x;\nRSQ.F32 R3.w, R3.w;\nDIV.F32 R6.z, R6, R3.w;\nMUL.F32 R3.w, R6, R6'
                b'.z;\nMAD.F32 R3.w, -R3, {2, 0, 0, 0}.x, R6.z;\nMAD.F32 R2.y, R2.z, {3.14159274, 0, 0, 0}.x, R2.x;\nMAD.F32 '
                b'R2.z, R6.w, {3.14159274, 0, 0, 0}.x, R3.w;\nMAX.F R2.x, R2.z, R2.y;\nMIN.F R2.y, R2.z, R2;\nSIN.F32 R2.z, R'
                b'2.x;\nCOS.F32 R2.x, R2.y;\nSIN.F32 R2.y, R2.y;\nDIV.F32 R2.x, R2.y, R2.x;\nMUL.F32 R2.y, R7.x, R2.z;\nMUL.F32'
                b' R2.x, R2.y, R2;\nADD.F32 R2.y, R1.w, {0.330000013, 0, 0, 0}.x;\nDIV.F32 R2.y, R1.w, R2.y;\nMUL.F32 R2.x, R'
                b'2, {0.449999988, 0, 0, 0};\nMAD.F32 R2.x, -R2.y, {0.5, 0, 0, 0}, R2;\nADD.F32 R2.y, -R5.w, {1, 0, 0, 0}.x;'
                b'\nMAD.F32 R3.w, R2.x, R6.y, R6.y;\nPOW.F32 R2.x, R2.y, {5, 0, 0, 0}.x;\nMAD.F32 R2.xyz, -R8, R2.x, R2.x;\nAD'
                b'D.F32 R5.w, R1, {1, 0, 0, 0}.x;\nMUL.F32 R5.w, R5, R5;\nMUL.F32 R6.z, R5.w, {0.125, 0, 0, 0}.x;\nMUL.F32 R5'
                b'.w, R1, R1;\nMUL.F32 R7.x, R5.w, R5.w;\nMUL.F32 R2.w, R2, R2;\nMAD.F32 R6.w, R7.x, R2, -R2;\nMAD.F32 R2.w, R'
                b'4, -R6.z, R4;\nMAD.F32 R5.w, R6.y, -R6.z, R6.y;\nADD.F32 R5.w, R5, R6.z;\nADD.F32 R2.w, R6.z, R2;\nADD.F32 R'
                b'6.z, R6.w, {1, 0, 0, 0}.x;\nMUL.F32 R6.z, R6, R6;\nADD.F32 R2.xyz, R8, R2;\nDIV.F32 R2.w, R4, R2.w;\nDIV.F32'
                b' R5.w, R6.y, R5.w;\nMUL.F32 R5.w, R5, R2;\nDIV.F32 R6.z, R7.x, R6.z;\nMUL.F32 R2.w, R4, R6.y;\nMUL.F32 R2.w,'
                b' R2, {4, 0, 0, 0}.x;\nMUL.F32 R5.w, R6.z, R5;\nMAX.F R2.w, R2, {0.00100000005, 0, 0, 0}.x;\nMUL.F32 R7.xyz,'
                b' R2, R5.w;\nDIV.F32 R7.xyz, R7, R2.w;\nMUL.F32 R2.w, R3, R6.y;\nMUL.F32 R8.xyz, R2.w, R0;\nMUL.F32 R7.xyz, R'
                b'6.y, R7;\nMUL.F32 R0.xyz, R0, R7;\nMUL.F32 R7.xyz, R8, R9;\nMUL.F32 R0.xyz, R9, R0;\nMAD.F32 R14.xyz, R7, {0'
                b'.318309873, 0, 0, 0}.x, R14;\nMAD.F32 R15.xyz, R0, {0.318309873, 0, 0, 0}.x, R15;\nMOV.S R2.w, {0, 0, 0, 0'
                b'}.x;\nREP.S {10, 0, 0, 0};\nMUL.S R0.x, R2.w, {32, 0, 0, 0};\nMOV.S R0.x, R0;\nLDC.F32 R0.x, buf4[R0.x + 28]'
                b';\nSNE.F32 R0.x, {1, 0, 0, 0}, R0;\nTRUNC.U.CC HC.x, R0;\nMOV.F H0.x, {0, 0, 0, 0};\nIF NE.x;\nMOV.U.CC RC.x,'
                b' {1, 0, 0, 0};\nBRK (NE.x);\nENDIF;\nMUL.S R0.x, R2.w, {32, 0, 0, 0};\nMOV.S R6.y, R0.x;\nLDC.F32X4 R0.xyz, b'
                b'uf4[R6.y + 16];\nADD.F32 R0.xyz, R0, -fragment.attrib[0];\nDP3.F32 R3.w, R0, R0;\nRSQ.F32 R3.w, R3.w;\nRCP.F'
                b'32 R5.w, R3.w;\nLDC.F32 R7.x, buf4[R6.y + 12];\nSLT.F32 R3.w, R7.x, R5;\nTRUNC.U.CC HC.x, R3.w;\nIF NE.x;\nMO'
                b'V.F H0.x, {1, 0, 0, 0};\nENDIF;\nMOV.F H0.y, {0, 0, 0, 0}.x;\nSEQ.F H0.x, H0, H0.y;\nTRUNC.U.CC HC.x, H0;\nIF'
                b' NE.x;\nDIV.F32 R0.xyz, R0, R5.w;\nDP3.F32 R3.w, R3, R0;\nMAX.F R3.w, R3, {0.00999999978, 0, 0, 0}.x;\nMAD.F'
                b'32 R8.xyz, -R3, R3.w, R0;\nMAD.F32 R9.xyz, -R3, R4.w, R5;\nDP3.F32 R6.y, R8, R8;\nDP3.F32 R6.z, R9, R9;\nRSQ'
                b'.F32 R6.y, R6.y;\nRSQ.F32 R6.z, R6.z;\nMUL.F32 R9.xyz, R6.z, R9;\nMUL.F32 R8.xyz, R6.y, R8;\nDP3.F32 R6.y, R'
                b'9, R8;\nADD.F32 R6.z, R1.w, {0.0900000036, 0, 0, 0}.x;\nSLT.F32 R6.w, R4, {0, 0, 0, 0}.x;\nTRUNC.U R6.w, R6'
                b';\nI2F.U R6.w, R6;\nMAX.F R6.y, R6, {0, 0, 0, 0}.x;\nDIV.F32 R6.z, R1.w, R6.z;\nMUL.F32 R8.x, R6.z, R6.y;\nMA'
                b'D.F32 R6.z, |R3.w|, {-0.0187292993, 0.0742610022, 0, 0}.x, {-0.0187292993, 0.0742610022, 0, 0}.y;\nADD.F32 R6'
                b'.y, -|R3.w|, {1, 0, 0, 0}.x;\nMAD.F32 R6.z, |R3.w|, R6, {-0.212114394, 0, 0, 0}.x;\nRSQ.F32 R6.y, R6.y;\nMA'
                b'D.F32 R6.z, |R3.w|, R6, {1.57072878, 0, 0, 0}.x;\nDIV.F32 R7.z, R6, R6.y;\nSLT.F32 R6.z, R3.w, {0, 0, 0, 0'
                b'}.x;\nTRUNC.U R6.z, R6;\nI2F.U R7.w, R6.z;\nMUL.F32 R7.y, R7.w, R7.z;\nMAD.F32 R6.y, |R4.w|, {-0.0187292993,'
                b' 0.0742610022, 0, 0}.x, {-0.0187292993, 0.0742610022, 0, 0};\nMAD.F32 R6.y, |R4.w|, R6, {-0.212114394, 0, 0, '
                b'0}.x;\nMAD.F32 R6.z, |R4.w|, R6.y, {1.57072878, 0, 0, 0}.x;\nADD.F32 R6.y, -|R4.w|, {1, 0, 0, 0}.x;\nRSQ.F3'
                b'2 R6.y, R6.y;\nDIV.F32 R6.z, R6, R6.y;\nMUL.F32 R6.y, R6.w, R6.z;\nMAD.F32 R6.y, -R6, {2, 0, 0, 0}.x, R6.z;'
                b'\nMAD.F32 R6.z, R6.w, {3.14159274, 0, 0, 0}.x, R6.y;\nMAD.F32 R7.y, -R7, {2, 0, 0, 0}.x, R7.z;\nMAD.F32 R6.'
                b'w, R7, {3.14159274, 0, 0, 0}.x, R7.y;\nMAX.F R6.y, R6.w, R6.z;\nMIN.F R6.z, R6.w, R6;\nSIN.F32 R6.w, R6.y;\n'
                b'COS.F32 R6.y, R6.z;\nSIN.F32 R6.z, R6.z;\nDIV.F32 R6.y, R6.z, R6.y;\nMUL.F32 R6.z, R8.x, R6.w;\nMUL.F32 R6.y'
                b', R6.z, R6;\nADD.F32 R6.w, R1, {0.330000013, 0, 0, 0}.x;\nADD.F32 R0.xyz, R5, R0;\nMUL.F32 R6.z, R6.y, {0.4'
                b'49999988, 0, 0, 0}.x;\nDP3.F32 R6.y, R0, R0;\nRSQ.F32 R6.y, R6.y;\nMUL.F32 R0.xyz, R6.y, R0;\nDP3.F32 R0.x, '
                b'R3, R0;\nDIV.F32 R6.w, R1, R6.w;\nMAD.F32 R6.z, -R6.w, {0.5, 0, 0, 0}.x, R6;\nMAD.F32 R6.y, R6.z, R3.w, R3.'
                b'w;\nMUL.F32 R0.y, R1.w, R1.w;\nMAX.F R0.x, R0, {0.00999999978, 0, 0, 0};\nMUL.F32 R6.z, R0.y, R0.y;\nMUL.F32'
                b' R0.x, R0, R0;\nMAD.F32 R0.y, R6.z, R0.x, -R0.x;\nADD.F32 R0.x, R1.w, {1, 0, 0, 0};\nMUL.F32 R0.x, R0, R0;\n'
                b'MUL.F32 R0.z, R0.x, {0.125, 0, 0, 0}.x;\nMAD.F32 R0.x, R4.w, -R0.z, R4.w;\nADD.F32 R0.y, R0, {1, 0, 0, 0}.'
                b'x;\nMUL.F32 R0.y, R0, R0;\nDIV.F32 R6.z, R6, R0.y;\nMAD.F32 R0.y, R3.w, -R0.z, R3.w;\nADD.F32 R0.y, R0, R0.z'
                b';\nADD.F32 R0.x, R0.z, R0;\nDIV.F32 R0.z, R3.w, R0.y;\nDIV.F32 R0.y, R4.w, R0.x;\nMUL.F32 R0.y, R0.z, R0;\nMU'
                b'L.F32 R0.x, R4.w, R3.w;\nMUL.F32 R0.x, R0, {4, 0, 0, 0};\nMUL.F32 R0.y, R6.z, R0;\nMAX.F R6.z, R0.x, {0.001'
                b'00000005, 0, 0, 0}.x;\nMUL.F32 R0.xyz, R0.y, R2;\nDIV.F32 R0.xyz, R0, R6.z;\nRCP.F32 R6.z, R7.x;\nMAD.F32.SA'
                b'T R5.w, -R5, R6.z, {1, 0, 0, 0}.x;\nMUL.S R6.w, R2, {32, 0, 0, 0}.x;\nMOV.S R6.z, R6.w;\nMUL.F32 R6.y, R6, '
                b'R3.w;\nMUL.F32 R5.w, R5, R5;\nLDC.F32X4 R7.xyz, buf4[R6.z];\nMUL.F32 R7.xyz, R7, R5.w;\nMUL.F32 R0.xyz, R3.w'
                b', R0;\nMUL.F32 R8.xyz, R6.y, R7;\nMUL.F32 R0.xyz, R7, R0;\nMAD.F32 R14.xyz, R8, {0.318309873, 0, 0, 0}.x, R'
                b'14;\nMAD.F32 R15.xyz, R0, {0.318309873, 0, 0, 0}.x, R15;\nENDIF;\nADD.S R2.w, R2, {1, 0, 0, 0}.x;\nENDREP;\nA'
                b'DD.F32 R0.x, -c[8], {1, 0, 0, 0};\nMAD.F32.SAT R2.xyz, -R11, R0.x, R0.x;\nMAD.F32 R0.xyz, R4, R15, -R15;\nM'
                b'UL.F32 R3.xyz, R4, R2;\nMAD.F32 R2.xyz, R0, c[8].x, R15;\nLDC.U32 R0.x, buf0[12];\nSNE.U.CC HC.x, R0, {0, 0'
                b', 0, 0};\nMAD.F32 R2.xyz, R14, R3, R2;\nIF NE.x;\nMUL.F32 R2.xyz, R2, R6.x;\nENDIF;\nADD.F32 R0.xyz, R2, '
                b'R1;\nMAX.F result_color0.xyz, R0, {0, 0, 0, 0}.x;\nMOV.F result_color0.w, R0;\nENDIF;\nEND\n\x18'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00 \x00\x00\x00\x06p\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01'
                b'\x00\x02\x00\x0c\x00\r\x00\x0e\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
                b'\x01\x01\x01\x01\x01\x01\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q\rtq\x0eb.',
 'binary_format': c_uint(36385),
 'include_files': {'Resource/Shaders/PCFKernels.glsl': '2019-04-26 22:19:04.792401',
                   'Resource/Shaders/default_material.glsl': '2019-04-26 22:19:04.792401',
                   'Resource/Shaders/default_vs.glsl': '2020-01-10 03:12:49.711608',
                   'Resource/Shaders/precomputed_atmosphere/atmosphere_predefine.glsl': '2020-01-03 18:15:21.863407',
                   'Resource/Shaders/precomputed_atmosphere/definitions.glsl': '2019-04-26 22:19:04.792401',
                   'Resource/Shaders/scene_constants.glsl': '2019-12-12 02:51:55.224117',
                   'Resource/Shaders/shading.glsl': '2020-01-03 23:29:41.482647',
                   'Resource/Shaders/utility.glsl': '2019-04-26 22:19:04.792401'},
 'macros': OrderedDict([('TRANSPARENT_MATERIAL', 0), ('SKELETAL', 1), ('COMBINED_SCATTERING_TEXTURES', 0)]),
 'material_components': [('float', 'brightness'),
                         ('float', 'reflectance'),
                         ('float', 'roughness'),
                         ('float', 'metalicness'),
                         ('float', 'normal_intensity'),
                         ('vec2', 'uv_tiling'),
                         ('vec4', 'emissive_color'),
                         ('vec4', 'diffuse_color'),
                         ('sampler2D', 'texture_diffuse'),
                         ('sampler2D', 'texture_material'),
                         ('sampler2D', 'texture_normal'),
                         ('float', 'brightness'),
                         ('float', 'reflectance'),
                         ('float', 'roughness'),
                         ('float', 'metalicness'),
                         ('float', 'normal_intensity'),
                         ('vec2', 'uv_tiling'),
                         ('vec4', 'emissive_color'),
                         ('vec4', 'diffuse_color'),
                         ('sampler2D', 'texture_diffuse'),
                         ('sampler2D', 'texture_material'),
                         ('sampler2D', 'texture_normal'),
                         ('float', 'brightness'),
                         ('float', 'reflectance'),
                         ('float', 'roughness'),
                         ('float', 'metalicness'),
                         ('float', 'normal_intensity'),
                         ('vec2', 'uv_tiling'),
                         ('vec4', 'emissive_color'),
                         ('vec4', 'diffuse_color'),
                         ('sampler2D', 'texture_diffuse'),
                         ('sampler2D', 'texture_material'),
                         ('sampler2D', 'texture_normal'),
                         ('float', 'brightness'),
                         ('float', 'reflectance'),
                         ('float', 'roughness'),
                         ('float', 'metalicness'),
                         ('float', 'normal_intensity'),
                         ('vec2', 'uv_tiling'),
                         ('vec4', 'emissive_color'),
                         ('vec4', 'diffuse_color'),
                         ('sampler2D', 'texture_diffuse'),
                         ('sampler2D', 'texture_material'),
                         ('sampler2D', 'texture_normal')],
 'shader_codes': {GL_FRAGMENT_SHADER: '#version 430 core\n'
                                      '# extension GL_EXT_texture_array : enable\n'
                                      '#define MATERIAL_COMPONENTS 1\n'
                                      '#define FRAGMENT_SHADER 1\n'
                                      '#define TRANSPARENT_MATERIAL 0\n'
                                      '#define SKELETAL 1\n'
                                      '#define COMBINED_SCATTERING_TEXTURES 0\n'
                                      '#if __VERSION__ >= 130\n'
                                      '#define texture2D texture\n'
                                      '#define texture2DLod textureLod\n'
                                      '#define texture2DGrad textureGrad\n'
                                      '#define texture2DArray texture\n'
                                      '#define texture2DArrayLod textureLod\n'
                                      '#define texture2DArrayGrad textureGrad\n'
                                      '#define texture3D texture\n'
                                      '#define texture3DLod textureLod\n'
                                      '#define texture3DGrad textureGrad\n'
                                      '#define textureCube texture\n'
                                      '#define textureCubeLod textureLod\n'
                                      '#define textureCubeGrad textureGrad\n'
                                      '#endif\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      'layout(std140, binding=0) uniform scene_constants\n'
                                      '{\n'
                                      '    float TIME;\n'
                                      '    float JITTER_FRAME;\n'
                                      '    bool RENDER_SSR;\n'
                                      '    bool RENDER_SSAO;\n'
                                      '    vec2 SCREEN_SIZE;\n'
                                      '    vec2 BACKBUFFER_SIZE;\n'
                                      '    vec2 MOUSE_POS;\n'
                                      '    float DELTA_TIME;\n'
                                      '    int SCENE_DUMMY_0;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=1) uniform view_constants\n'
                                      '{\n'
                                      '    mat4 VIEW;\n'
                                      '    mat4 INV_VIEW;\n'
                                      '    mat4 VIEW_ORIGIN;\n'
                                      '    mat4 INV_VIEW_ORIGIN;\n'
                                      '    mat4 PROJECTION;\n'
                                      '    mat4 INV_PROJECTION;\n'
                                      '    vec3 CAMERA_POSITION;\n'
                                      '    float VIEW_DUMMY_0;\n'
                                      '    vec2 NEAR_FAR;\n'
                                      '    vec2 JITTER_DELTA;\n'
                                      '    vec2 JITTER_OFFSET;\n'
                                      '    vec2 VIEWCONSTANTS_DUMMY0;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=2) uniform view_projection\n'
                                      '{\n'
                                      '    mat4 VIEW_PROJECTION;\n'
                                      '    mat4 PREV_VIEW_PROJECTION;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=3) uniform light_constants\n'
                                      '{\n'
                                      '    mat4 SHADOW_MATRIX;\n'
                                      '    vec3 LIGHT_POSITION;\n'
                                      '    float SHADOW_EXP;\n'
                                      '    vec3 LIGHT_DIRECTION;\n'
                                      '    float SHADOW_BIAS;\n'
                                      '    vec3 LIGHT_COLOR;\n'
                                      '    int SHADOW_SAMPLES;\n'
                                      '};\n'
                                      '\n'
                                      'const int MAX_POINT_LIGHTS = 10;\n'
                                      '\n'
                                      'struct POINT_LIGHT\n'
                                      '{\n'
                                      '    vec3 color;\n'
                                      '    float radius;\n'
                                      '    vec3 pos;\n'
                                      '    float render;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=4) uniform point_light_constants\n'
                                      '{\n'
                                      '    POINT_LIGHT POINT_LIGHTS[MAX_POINT_LIGHTS];\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      'layout(std140, binding=5) uniform particle_common\n'
                                      '{\n'
                                      '    vec3 PARTICLE_COLOR;\n'
                                      '    int PARTICLE_ALIGN_MODE;\n'
                                      '    ivec2 PARTICLE_CELL_COUNT;\n'
                                      '    int PARTICLE_BLEND_MODE;\n'
                                      '    int PARTICLE_COMMON_DUMMY_0;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=6) uniform particle_infos\n'
                                      '{\n'
                                      '    mat4 PARTICLE_PARENT_MATRIX;\n'
                                      '    vec2 PARTICLE_DELAY;\n'
                                      '    vec2 PARTICLE_LIFE_TIME;\n'
                                      '    vec3 PARTICLE_TRANSFORM_ROTATION_MIN;\n'
                                      '    float PARTICLE_FADE_IN;\n'
                                      '    vec3 PARTICLE_TRANSFORM_ROTATION_MAX;\n'
                                      '    float PARTICLE_FADE_OUT;\n'
                                      '    vec3 PARTICLE_TRANSFORM_SCALE_MIN;\n'
                                      '    float PARTICLE_OPACITY;\n'
                                      '    vec3 PARTICLE_TRANSFORM_SCALE_MAX;\n'
                                      '    bool PARTICLE_ENABLE_VECTOR_FIELD;\n'
                                      '    vec3 PARTICLE_VELOCITY_POSITION_MIN;\n'
                                      '    float PARTICLE_VECTOR_FIELD_STRENGTH;\n'
                                      '    vec3 PARTICLE_VELOCITY_POSITION_MAX;\n'
                                      '    float PARTICLE_VECTOR_FIELD_TIGHTNESS;\n'
                                      '    vec3 PARTICLE_VELOCITY_ROTATION_MIN;\n'
                                      '    uint PARTICLE_MAX_COUNT;\n'
                                      '    vec3 PARTICLE_VELOCITY_ROTATION_MAX;\n'
                                      '    uint PARTICLE_SPAWN_COUNT;\n'
                                      '    vec3 PARTICLE_VELOCITY_SCALE_MIN;\n'
                                      '    float PARTICLE_VELOCITY_STRETCH;\n'
                                      '    vec3 PARTICLE_VELOCITY_SCALE_MAX;\n'
                                      '    float PARTICLE_VELOCITY_ACCELERATION;\n'
                                      '    mat4 PARTICLE_VECTOR_FIELD_MATRIX;\n'
                                      '    mat4 PARTICLE_VECTOR_FIELD_INV_MATRIX;\n'
                                      '    vec3 PARTICLE_SPAWN_VOLUME_INFO;\n'
                                      '    uint PARTICLE_SPAWN_VOLUME_TYPE;\n'
                                      '    mat4 PARTICLE_SPAWN_VOLUME_MATRIX;\n'
                                      '    vec2 PARTICLE_VELOCITY_LIMIT;\n'
                                      '    float PARTICLE_FORCE_GRAVITY;\n'
                                      '    float PARTICLE_PLAY_SPEED;\n'
                                      '    uint PARTICLE_VELOCITY_TYPE;\n'
                                      '    float PARTICLE_FORCE_ELASTICITY;\n'
                                      '    float PARTICLE_FORCE_FRICTION;\n'
                                      '    uint PARTICLE_DUMMY_0;\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'const int BLEND = 0;\n'
                                      'const int ADDITIVE = 1;\n'
                                      'const int MULTIPLY = 2;\n'
                                      'const int SUBTRACT = 3;\n'
                                      '\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '\n'
                                      'const int MAX_BONES_PER_VERTEX = 4;\n'
                                      'const int MAX_BONES = 100;\n'
                                      '\n'
                                      'const float PI = 3.14159265358979323846;\n'
                                      'const float HALF_PI = PI * 0.5;\n'
                                      'const float TWO_PI = PI * 2.0;\n'
                                      'const float deg = PI / 180.0;\n'
                                      '\n'
                                      'const vec3 kSphereCenter = vec3(1.0, 1.0, -2.0);\n'
                                      'const float kSphereRadius = 1.0;\n'
                                      'const vec3 kSphereAlbedo = vec3(0.8);\n'
                                      'const vec3 kGroundAlbedo = vec3(0.0, 0.0, 0.04);\n'
                                      '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "utility.glsl"\n'
                                      '#ifndef UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                      '#define UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                      '\n'
                                      'const int FilterTypes_Box = 0;\n'
                                      'const int FilterTypes_Triangle = 1;\n'
                                      'const int FilterTypes_Gaussian = 2;\n'
                                      'const int FilterTypes_BlackmanHarris = 3;\n'
                                      'const int FilterTypes_Smoothstep = 4;\n'
                                      'const int FilterTypes_BSpline = 5;\n'
                                      'const int FilterTypes_CatmullRom = 6;\n'
                                      'const int FilterTypes_Mitchell = 7;\n'
                                      'const int FilterTypes_GeneralizedCubic = 8;\n'
                                      'const int FilterTypes_Sinc = 9;\n'
                                      '\n'
                                      '\n'
                                      'float FilterBox(in float x)\n'
                                      '{\n'
                                      '    return x <= 1.0 ? 1.0 : 0.0;\n'
                                      '}\n'
                                      '\n'
                                      'float FilterTriangle(in float x)\n'
                                      '{\n'
                                      '    return clamp(1.0f - x, 0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float FilterGaussian(in float x)\n'
                                      '{\n'
                                      '    const float sigma = 0.25;\n'
                                      '    const float g = 1.0f / sqrt(2.0f * 3.14159f * sigma * sigma);\n'
                                      '    return (g * exp(-(x * x) / (2 * sigma * sigma)));\n'
                                      '}\n'
                                      '\n'
                                      'float FilterCubic(in float x, in float B, in float C)\n'
                                      '{\n'
                                      '    float y = 0.0f;\n'
                                      '    float x2 = x * x;\n'
                                      '    float x3 = x * x * x;\n'
                                      '\n'
                                      '    if(x < 1)\n'
                                      '    {\n'
                                      '        y = (12 - 9 * B - 6 * C) * x3 + (-18 + 12 * B + 6 * C) * x2 + (6 - 2 * B);\n'
                                      '    }\n'
                                      '    else if(x <= 2)\n'
                                      '    {\n'
                                      '        y = (-B - 6 * C) * x3 + (6 * B + 30 * C) * x2 + (-12 * B - 48 * C) * x + (8 * B '
                                      '+ 24 * C);\n'
                                      '    }\n'
                                      '\n'
                                      '    return y / 6.0f;\n'
                                      '}\n'
                                      '\n'
                                      'float FilterSinc(in float x, in float filterRadius)\n'
                                      '{\n'
                                      '    float s;\n'
                                      '    x *= filterRadius * 2.0f;\n'
                                      '    if(x < 0.001f)\n'
                                      '        s = 1.0f;\n'
                                      '    else\n'
                                      '        s = sin(x * PI) / (x * PI);\n'
                                      '    return s;\n'
                                      '}\n'
                                      '\n'
                                      'float FilterBlackmanHarris(in float x)\n'
                                      '{\n'
                                      '    x = 1.0f - x;\n'
                                      '    const float a0 = 0.35875f;\n'
                                      '    const float a1 = 0.48829f;\n'
                                      '    const float a2 = 0.14128f;\n'
                                      '    const float a3 = 0.01168f;\n'
                                      '    return clamp(a0 - a1 * cos(PI * x) + a2 * cos(2 * PI * x) - a3 * cos(3 * PI * x), '
                                      '0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float FilterSmoothstep(in float x)\n'
                                      '{\n'
                                      '    return 1.0f - smoothstep(0.0f, 1.0f, x);\n'
                                      '}\n'
                                      '\n'
                                      'float Filter(in float x, in int filterType, in float filterRadius, in bool '
                                      'rescaleCubic)\n'
                                      '{\n'
                                      '    \n'
                                      '    \n'
                                      '    float cubicX = rescaleCubic ? x * 2.0f : x;\n'
                                      '\n'
                                      '    if(filterType == FilterTypes_Box)\n'
                                      '        return FilterBox(x);\n'
                                      '    else if(filterType == FilterTypes_Triangle)\n'
                                      '        return FilterTriangle(x);\n'
                                      '    else if(filterType == FilterTypes_Gaussian)\n'
                                      '        return FilterGaussian(x);\n'
                                      '    else if(filterType == FilterTypes_BlackmanHarris)\n'
                                      '        return FilterBlackmanHarris(x);\n'
                                      '    else if(filterType == FilterTypes_Smoothstep)\n'
                                      '        return FilterSmoothstep(x);\n'
                                      '    else if(filterType == FilterTypes_BSpline)\n'
                                      '        return FilterCubic(cubicX, 1.0, 0.0f);\n'
                                      '    else if(filterType == FilterTypes_CatmullRom)\n'
                                      '        return FilterCubic(cubicX, 0, 0.5f);\n'
                                      '    else if(filterType == FilterTypes_Mitchell)\n'
                                      '        return FilterCubic(cubicX, 1 / 3.0f, 1 / 3.0f);\n'
                                      '    else if(filterType == FilterTypes_GeneralizedCubic)\n'
                                      '        return FilterCubic(cubicX, 0.33, 0.33);\n'
                                      '    else if(filterType == FilterTypes_Sinc)\n'
                                      '        return FilterSinc(x, filterRadius);\n'
                                      '    else\n'
                                      '        return 1.0f;\n'
                                      '}\n'
                                      '\n'
                                      'float saturate(float value) { return clamp(value, 0.0, 1.0); }\n'
                                      'vec2 saturate(vec2 value) { return clamp(value, 0.0, 1.0); }\n'
                                      'vec3 saturate(vec3 value) { return clamp(value, 0.0, 1.0); }\n'
                                      'vec4 saturate(vec4 value) { return clamp(value, 0.0, 1.0); }\n'
                                      '\n'
                                      'float get_luminance(vec3 color)\n'
                                      '{\n'
                                      '    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float depth_to_linear_depth(float depth)\n'
                                      '{\n'
                                      '    const float zNear = NEAR_FAR.x;\n'
                                      '    const float zFar = NEAR_FAR.y;\n'
                                      '    \n'
                                      '    depth = depth * 2.0 - 1.0;\n'
                                      '    \n'
                                      '    return 2.0 * zNear * zFar / (zFar + zNear - depth * (zFar - zNear));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float linear_depth_to_depth(float linear_depth)\n'
                                      '{\n'
                                      '    const float zNear = NEAR_FAR.x;\n'
                                      '    const float zFar = NEAR_FAR.y;\n'
                                      '    \n'
                                      '    float depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                      '    \n'
                                      '    return depth * 0.5 + 0.5;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 linear_depth_to_depth(vec4 linear_depth)\n'
                                      '{\n'
                                      '    const vec4 zNear = NEAR_FAR.xxxx;\n'
                                      '    const vec4 zFar = NEAR_FAR.yyyy;\n'
                                      '    vec4 depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                      '    return depth * 0.5 + 0.5;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 depth_to_relative_world(vec2 tex_coord, float depth)\n'
                                      '{\n'
                                      '    vec4 clip_coord = vec4(tex_coord * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                      '    vec4 relative_pos = INV_VIEW_ORIGIN * INV_PROJECTION * clip_coord;\n'
                                      '    relative_pos /= relative_pos.w;\n'
                                      '    return relative_pos;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 linear_depth_to_relative_world(vec2 tex_coord, float linear_depth)\n'
                                      '{\n'
                                      '    \n'
                                      '    float depth = linear_depth_to_depth(linear_depth);\n'
                                      '\n'
                                      '    \n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    return depth_to_relative_world(tex_coord, depth);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'float PseudoRandom(vec2 xy)\n'
                                      '{\n'
                                      '    vec2 pos = fract(xy / 128.0f) * 128.0f + vec2(-64.340622f, -72.465622f);\n'
                                      '\n'
                                      '    \n'
                                      '    return fract(dot(pos.xyx * pos.xyy, vec3(20.390625f, 60.703125f, 2.4281209f)));\n'
                                      '}\n'
                                      '\n'
                                      'float rand(vec2 co){\n'
                                      '    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n'
                                      '}\n'
                                      '\n'
                                      'float rand3(vec3 uvw, float scale)\n'
                                      '{\n'
                                      '\treturn fract(sin(dot(uvw, vec3(12.9898, 78.233, 45.164))) * 43758.5453123);\n'
                                      '}\n'
                                      '\n'
                                      'float rand4(vec4 seed4){\n'
                                      '    return fract(sin(dot(seed4, vec4(12.9898, 78.233, 45.164, 94.673))) * '
                                      '43758.5453123);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec4 generate_random(float random_seed)\n'
                                      '{\n'
                                      '    vec4 random_factor;\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_seed));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                      '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                      '    return random_factor;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random1(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.w = random_factor.x;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random2(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.w = random_factor.y;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random3(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                      '    random_factor.w = random_factor.z;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random4(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                      '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 invert_y(vec3 vector)\n'
                                      '{\n'
                                      '    return vec3(vector.x, -vector.y, vector.z);\n'
                                      '}\n'
                                      '\n'
                                      'float safe_atan(float y, float x)\n'
                                      '{\n'
                                      '    return mod(atan(y, x), TWO_PI);\n'
                                      '}\n'
                                      '\n'
                                      'vec2 safe_normalize(vec2 vector)\n'
                                      '{\n'
                                      '    float dist = length(vector);\n'
                                      '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 safe_normalize(vec3 vector)\n'
                                      '{\n'
                                      '    float dist = length(vector);\n'
                                      '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                      '}\n'
                                      '\n'
                                      'vec4 safe_normalize(vec4 vector)\n'
                                      '{\n'
                                      '    float dist = length(vector);\n'
                                      '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                      '}\n'
                                      '#endif /* UUID_e77aaefb_1a04_384d_928f_4a7739be43fb */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "shading.glsl"\n'
                                      '#ifndef UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8\n'
                                      '#define UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "PCFKernels.glsl"\n'
                                      '#ifndef UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                      '#define UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'const int PoissonSampleCount = 64;\n'
                                      '\n'
                                      '\n'
                                      'const vec2 PoissonSamples[PoissonSampleCount] =\n'
                                      '{\n'
                                      '    vec2(-0.5119625f, -0.4827938f),\n'
                                      '    vec2(-0.2171264f, -0.4768726f),\n'
                                      '    vec2(-0.7552931f, -0.2426507f),\n'
                                      '    vec2(-0.7136765f, -0.4496614f),\n'
                                      '    vec2(-0.5938849f, -0.6895654f),\n'
                                      '    vec2(-0.3148003f, -0.7047654f),\n'
                                      '    vec2(-0.42215f, -0.2024607f),\n'
                                      '    vec2(-0.9466816f, -0.2014508f),\n'
                                      '    vec2(-0.8409063f, -0.03465778f),\n'
                                      '    vec2(-0.6517572f, -0.07476326f),\n'
                                      '    vec2(-0.1041822f, -0.02521214f),\n'
                                      '    vec2(-0.3042712f, -0.02195431f),\n'
                                      '    vec2(-0.5082307f, 0.1079806f),\n'
                                      '    vec2(-0.08429877f, -0.2316298f),\n'
                                      '    vec2(-0.9879128f, 0.1113683f),\n'
                                      '    vec2(-0.3859636f, 0.3363545f),\n'
                                      '    vec2(-0.1925334f, 0.1787288f),\n'
                                      '    vec2(0.003256182f, 0.138135f),\n'
                                      '    vec2(-0.8706837f, 0.3010679f),\n'
                                      '    vec2(-0.6982038f, 0.1904326f),\n'
                                      '    vec2(0.1975043f, 0.2221317f),\n'
                                      '    vec2(0.1507788f, 0.4204168f),\n'
                                      '    vec2(0.3514056f, 0.09865579f),\n'
                                      '    vec2(0.1558783f, -0.08460935f),\n'
                                      '    vec2(-0.0684978f, 0.4461993f),\n'
                                      '    vec2(0.3780522f, 0.3478679f),\n'
                                      '    vec2(0.3956799f, -0.1469177f),\n'
                                      '    vec2(0.5838975f, 0.1054943f),\n'
                                      '    vec2(0.6155105f, 0.3245716f),\n'
                                      '    vec2(0.3928624f, -0.4417621f),\n'
                                      '    vec2(0.1749884f, -0.4202175f),\n'
                                      '    vec2(0.6813727f, -0.2424808f),\n'
                                      '    vec2(-0.6707711f, 0.4912741f),\n'
                                      '    vec2(0.0005130528f, -0.8058334f),\n'
                                      '    vec2(0.02703013f, -0.6010728f),\n'
                                      '    vec2(-0.1658188f, -0.9695674f),\n'
                                      '    vec2(0.4060591f, -0.7100726f),\n'
                                      '    vec2(0.7713396f, -0.4713659f),\n'
                                      '    vec2(0.573212f, -0.51544f),\n'
                                      '    vec2(-0.3448896f, -0.9046497f),\n'
                                      '    vec2(0.1268544f, -0.9874692f),\n'
                                      '    vec2(0.7418533f, -0.6667366f),\n'
                                      '    vec2(0.3492522f, 0.5924662f),\n'
                                      '    vec2(0.5679897f, 0.5343465f),\n'
                                      '    vec2(0.5663417f, 0.7708698f),\n'
                                      '    vec2(0.7375497f, 0.6691415f),\n'
                                      '    vec2(0.2271994f, -0.6163502f),\n'
                                      '    vec2(0.2312844f, 0.8725659f),\n'
                                      '    vec2(0.4216993f, 0.9002838f),\n'
                                      '    vec2(0.4262091f, -0.9013284f),\n'
                                      '    vec2(0.2001408f, -0.808381f),\n'
                                      '    vec2(0.149394f, 0.6650763f),\n'
                                      '    vec2(-0.09640376f, 0.9843736f),\n'
                                      '    vec2(0.7682328f, -0.07273844f),\n'
                                      '    vec2(0.04146584f, 0.8313184f),\n'
                                      '    vec2(0.9705266f, -0.1143304f),\n'
                                      '    vec2(0.9670017f, 0.1293385f),\n'
                                      '    vec2(0.9015037f, -0.3306949f),\n'
                                      '    vec2(-0.5085648f, 0.7534177f),\n'
                                      '    vec2(0.9055501f, 0.3758393f),\n'
                                      '    vec2(0.7599946f, 0.1809109f),\n'
                                      '    vec2(-0.2483695f, 0.7942952f),\n'
                                      '    vec2(-0.4241052f, 0.5581087f),\n'
                                      '    vec2(-0.1020106f, 0.6724468f),\n'
                                      '};\n'
                                      '#endif /* UUID_771b849e_fec4_3936_8f65_94ea74cfac5c */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "utility.glsl"\n'
                                      '#ifndef UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                      '#define UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                      '#endif /* UUID_e77aaefb_1a04_384d_928f_4a7739be43fb */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "precomputed_atmosphere/atmosphere_predefine.glsl"\n'
                                      '#ifndef UUID_8551a787_26aa_3125_a449_7e84cc6a7a01\n'
                                      '#define UUID_8551a787_26aa_3125_a449_7e84cc6a7a01\n'
                                      'const int TRANSMITTANCE_TEXTURE_WIDTH = 256;\n'
                                      'const int TRANSMITTANCE_TEXTURE_HEIGHT = 64;\n'
                                      'const int SCATTERING_TEXTURE_R_SIZE = 32;\n'
                                      'const int SCATTERING_TEXTURE_MU_SIZE = 128;\n'
                                      'const int SCATTERING_TEXTURE_MU_S_SIZE = 32;\n'
                                      'const int SCATTERING_TEXTURE_NU_SIZE = 8;\n'
                                      'const int IRRADIANCE_TEXTURE_WIDTH = 64;\n'
                                      'const int IRRADIANCE_TEXTURE_HEIGHT = 16;\n'
                                      'const vec2 IRRADIANCE_TEXTURE_SIZE = vec2(64, 16);\n'
                                      '\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "precomputed_atmosphere/definitions.glsl"\n'
                                      '#ifndef UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d\n'
                                      '#define UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                      '\n'
                                      '\n'
                                      'uniform vec3 earth_center;\n'
                                      'uniform vec2 sun_size;\n'
                                      'uniform float atmosphere_exposure;\n'
                                      'uniform bool render_light_probe_mode;\n'
                                      '\n'
                                      'uniform sampler2D transmittance_texture;\n'
                                      'uniform sampler2D irradiance_texture;\n'
                                      'uniform sampler3D scattering_texture;\n'
                                      'uniform sampler3D single_mie_scattering_texture;\n'
                                      'uniform sampler3D single_rayleigh_scattering_texture;\n'
                                      'uniform sampler3D scattering_density_texture;\n'
                                      'uniform sampler3D multiple_scattering_texture;\n'
                                      '\n'
                                      '\n'
                                      'uniform vec3 SKY_RADIANCE_TO_LUMINANCE;\n'
                                      'uniform vec3 SUN_RADIANCE_TO_LUMINANCE;\n'
                                      '\n'
                                      'const float atmosphere_ratio = 0.1;\n'
                                      '\n'
                                      'struct DensityProfileLayer\n'
                                      '{\n'
                                      '    float width;\n'
                                      '    float exp_term;\n'
                                      '    float exp_scale;\n'
                                      '    float linear_term;\n'
                                      '    float constant_term;\n'
                                      '};\n'
                                      '\n'
                                      'struct DensityProfile\n'
                                      '{\n'
                                      '    DensityProfileLayer layers[2];\n'
                                      '};\n'
                                      '\n'
                                      'struct AtmosphereParameters\n'
                                      '{\n'
                                      '    vec3 solar_irradiance;\n'
                                      '    float sun_angular_radius;\n'
                                      '    float bottom_radius;\n'
                                      '    float top_radius;\n'
                                      '    DensityProfile rayleigh_density;\n'
                                      '    vec3 rayleigh_scattering;\n'
                                      '    DensityProfile mie_density;\n'
                                      '    vec3 mie_scattering;\n'
                                      '    vec3 mie_extinction;\n'
                                      '    float mie_phase_function_g;\n'
                                      '    DensityProfile absorption_density;\n'
                                      '    vec3 absorption_extinction;\n'
                                      '    vec3 ground_albedo;\n'
                                      '    float mu_s_min;\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      'float ClampCosine(float mu)\n'
                                      '{\n'
                                      '    return clamp(mu, -1.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float ClampDistance(float d)\n'
                                      '{\n'
                                      '    return max(d, 0.0);\n'
                                      '}\n'
                                      '\n'
                                      'float ClampRadius(const in AtmosphereParameters atmosphere, float r)\n'
                                      '{\n'
                                      '    return clamp(r, atmosphere.bottom_radius, atmosphere.top_radius);\n'
                                      '}\n'
                                      '\n'
                                      'float SafeSqrt(float a)\n'
                                      '{\n'
                                      '    return sqrt(max(a, 0.0));\n'
                                      '}\n'
                                      '\n'
                                      'float DistanceToTopAtmosphereBoundary(const in AtmosphereParameters atmosphere, float '
                                      'r, float mu)\n'
                                      '{\n'
                                      '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.top_radius * '
                                      'atmosphere.top_radius;\n'
                                      '    return ClampDistance(-r * mu + SafeSqrt(discriminant));\n'
                                      '}\n'
                                      '\n'
                                      'float DistanceToBottomAtmosphereBoundary(const in AtmosphereParameters atmosphere, '
                                      'float r, float mu)\n'
                                      '{\n'
                                      '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '    return ClampDistance(-r * mu - SafeSqrt(discriminant));\n'
                                      '}\n'
                                      '\n'
                                      'bool RayIntersectsGround(const in AtmosphereParameters atmosphere, float r, float mu)\n'
                                      '{\n'
                                      '    if(mu < 0.0)\n'
                                      '    {\n'
                                      '        float result = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '        if(0.0 <= result)\n'
                                      '        {\n'
                                      '            return true;\n'
                                      '        }\n'
                                      '    }\n'
                                      '    return false;\n'
                                      '}\n'
                                      '\n'
                                      'float GetLayerDensity(const in DensityProfileLayer layer, float altitude)\n'
                                      '{\n'
                                      '    float density =\n'
                                      '        layer.exp_term * exp(layer.exp_scale * altitude) + layer.linear_term * altitude '
                                      '+ layer.constant_term;\n'
                                      '    return clamp(density, 0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float GetProfileDensity(const in DensityProfile profile, float altitude)\n'
                                      '{\n'
                                      '    return altitude < profile.layers[0].width ?\n'
                                      '        GetLayerDensity(profile.layers[0], altitude) : '
                                      'GetLayerDensity(profile.layers[1], altitude);\n'
                                      '}\n'
                                      '\n'
                                      'float ComputeOpticalLengthToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in DensityProfile profile,\n'
                                      '    float r,\n'
                                      '    float mu)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 500;\n'
                                      '    float dx = DistanceToTopAtmosphereBoundary(atmosphere, r, mu) / '
                                      'float(SAMPLE_COUNT);\n'
                                      '    float result = 0.0;\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);\n'
                                      '        float y_i = GetProfileDensity(profile, r_i - atmosphere.bottom_radius);\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        result += y_i * weight_i * dx;\n'
                                      '    }\n'
                                      '    return result;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeTransmittanceToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu)\n'
                                      '{\n'
                                      '    return exp(-(\n'
                                      '        atmosphere.rayleigh_scattering *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.rayleigh_density, r, mu) +\n'
                                      '        atmosphere.mie_extinction *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.mie_density, r, mu) +\n'
                                      '        atmosphere.absorption_extinction *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.absorption_density, r, mu)));\n'
                                      '}\n'
                                      '\n'
                                      'float GetTextureCoordFromUnitRange(float x, int texture_size)\n'
                                      '{\n'
                                      '    return 0.5 / float(texture_size) + x * (1.0 - 1.0 / float(texture_size));\n'
                                      '}\n'
                                      '\n'
                                      'float GetUnitRangeFromTextureCoord(float u, int texture_size)\n'
                                      '{\n'
                                      '    return (u - 0.5 / float(texture_size)) / (1.0 - 1.0 / float(texture_size));\n'
                                      '}\n'
                                      '\n'
                                      'vec2 GetTransmittanceTextureUvFromRMu(const in AtmosphereParameters atmosphere, float '
                                      'r, float mu)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                      '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float d = DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '    float d_min = atmosphere.top_radius - r;\n'
                                      '    float d_max = rho + H;\n'
                                      '    float x_mu = (d - d_min) / (d_max - d_min);\n'
                                      '    float x_r = rho / H;\n'
                                      '    return vec2(GetTextureCoordFromUnitRange(x_mu, TRANSMITTANCE_TEXTURE_WIDTH),\n'
                                      '              GetTextureCoordFromUnitRange(x_r, TRANSMITTANCE_TEXTURE_HEIGHT));\n'
                                      '}\n'
                                      '\n'
                                      'void GetRMuFromTransmittanceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 uv, out float r, out float mu)\n'
                                      '{\n'
                                      '    float x_mu = GetUnitRangeFromTextureCoord(uv.x, TRANSMITTANCE_TEXTURE_WIDTH);\n'
                                      '    float x_r = GetUnitRangeFromTextureCoord(uv.y, TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                      '\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                      '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '\n'
                                      '    float rho = H * x_r;\n'
                                      '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float d_min = atmosphere.top_radius - r;\n'
                                      '    float d_max = rho + H;\n'
                                      '    float d = d_min + x_mu * (d_max - d_min);\n'
                                      '    mu = (d == 0.0) ? 1.0 : (H * H - rho * rho - d * d) / (2.0 * r * d);\n'
                                      '    mu = ClampCosine(mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeTransmittanceToTopAtmosphereBoundarytexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 gl_frag_coord)\n'
                                      '{\n'
                                      '    const vec2 TRANSMITTANCE_TEXTURE_SIZE = vec2(TRANSMITTANCE_TEXTURE_WIDTH, '
                                      'TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    GetRMuFromTransmittanceTextureUv(atmosphere, gl_frag_coord / '
                                      'TRANSMITTANCE_TEXTURE_SIZE, r, mu);\n'
                                      '    return ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittanceToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r, float mu)\n'
                                      '{\n'
                                      '    vec2 uv = GetTransmittanceTextureUvFromRMu(atmosphere, r, mu);\n'
                                      '    return vec3(texture2D(transmittance_texture, uv));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float d,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_d = ClampCosine((r * mu + d) / r_d);\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        return min(\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r_d, -mu_d) /\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, -mu),\n'
                                      '            vec3(1.0));\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        return min(\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, mu) /\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r_d, mu_d),\n'
                                      '            vec3(1.0));\n'
                                      '    }\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittanceToSun(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    float sin_theta_h = atmosphere.bottom_radius / r;\n'
                                      '    float cos_theta_h = -sqrt(max(1.0 - sin_theta_h * sin_theta_h, 0.0));\n'
                                      '    return GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, mu_s) *\n'
                                      '      smoothstep(-sin_theta_h * atmosphere.sun_angular_radius,\n'
                                      '                 sin_theta_h * atmosphere.sun_angular_radius,\n'
                                      '                 mu_s - cos_theta_h);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScatteringIntegrand(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    float d,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 rayleigh,\n'
                                      '    out vec3 mie)\n'
                                      '{\n'
                                      '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_s_d = ClampCosine((r * mu_s + d * nu) / r_d);\n'
                                      '    vec3 transmittance =\n'
                                      '        GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                      'ray_r_mu_intersects_ground) *\n'
                                      '        GetTransmittanceToSun(atmosphere, transmittance_texture, r_d, mu_s_d);\n'
                                      '    rayleigh = transmittance * GetProfileDensity(atmosphere.rayleigh_density, r_d - '
                                      'atmosphere.bottom_radius);\n'
                                      '    mie = transmittance * GetProfileDensity(atmosphere.mie_density, r_d - '
                                      'atmosphere.bottom_radius);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float DistanceToNearestAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        return DistanceToBottomAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '    }\n'
                                      '    return DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 rayleigh,\n'
                                      '    out vec3 mie)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 50;\n'
                                      '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                      'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                      '\n'
                                      '    vec3 rayleigh_sum = vec3(0.0);\n'
                                      '    vec3 mie_sum = vec3(0.0);\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        vec3 rayleigh_i;\n'
                                      '        vec3 mie_i;\n'
                                      '        ComputeSingleScatteringIntegrand(\n'
                                      '            atmosphere, transmittance_texture, r, mu, mu_s, nu, d_i, '
                                      'ray_r_mu_intersects_ground, rayleigh_i, mie_i);\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        rayleigh_sum += rayleigh_i * weight_i;\n'
                                      '        mie_sum += mie_i * weight_i;\n'
                                      '    }\n'
                                      '    rayleigh = rayleigh_sum * dx * atmosphere.solar_irradiance * '
                                      'atmosphere.rayleigh_scattering;\n'
                                      '    mie = mie_sum * dx * atmosphere.solar_irradiance * atmosphere.mie_scattering;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float RayleighPhaseFunction(float nu)\n'
                                      '{\n'
                                      '    float k = 3.0 / (16.0 * PI);\n'
                                      '    return k * (1.0 + nu * nu);\n'
                                      '}\n'
                                      '\n'
                                      'float MiePhaseFunction(float g, float nu)\n'
                                      '{\n'
                                      '    float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);\n'
                                      '    return k * (1.0 + nu * nu) / pow(1.0 + g * g - 2.0 * g * nu, 1.5);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec4 GetScatteringTextureUvwzFromRMuMuSNu(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                      'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float u_r = GetTextureCoordFromUnitRange(rho / H, SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    float r_mu = r * mu;\n'
                                      '    float discriminant = r_mu * r_mu - r * r + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '    float u_mu;\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        float d = -r_mu - SafeSqrt(discriminant);\n'
                                      '        float d_min = r - atmosphere.bottom_radius;\n'
                                      '        float d_max = rho;\n'
                                      '        u_mu = 0.5 - 0.5 * GetTextureCoordFromUnitRange(\n'
                                      '            d_max == d_min ? 0.0 : (d - d_min) / (d_max - d_min), '
                                      'SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d = -r_mu + SafeSqrt(discriminant + H * H);\n'
                                      '        float d_min = atmosphere.top_radius - r;\n'
                                      '        float d_max = rho + H;\n'
                                      '        u_mu = 0.5 + 0.5 * GetTextureCoordFromUnitRange(\n'
                                      '            (d - d_min) / (d_max - d_min), SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                      '    }\n'
                                      '\n'
                                      '    float d = DistanceToTopAtmosphereBoundary(atmosphere, atmosphere.bottom_radius, '
                                      'mu_s);\n'
                                      '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                      '    float d_max = H;\n'
                                      '    float a = (d - d_min) / (d_max - d_min);\n'
                                      '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                      '    float u_mu_s = GetTextureCoordFromUnitRange(max(1.0 - a / A, 0.0) / (1.0 + a), '
                                      'SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                      '    float u_nu = (nu + 1.0) / 2.0;\n'
                                      '    return vec4(u_nu, u_mu_s, u_mu, u_r);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuMuSNuFromScatteringTextureUvwz(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec4 uvwz,\n'
                                      '    out float r,\n'
                                      '    out float mu,\n'
                                      '    out float mu_s,\n'
                                      '    out float nu,\n'
                                      '    out bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                      'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = H * GetUnitRangeFromTextureCoord(uvwz.w, SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    if (uvwz.z < 0.5)\n'
                                      '    {\n'
                                      '        float d_min = r - atmosphere.bottom_radius;\n'
                                      '        float d_max = rho;\n'
                                      '        float d = d_min + (d_max - d_min) *\n'
                                      '            GetUnitRangeFromTextureCoord(1.0 - 2.0 * uvwz.z, SCATTERING_TEXTURE_MU_SIZE '
                                      '/ 2);\n'
                                      '        mu = (d == 0.0) ? -1.0 : ClampCosine(-(rho * rho + d * d) / (2.0 * r * d));\n'
                                      '        ray_r_mu_intersects_ground = true;\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d_min = atmosphere.top_radius - r;\n'
                                      '        float d_max = rho + H;\n'
                                      '        float d = d_min + (d_max - d_min) *\n'
                                      '            GetUnitRangeFromTextureCoord(2.0 * uvwz.z - 1.0, SCATTERING_TEXTURE_MU_SIZE '
                                      '/ 2);\n'
                                      '        mu = (d == 0.0) ? 1.0 : ClampCosine((H * H - rho * rho - d * d) / (2.0 * r * '
                                      'd));\n'
                                      '        ray_r_mu_intersects_ground = false;\n'
                                      '    }\n'
                                      '\n'
                                      '    float x_mu_s = GetUnitRangeFromTextureCoord(uvwz.y, SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                      '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                      '    float d_max = H;\n'
                                      '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                      '    float a = (A - x_mu_s * A) / (1.0 + x_mu_s * A);\n'
                                      '    float d = d_min + min(a, A) * (d_max - d_min);\n'
                                      '    mu_s = (d == 0.0) ? 1.0 : ClampCosine((H * H - d * d) / (2.0 * '
                                      'atmosphere.bottom_radius * d));\n'
                                      '    nu = ClampCosine(uvwz.x * 2.0 - 1.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuMuSNuFromScatteringTextureFragCoord(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec3 gl_frag_coord,\n'
                                      '    out float r,\n'
                                      '    out float mu,\n'
                                      '    out float mu_s,\n'
                                      '    out float nu,\n'
                                      '    out bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    const vec4 SCATTERING_TEXTURE_SIZE = vec4(\n'
                                      '        SCATTERING_TEXTURE_NU_SIZE - 1,\n'
                                      '        SCATTERING_TEXTURE_MU_S_SIZE,\n'
                                      '        SCATTERING_TEXTURE_MU_SIZE,\n'
                                      '        SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    float frag_coord_nu = floor(gl_frag_coord.x / '
                                      'float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                      '    float frag_coord_mu_s = mod(gl_frag_coord.x, float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                      '    vec4 uvwz = vec4(frag_coord_nu, frag_coord_mu_s, gl_frag_coord.y, gl_frag_coord.z) '
                                      '/ SCATTERING_TEXTURE_SIZE;\n'
                                      '    GetRMuMuSNuFromScatteringTextureUvwz(atmosphere, uvwz, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    nu = clamp(\n'
                                      '        nu,\n'
                                      '        mu * mu_s - sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)),\n'
                                      '        mu * mu_s + sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScatteringtexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in vec3 gl_frag_coord,\n'
                                      '    out vec3 rayleigh, out vec3 mie)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    float nu;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground);\n'
                                      '    ComputeSingleScattering(atmosphere, transmittance_texture,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground, rayleigh, mie);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                      '    float tex_x = floor(tex_coord_x);\n'
                                      '    float lerp = tex_coord_x - tex_x;\n'
                                      '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                      'uvwz.w);\n'
                                      '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), '
                                      'uvwz.z, uvwz.w);\n'
                                      '    return vec3(\n'
                                      '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                      'texture3D(scattering_texture, uvw1) * lerp);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    int scattering_order)\n'
                                      '{\n'
                                      '    if (scattering_order == 1)\n'
                                      '    {\n'
                                      '        vec3 rayleigh = GetScattering(\n'
                                      '            atmosphere, single_rayleigh_scattering_texture, r, mu, mu_s, nu,\n'
                                      '            ray_r_mu_intersects_ground);\n'
                                      '        vec3 mie = GetScattering(\n'
                                      '            atmosphere, single_mie_scattering_texture, r, mu, mu_s, nu,\n'
                                      '            ray_r_mu_intersects_ground);\n'
                                      '\n'
                                      '        return rayleigh * RayleighPhaseFunction(nu) + mie * '
                                      'MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '    }\n'
                                      '\n'
                                      '    return GetScattering(atmosphere, multiple_scattering_texture, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r, float mu_s);\n'
                                      '\n'
                                      'vec3 ComputeScatteringDensity(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r, float mu, float mu_s, float nu, int scattering_order)\n'
                                      '{\n'
                                      '    vec3 zenith_direction = vec3(0.0, 0.0, 1.0);\n'
                                      '    vec3 omega = vec3(sqrt(1.0 - mu * mu), 0.0, mu);\n'
                                      '    float sun_dir_x = omega.x == 0.0 ? 0.0 : (nu - mu * mu_s) / omega.x;\n'
                                      '    float sun_dir_y = sqrt(max(1.0 - sun_dir_x * sun_dir_x - mu_s * mu_s, 0.0));\n'
                                      '    vec3 omega_s = vec3(sun_dir_x, sun_dir_y, mu_s);\n'
                                      '\n'
                                      '    const int SAMPLE_COUNT = 16;\n'
                                      '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                      '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                      '    vec3 rayleigh_mie = vec3(0.0);\n'
                                      '\n'
                                      '    for (int l = 0; l < SAMPLE_COUNT; ++l)\n'
                                      '    {\n'
                                      '        float theta = (float(l) + 0.5) * dtheta;\n'
                                      '        float cos_theta = cos(theta);\n'
                                      '        float sin_theta = sin(theta);\n'
                                      '        bool ray_r_theta_intersects_ground = RayIntersectsGround(atmosphere, r, '
                                      'cos_theta);\n'
                                      '\n'
                                      '        float distance_to_ground = 0.0;\n'
                                      '        vec3 transmittance_to_ground = vec3(0.0);\n'
                                      '        vec3 ground_albedo = vec3(0.0);\n'
                                      '        if (ray_r_theta_intersects_ground)\n'
                                      '        {\n'
                                      '            distance_to_ground = DistanceToBottomAtmosphereBoundary(atmosphere, r, '
                                      'cos_theta);\n'
                                      '            transmittance_to_ground = GetTransmittance(atmosphere, '
                                      'transmittance_texture, r, cos_theta, distance_to_ground, true );\n'
                                      '            ground_albedo = atmosphere.ground_albedo;\n'
                                      '        }\n'
                                      '\n'
                                      '        for (int m = 0; m < 2 * SAMPLE_COUNT; ++m)\n'
                                      '        {\n'
                                      '            float phi = 1.5 * dphi;\n'
                                      '            vec3 omega_i = vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, '
                                      'cos_theta);\n'
                                      '            float domega_i = dtheta * dphi * sin(theta);\n'
                                      '\n'
                                      '            float nu1 = dot(omega_s, omega_i);\n'
                                      '            vec3 incident_radiance = GetScattering(atmosphere,\n'
                                      '                single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                      '                multiple_scattering_texture, r, omega_i.z, mu_s, nu1,\n'
                                      '                ray_r_theta_intersects_ground, scattering_order - 1);\n'
                                      '\n'
                                      '            vec3 ground_normal = normalize(zenith_direction * r + omega_i * '
                                      'distance_to_ground);\n'
                                      '            vec3 ground_irradiance = GetIrradiance(\n'
                                      '                atmosphere, irradiance_texture, atmosphere.bottom_radius,\n'
                                      '                dot(ground_normal, omega_s));\n'
                                      '            incident_radiance += transmittance_to_ground * ground_albedo * (1.0 / (PI)) '
                                      '* ground_irradiance;\n'
                                      '\n'
                                      '            float nu2 = dot(omega, omega_i);\n'
                                      '            float rayleigh_density = GetProfileDensity(\n'
                                      '                atmosphere.rayleigh_density, r - atmosphere.bottom_radius);\n'
                                      '            float mie_density = GetProfileDensity(\n'
                                      '                atmosphere.mie_density, r - atmosphere.bottom_radius);\n'
                                      '            rayleigh_mie += incident_radiance *\n'
                                      '                (atmosphere.rayleigh_scattering * rayleigh_density * '
                                      'RayleighPhaseFunction(nu2) +\n'
                                      '                atmosphere.mie_scattering * mie_density *\n'
                                      '                MiePhaseFunction(atmosphere.mie_phase_function_g, nu2)) * domega_i;\n'
                                      '        }\n'
                                      '    }\n'
                                      '    return rayleigh_mie;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeMultipleScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_density_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 50;\n'
                                      '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                      'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                      '    vec3 rayleigh_mie_sum = vec3(0.0);\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        float r_i = ClampRadius(atmosphere, sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * '
                                      'r));\n'
                                      '        float mu_i = ClampCosine((r * mu + d_i) / r_i);\n'
                                      '        float mu_s_i = ClampCosine((r * mu_s + d_i * nu) / r_i);\n'
                                      '        vec3 rayleigh_mie_i =\n'
                                      '            GetScattering(atmosphere, scattering_density_texture, r_i, mu_i, mu_s_i, '
                                      'nu, ray_r_mu_intersects_ground) *\n'
                                      '            GetTransmittance(atmosphere, transmittance_texture, r, mu, d_i, '
                                      'ray_r_mu_intersects_ground) * dx;\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        rayleigh_mie_sum += rayleigh_mie_i * weight_i;\n'
                                      '    }\n'
                                      '    return rayleigh_mie_sum;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeScatteringDensitytexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    const in vec3 gl_frag_coord, int scattering_order)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    float nu;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, '
                                      'nu, ray_r_mu_intersects_ground);\n'
                                      '    return ComputeScatteringDensity(atmosphere, transmittance_texture,\n'
                                      '        single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                      '        multiple_scattering_texture, irradiance_texture, r, mu, mu_s, nu,\n'
                                      '        scattering_order);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeMultipleScatteringtexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_density_texture,\n'
                                      '    const in vec3 gl_frag_coord, out float nu)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, '
                                      'nu, ray_r_mu_intersects_ground);\n'
                                      '    return ComputeMultipleScattering(atmosphere, transmittance_texture,\n'
                                      '        scattering_density_texture, r, mu, mu_s, nu,\n'
                                      '        ray_r_mu_intersects_ground);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeDirectIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    float alpha_s = atmosphere.sun_angular_radius;\n'
                                      '    float average_cosine_factor = 0.0;\n'
                                      '    if(-alpha_s <= mu_s)\n'
                                      '    {\n'
                                      '        if(mu_s <= alpha_s)\n'
                                      '        {\n'
                                      '            average_cosine_factor = (mu_s + alpha_s) * (mu_s + alpha_s) / (4.0 * '
                                      'alpha_s);\n'
                                      '        }\n'
                                      '        else\n'
                                      '        {\n'
                                      '            average_cosine_factor = mu_s;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    return atmosphere.solar_irradiance *\n'
                                      '        GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                      'mu_s) * average_cosine_factor;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeIndirectIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s,\n'
                                      '    int scattering_order)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 32;\n'
                                      '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                      '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                      '\n'
                                      '    vec3 result = vec3(0.0);\n'
                                      '    vec3 omega_s = vec3(sqrt(1.0 - mu_s * mu_s), 0.0, mu_s);\n'
                                      '    for (int j = 0; j < SAMPLE_COUNT / 2; ++j)\n'
                                      '    {\n'
                                      '        float theta = (float(j) + 0.5) * dtheta;\n'
                                      '        for (int i = 0; i < 2 * SAMPLE_COUNT; ++i)\n'
                                      '        {\n'
                                      '            float phi = (float(i) + 0.5) * dphi;\n'
                                      '            vec3 omega = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), '
                                      'cos(theta));\n'
                                      '            float domega = dtheta * dphi * sin(theta);\n'
                                      '            float nu = dot(omega, omega_s);\n'
                                      '            result += GetScattering(\n'
                                      '                atmosphere,\n'
                                      '                single_rayleigh_scattering_texture,\n'
                                      '                single_mie_scattering_texture,\n'
                                      '                multiple_scattering_texture,\n'
                                      '                r, omega.z, mu_s, nu, false, scattering_order) * omega.z * domega;\n'
                                      '        }\n'
                                      '    }\n'
                                      '  return result;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec2 GetIrradianceTextureUvFromRMuS(const in AtmosphereParameters atmosphere, float r, '
                                      'float mu_s)\n'
                                      '{\n'
                                      '    float x_r = (r - atmosphere.bottom_radius) / (atmosphere.top_radius - '
                                      'atmosphere.bottom_radius);\n'
                                      '    float x_mu_s = mu_s * 0.5 + 0.5;\n'
                                      '    return vec2(GetTextureCoordFromUnitRange(x_mu_s, IRRADIANCE_TEXTURE_WIDTH),\n'
                                      '                GetTextureCoordFromUnitRange(x_r, IRRADIANCE_TEXTURE_HEIGHT));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuSFromIrradianceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 uv, out float r, out float mu_s)\n'
                                      '{\n'
                                      '    float x_mu_s = GetUnitRangeFromTextureCoord(uv.x, IRRADIANCE_TEXTURE_WIDTH);\n'
                                      '    float x_r = GetUnitRangeFromTextureCoord(uv.y, IRRADIANCE_TEXTURE_HEIGHT);\n'
                                      '    r = atmosphere.bottom_radius + x_r * (atmosphere.top_radius - '
                                      'atmosphere.bottom_radius);\n'
                                      '    mu_s = ClampCosine(2.0 * x_mu_s - 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ComputeDirectIrradiancetexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in vec2 gl_frag_coord)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu_s;\n'
                                      '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                      'r, mu_s);\n'
                                      '    return ComputeDirectIrradiance(atmosphere, transmittance_texture, r, mu_s);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeIndirectIrradiancetexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in vec2 gl_frag_coord, int scattering_order)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu_s;\n'
                                      '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                      'r, mu_s);\n'
                                      '    return ComputeIndirectIrradiance(atmosphere, single_rayleigh_scattering_texture, '
                                      'single_mie_scattering_texture,\n'
                                      '        multiple_scattering_texture, r, mu_s, scattering_order);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    vec2 uv = GetIrradianceTextureUvFromRMuS(atmosphere, r, mu_s);\n'
                                      '    return vec3(texture2D(irradiance_texture, uv));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      '#endif\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetCombinedScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 single_mie_scattering)\n'
                                      '{\n'
                                      '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                      '    float tex_x = floor(tex_coord_x);\n'
                                      '    float lerp = tex_coord_x - tex_x;\n'
                                      '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                      'uvwz.w);\n'
                                      '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), '
                                      'uvwz.z, uvwz.w);\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      '#else\n'
                                      '    vec3 scattering = vec3(\n'
                                      '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                      'texture3D(scattering_texture, uvw1) * lerp);\n'
                                      '    single_mie_scattering = vec3(\n'
                                      '        texture3D(single_mie_scattering_texture, uvw0) * (1.0 - lerp) +\n'
                                      '        texture3D(single_mie_scattering_texture, uvw1) * lerp);\n'
                                      '#endif\n'
                                      '    return scattering;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeSkyRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    vec3 camera, const in vec3 view_ray, float shadow_length,\n'
                                      '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    float r = length(camera);\n'
                                      '    float rmu = dot(camera, view_ray);\n'
                                      '    float distance_to_top_atmosphere_boundary = -rmu -\n'
                                      '        sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                      '\n'
                                      '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                      '    {\n'
                                      '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                      '        r = atmosphere.top_radius;\n'
                                      '        rmu += distance_to_top_atmosphere_boundary;\n'
                                      '    }\n'
                                      '    else if(r > atmosphere.top_radius)\n'
                                      '    {\n'
                                      '        transmittance = vec3(1.0);\n'
                                      '        return vec3(0.0);\n'
                                      '    }\n'
                                      '\n'
                                      '    float mu = rmu / r;\n'
                                      '    float mu_s = dot(camera, sun_direction) / r;\n'
                                      '    float nu = dot(view_ray, sun_direction);\n'
                                      '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                      '\n'
                                      '    transmittance = ray_r_mu_intersects_ground ?\n'
                                      '        vec3(0.0) : GetTransmittanceToTopAtmosphereBoundary(atmosphere, '
                                      'transmittance_texture, r, mu);\n'
                                      '    vec3 single_mie_scattering;\n'
                                      '    vec3 scattering;\n'
                                      '    if (shadow_length == 0.0)\n'
                                      '    {\n'
                                      '        scattering = GetCombinedScattering(\n'
                                      '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '            r, mu, mu_s, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d = shadow_length;\n'
                                      '        float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '        float mu_p = (r * mu + d) / r_p;\n'
                                      '        float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                      '\n'
                                      '        scattering = GetCombinedScattering(\n'
                                      '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '            r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                      '        vec3 shadow_transmittance =\n'
                                      '            GetTransmittance(atmosphere, transmittance_texture, r, mu, shadow_length, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '        scattering = scattering * shadow_transmittance;\n'
                                      '        single_mie_scattering = single_mie_scattering * shadow_transmittance;\n'
                                      '    }\n'
                                      '\n'
                                      '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                      '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeSkyRadianceToPoint(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    vec3 camera, const in vec3 point, float shadow_length,\n'
                                      '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    vec3 view_ray = normalize(point - camera);\n'
                                      '    float r = length(camera);\n'
                                      '    float rmu = dot(camera, view_ray);\n'
                                      '    float distance_to_top_atmosphere_boundary =\n'
                                      '        -rmu - sqrt(rmu * rmu - r * r + atmosphere.top_radius * '
                                      'atmosphere.top_radius);\n'
                                      '\n'
                                      '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                      '    {\n'
                                      '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                      '        r = atmosphere.top_radius;\n'
                                      '        rmu += distance_to_top_atmosphere_boundary;\n'
                                      '    }\n'
                                      '\n'
                                      '    float mu = rmu / r;\n'
                                      '    float mu_s = dot(camera, sun_direction) / r;\n'
                                      '    float nu = dot(view_ray, sun_direction);\n'
                                      '    float d = length(point - camera);\n'
                                      '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                      '\n'
                                      '    transmittance = GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '\n'
                                      '    vec3 single_mie_scattering;\n'
                                      '    vec3 scattering = GetCombinedScattering(\n'
                                      '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground,\n'
                                      '        single_mie_scattering);\n'
                                      '\n'
                                      '    d = max(d - shadow_length, 0.0);\n'
                                      '    float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_p = (r * mu + d) / r_p;\n'
                                      '    float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                      '\n'
                                      '    vec3 single_mie_scattering_p;\n'
                                      '    vec3 scattering_p = GetCombinedScattering(\n'
                                      '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '        r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground,\n'
                                      '        single_mie_scattering_p);\n'
                                      '\n'
                                      '    vec3 shadow_transmittance = transmittance;\n'
                                      '    if (shadow_length > 0.0)\n'
                                      '    {\n'
                                      '        shadow_transmittance = GetTransmittance(\n'
                                      '            atmosphere, transmittance_texture, r, mu, d, ray_r_mu_intersects_ground);\n'
                                      '    }\n'
                                      '    scattering = scattering - shadow_transmittance * scattering_p;\n'
                                      '    single_mie_scattering = single_mie_scattering - shadow_transmittance * '
                                      'single_mie_scattering_p;\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      '#endif\n'
                                      '\n'
                                      '    single_mie_scattering = single_mie_scattering * smoothstep(0.0, float(0.01), '
                                      'mu_s);\n'
                                      '\n'
                                      '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                      '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ComputeSunAndSkyIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    const in vec3 point, const in vec3 normal, const in vec3 sun_direction,\n'
                                      '    out vec3 sky_irradiance)\n'
                                      '{\n'
                                      '    float r = length(point);\n'
                                      '    float mu_s = dot(point, sun_direction) / r;\n'
                                      '\n'
                                      '    sky_irradiance = GetIrradiance(atmosphere, irradiance_texture, r, mu_s) * (1.0 + '
                                      'dot(normal, point) / r) * 0.5;\n'
                                      '\n'
                                      '    return atmosphere.solar_irradiance *\n'
                                      '        GetTransmittanceToSun(atmosphere, transmittance_texture, r, mu_s) *\n'
                                      '        max(dot(normal, sun_direction), 0.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetSolarRadiance(const in AtmosphereParameters atmosphere)\n'
                                      '{\n'
                                      '    return atmosphere.solar_irradiance /\n'
                                      '        (PI * atmosphere.sun_angular_radius * atmosphere.sun_angular_radius) * '
                                      'SUN_RADIANCE_TO_LUMINANCE * atmosphere_exposure;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSkyRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 view_ray, float '
                                      'shadow_length,\n'
                                      '    vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    return ComputeSkyRadiance(atmosphere, transmittance_texture,\n'
                                      '        scattering_texture, single_mie_scattering_texture,\n'
                                      '        camera, view_ray, shadow_length, sun_direction, transmittance) * '
                                      'SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSkyRadianceToPoint(\n'
                                      '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 point, float '
                                      'shadow_length,\n'
                                      '    vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    return ComputeSkyRadianceToPoint(atmosphere, transmittance_texture,\n'
                                      '        scattering_texture, single_mie_scattering_texture,\n'
                                      '        camera, point, shadow_length, sun_direction, transmittance) * '
                                      'SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSunAndSkyIrradiance(\n'
                                      '   const in AtmosphereParameters atmosphere, vec3 p, vec3 normal, vec3 sun_direction,\n'
                                      '   out vec3 sky_irradiance)\n'
                                      '{\n'
                                      '    vec3 sun_irradiance = ComputeSunAndSkyIrradiance(\n'
                                      '        atmosphere, transmittance_texture, irradiance_texture, p, normal, '
                                      'sun_direction, sky_irradiance);\n'
                                      '    sky_irradiance *= SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '    return sun_irradiance * SUN_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'float GetSunVisibility(vec3 point, vec3 sun_direction)\n'
                                      '{\n'
                                      '    vec3 p = point - kSphereCenter;\n'
                                      '    float p_dot_v = dot(p, sun_direction);\n'
                                      '    float p_dot_p = dot(p, p);\n'
                                      '    float ray_sphere_center_squared_distance = p_dot_p - p_dot_v * p_dot_v;\n'
                                      '    float distance_to_intersection = -p_dot_v - sqrt(\n'
                                      '        kSphereRadius * kSphereRadius - ray_sphere_center_squared_distance);\n'
                                      '    if (distance_to_intersection > 0.0)\n'
                                      '    {\n'
                                      '        float ray_sphere_distance = kSphereRadius - '
                                      'sqrt(ray_sphere_center_squared_distance);\n'
                                      '        float ray_sphere_angular_distance = -ray_sphere_distance / p_dot_v;\n'
                                      '        return smoothstep(1.0, 0.0, ray_sphere_angular_distance / sun_size.x);\n'
                                      '    }\n'
                                      '    return 1.0;\n'
                                      '}\n'
                                      '\n'
                                      'float GetSkyVisibility(vec3 point)\n'
                                      '{\n'
                                      '  vec3 p = point - kSphereCenter;\n'
                                      '  float p_dot_p = dot(p, p);\n'
                                      '  return 1.0 + p.y / sqrt(p_dot_p) * kSphereRadius * kSphereRadius / p_dot_p;\n'
                                      '}\n'
                                      '\n'
                                      'void GetSphereShadowInOut(vec3 view_direction, vec3 sun_direction, out float d_in, out '
                                      'float d_out)\n'
                                      '{\n'
                                      '    vec3 pos = CAMERA_POSITION.xyz * atmosphere_ratio - kSphereCenter;\n'
                                      '    float pos_dot_sun = dot(pos, sun_direction);\n'
                                      '    float view_dot_sun = dot(view_direction, sun_direction);\n'
                                      '    float k = sun_size.x;\n'
                                      '    float l = 1.0 + k * k;\n'
                                      '    float a = 1.0 - l * view_dot_sun * view_dot_sun;\n'
                                      '    float b = dot(pos, view_direction) - l * pos_dot_sun * view_dot_sun - k * '
                                      'kSphereRadius * view_dot_sun;\n'
                                      '    float c = dot(pos, pos) - l * pos_dot_sun * pos_dot_sun -\n'
                                      '        2.0 * k * kSphereRadius * pos_dot_sun - kSphereRadius * kSphereRadius;\n'
                                      '    float discriminant = b * b - a * c;\n'
                                      '    if (discriminant > 0.0)\n'
                                      '    {\n'
                                      '        d_in = max(0.0, (-b - sqrt(discriminant)) / a);\n'
                                      '        d_out = (-b + sqrt(discriminant)) / a;\n'
                                      '        float d_base = -pos_dot_sun / view_dot_sun;\n'
                                      '        float d_apex = -(pos_dot_sun + kSphereRadius / k) / view_dot_sun;\n'
                                      '        if (view_dot_sun > 0.0)\n'
                                      '        {\n'
                                      '            d_in = max(d_in, d_apex);\n'
                                      '            d_out = a > 0.0 ? min(d_out, d_base) : d_base;\n'
                                      '        }\n'
                                      '        else\n'
                                      '        {\n'
                                      '            d_in = a > 0.0 ? max(d_in, d_base) : d_base;\n'
                                      '            d_out = min(d_out, d_apex);\n'
                                      '        }\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        d_in = 0.0;\n'
                                      '        d_out = 0.0;\n'
                                      '    }\n'
                                      '}\n'
                                      '\n'
                                      'float GetSceneShadowLength(float scene_dist, vec3 view_direction, sampler2D '
                                      'texture_shadow)\n'
                                      '{\n'
                                      '    const float earth_radius = abs(earth_center.y);\n'
                                      '    bool shadow_enter = false;\n'
                                      '    bool do_exit = false;\n'
                                      '    float scene_shadow_out = 0.0;\n'
                                      '    float scene_shadow_in = 0.0;\n'
                                      '    float shadow_length = 0.0;\n'
                                      '    const int LOOP = 64;\n'
                                      '    float d = min(NEAR_FAR.y * 0.01, scene_dist) / float(LOOP);\n'
                                      '    float enter_count = 0.0;\n'
                                      '\n'
                                      '    for(int i=0; i<LOOP; ++i)\n'
                                      '    {\n'
                                      '        float ray_dist = float(i) * d;\n'
                                      '        vec3 world_pos = CAMERA_POSITION.xyz + view_direction * ray_dist;\n'
                                      '        vec4 shadow_uv = SHADOW_MATRIX * vec4(world_pos, 1.0);\n'
                                      '        shadow_uv.xyz /= shadow_uv.w;\n'
                                      '        shadow_uv.xyz = shadow_uv.xyz * 0.5 + 0.5;\n'
                                      '        float shadow_depth = texture2D(texture_shadow, shadow_uv.xy, 0).x;\n'
                                      '\n'
                                      '        if(shadow_uv.x < 0.0 || 1.0 < shadow_uv.x || shadow_uv.y < 0.0 || 1.0 < '
                                      'shadow_uv.y || scene_dist <= ray_dist)\n'
                                      '        {\n'
                                      '            do_exit = true;\n'
                                      '        }\n'
                                      '        else if(length(world_pos - earth_center) < earth_radius)\n'
                                      '        {\n'
                                      '            \n'
                                      '            do_exit = true;\n'
                                      '        }\n'
                                      '        else if(false == shadow_enter && shadow_depth <= shadow_uv.z)\n'
                                      '        {\n'
                                      '            \n'
                                      '            shadow_enter = true;\n'
                                      '            scene_shadow_in = dot(view_direction, world_pos);\n'
                                      '        }\n'
                                      '        else if(shadow_enter && shadow_uv.z < shadow_depth)\n'
                                      '        {\n'
                                      '            \n'
                                      '            scene_shadow_out = dot(view_direction, world_pos);\n'
                                      '            shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                      '\n'
                                      '            \n'
                                      '            shadow_enter = false;\n'
                                      '            scene_shadow_in = 0.0;\n'
                                      '            scene_shadow_out = 0.0;\n'
                                      '            continue;\n'
                                      '        }\n'
                                      '\n'
                                      '        if(shadow_enter)\n'
                                      '        {\n'
                                      '            enter_count += 1.0;\n'
                                      '        }\n'
                                      '\n'
                                      '        if(do_exit || i == (LOOP-1))\n'
                                      '        {\n'
                                      '            if(shadow_enter)\n'
                                      '            {\n'
                                      '                \n'
                                      '                scene_shadow_out = dot(view_direction, world_pos);\n'
                                      '                shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                      '            }\n'
                                      '            else\n'
                                      '            {\n'
                                      '                \n'
                                      '                scene_shadow_in = 0.0;\n'
                                      '                scene_shadow_out = 0.0;\n'
                                      '            }\n'
                                      '            break;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    shadow_length = enter_count / float(LOOP);\n'
                                      '\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    float lightshaft_fadein_hack = smoothstep(0.02, 0.04, '
                                      'dot(normalize(relative_camera_pos - earth_center), sun_direction));\n'
                                      '\n'
                                      '    return max(0.0, shadow_length) * lightshaft_fadein_hack * 2.0;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetSceneRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float scene_linear_depth, vec3 eye_direction, vec3 normal,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    \n'
                                      '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                      '    relative_point.y = max(0.0, relative_point.y);\n'
                                      '\n'
                                      '    \n'
                                      '    float scene_shadow_length = 0.0;\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                      '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                      'transmittance);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetSceneRadianceWithShadow(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float scene_linear_depth, vec3 eye_direction, vec3 normal, sampler2D '
                                      'texture_shadow,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter, out float '
                                      'scene_shadow_length)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    \n'
                                      '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                      '    relative_point.y = max(0.0, relative_point.y);\n'
                                      '\n'
                                      '    scene_shadow_length = GetSceneShadowLength(scene_linear_depth, eye_direction, '
                                      'texture_shadow);\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                      '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                      'transmittance);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetCloudRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float dist, vec3 eye_direction, float scene_shadow_length,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 inscatter)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 point = camera_pos + eye_direction.xyz * max(NEAR_FAR.x, dist) * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '        atmosphere, point.xyz - earth_center, sun_direction, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    inscatter = GetSkyRadianceToPoint(atmosphere, camera_pos - earth_center,\n'
                                      '        point.xyz - earth_center, scene_shadow_length, sun_direction, transmittance);\n'
                                      '\n'
                                      '    sun_irradiance = max(vec3(0.0), sun_irradiance);\n'
                                      '    sky_irradiance = max(vec3(0.0), sky_irradiance);\n'
                                      '    transmittance = max(vec3(0.0), transmittance);\n'
                                      '    inscatter = max(vec3(0.0), inscatter);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '#endif /* UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d */\n'
                                      '\n'
                                      'const AtmosphereParameters ATMOSPHERE = AtmosphereParameters(\n'
                                      'vec3(1.474000, 1.850400, 1.911980),\n'
                                      '0.01175,\n'
                                      '6361.0,\n'
                                      '6420.0,\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.125000, 0.000000, '
                                      '0.000000))),\n'
                                      'vec3(0.005802, 0.013558, 0.033100),\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.833333, 0.000000, '
                                      '0.000000))),\n'
                                      'vec3(0.003996, 0.003996, 0.003996),\n'
                                      'vec3(0.004440, 0.004440, 0.004440),\n'
                                      '0.8,\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(25.000000, 0.000000, '
                                      '0.000000, 0.066667, -0.666667),DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '-0.066667, 2.666667))),\n'
                                      'vec3(0.000650, 0.001881, 0.000085),\n'
                                      'vec3(0.100000, 0.100000, 0.100000),\n'
                                      '-0.4999999690599179);\n'
                                      '#endif /* UUID_8551a787_26aa_3125_a449_7e84cc6a7a01 */\n'
                                      '\n'
                                      '\n'
                                      'float get_shadow_factor_simple(vec2 screen_tex_coord, vec3 world_position, float NdotL, '
                                      'sampler2D texture_shadow)\n'
                                      '{\n'
                                      '    vec2 shadow_size = textureSize(texture_shadow, 0);\n'
                                      '    vec2 shadow_texel_size = 1.0 / shadow_size;\n'
                                      '    vec4 shadow_proj = SHADOW_MATRIX * vec4(world_position, 1.0);\n'
                                      '    shadow_proj.xyz /= shadow_proj.w;\n'
                                      '    shadow_proj.xyz = shadow_proj.xyz * 0.5 + 0.5;\n'
                                      '    float shadow_depth = shadow_proj.z;\n'
                                      '    vec2 offsets[4] = {\n'
                                      '        vec2(0.0, 0.0),\n'
                                      '        vec2(shadow_texel_size.x, 0.0),\n'
                                      '        vec2(0.0, shadow_texel_size.y),\n'
                                      '        vec2(shadow_texel_size.x, shadow_texel_size.y),\n'
                                      '    };\n'
                                      '\n'
                                      '    float shadow_factor = 0.0;\n'
                                      '    vec2 shadow_uv = shadow_proj.xy;\n'
                                      '\n'
                                      '    vec2 pixel_ratio = fract(shadow_uv.xy * shadow_size);\n'
                                      '    vec2 pixel_pos = shadow_uv.xy * shadow_size - pixel_ratio + 0.5;\n'
                                      '    vec2 uv = pixel_pos * shadow_texel_size;\n'
                                      '\n'
                                      '    vec4 shadow_factors;\n'
                                      '\n'
                                      '    for(int i=0; i<4; ++i)\n'
                                      '    {\n'
                                      '        vec2 shadow_uv = uv + offsets[i];\n'
                                      '        shadow_factors[i] = texture2DLod(texture_shadow, shadow_uv, 0.0).x;\n'
                                      '        if(0.0 <= shadow_uv.x && shadow_uv.x <= 1.0 && 0.0 <= shadow_uv.y && '
                                      'shadow_uv.y <= 1.0 && shadow_factors[i] < 1.0)\n'
                                      '        {\n'
                                      '            shadow_factors[i] = saturate(exp(-SHADOW_EXP * (shadow_depth - '
                                      'shadow_factors[i] - SHADOW_BIAS * (1.0 - saturate(NdotL)))));\n'
                                      '        }\n'
                                      '        else\n'
                                      '        {\n'
                                      '            shadow_factors[i] = 1.0;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    shadow_factor += mix(\n'
                                      '        mix(shadow_factors.x, shadow_factors.y, pixel_ratio.x),\n'
                                      '        mix(shadow_factors.z, shadow_factors.w, pixel_ratio.x), pixel_ratio.y);\n'
                                      '\n'
                                      '    return clamp(shadow_factor, 0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float get_shadow_factor(vec2 screen_tex_coord, vec3 world_position, float NdotL, '
                                      'sampler2D texture_shadow)\n'
                                      '{\n'
                                      '    vec2 shadow_size = textureSize(texture_shadow, 0);\n'
                                      '    vec2 shadow_texel_size = 1.0 / shadow_size;\n'
                                      '    vec4 shadow_proj = SHADOW_MATRIX * vec4(world_position, 1.0);\n'
                                      '    shadow_proj.xyz /= shadow_proj.w;\n'
                                      '    shadow_proj.xyz = shadow_proj.xyz * 0.5 + 0.5;\n'
                                      '    float shadow_depth = shadow_proj.z;\n'
                                      '    vec2 offsets[4] = {\n'
                                      '        vec2(0.0, 0.0),\n'
                                      '        vec2(shadow_texel_size.x, 0.0),\n'
                                      '        vec2(0.0, shadow_texel_size.y),\n'
                                      '        vec2(shadow_texel_size.x, shadow_texel_size.y),\n'
                                      '    };\n'
                                      '\n'
                                      '    float shadow_factor = 0.0;\n'
                                      '\n'
                                      '    vec2 noise_size = (1 < SHADOW_SAMPLES) ? (shadow_texel_size * 4.0) : vec2(0.0);\n'
                                      '\n'
                                      '    for(int n = 0; n < SHADOW_SAMPLES; ++n)\n'
                                      '    {\n'
                                      '        vec2 uv = shadow_proj.xy + PoissonSamples[n % PoissonSampleCount] * '
                                      'noise_size;\n'
                                      '        vec2 pixel_ratio = fract(uv * shadow_size);\n'
                                      '\n'
                                      '        vec4 shadow_factors;\n'
                                      '        for(int i=0; i<4; ++i)\n'
                                      '        {\n'
                                      '            vec2 shadow_uv = uv + offsets[i];\n'
                                      '            shadow_factors[i] = texture2DLod(texture_shadow, shadow_uv, 0.0).x;\n'
                                      '            if(0.0 <= shadow_uv.x && shadow_uv.x <= 1.0 && 0.0 <= shadow_uv.y && '
                                      'shadow_uv.y <= 1.0 && shadow_factors[i] < 1.0)\n'
                                      '            {\n'
                                      '                float bias = SHADOW_BIAS * (1.0 - saturate(NdotL));\n'
                                      '                shadow_factors[i] = saturate(exp(-SHADOW_EXP * (shadow_depth - '
                                      'shadow_factors[i] - bias)));\n'
                                      '            }\n'
                                      '            else\n'
                                      '            {\n'
                                      '                shadow_factors[i] = 1.0;\n'
                                      '            }\n'
                                      '        }\n'
                                      '\n'
                                      '        shadow_factor += mix(\n'
                                      '            mix(shadow_factors.x, shadow_factors.y, pixel_ratio.x),\n'
                                      '            mix(shadow_factors.z, shadow_factors.w, pixel_ratio.x), pixel_ratio.y);\n'
                                      '    }\n'
                                      '\n'
                                      '    return clamp(shadow_factor / float(SHADOW_SAMPLES), 0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec3 oren_nayar(float roughness2, float NdotL, float NdotV, vec3 N, vec3 V, vec3 L)\n'
                                      '{\n'
                                      '    float incidentTheta = acos(NdotL);\n'
                                      '    float outTheta = acos(NdotV);\n'
                                      '\n'
                                      '    float A = 1.0 - 0.5 * (roughness2 / (roughness2 + 0.33));\n'
                                      '    float B = (0.45 * roughness2) / (roughness2 + 0.09);\n'
                                      '    float alpha = max(incidentTheta, outTheta);\n'
                                      '    float beta  = min(incidentTheta, outTheta);\n'
                                      '\n'
                                      '    vec3 u = normalize(V - N * NdotV);\n'
                                      '    vec3 v = normalize(L - N * NdotL);\n'
                                      '    float phiDiff = max(0.0, dot(u, v));\n'
                                      '\n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    return vec3((A + (B * phiDiff * sin(alpha) * tan(beta))) * NdotL);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 fresnelSchlick(float cosTheta, vec3 F0)\n'
                                      '{\n'
                                      '    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)\n'
                                      '{\n'
                                      '    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);\n'
                                      '}\n'
                                      '\n'
                                      'float D_blinn(float roughness, float NdH)\n'
                                      '{\n'
                                      '    float m = roughness * roughness;\n'
                                      '    float m2 = m * m;\n'
                                      '    float n = 2.0 / m2 - 2.0;\n'
                                      '    return (n + 2.0) / (2.0 * PI) * pow(NdH, n);\n'
                                      '}\n'
                                      '\n'
                                      'float D_beckmann(float roughness, float NdH)\n'
                                      '{\n'
                                      '    float m = roughness * roughness;\n'
                                      '    float m2 = m * m;\n'
                                      '    float NdH2 = NdH * NdH;\n'
                                      '    return exp((NdH2 - 1.0) / (m2 * NdH2)) / (PI * m2 * NdH2 * NdH2);\n'
                                      '}\n'
                                      '\n'
                                      'float DistributionGGX(float NdH, float roughness)\n'
                                      '{\n'
                                      '    float a      = roughness * roughness;\n'
                                      '    float a2     = a * a;\n'
                                      '    float NdH2 = NdH * NdH;\n'
                                      '\n'
                                      '    float num   = a2;\n'
                                      '    float denom = (NdH2 * (a2 - 1.0) + 1.0);\n'
                                      '    denom = PI * denom * denom;\n'
                                      '\n'
                                      '    return num / denom;\n'
                                      '}\n'
                                      '\n'
                                      'float GeometrySchlickGGX(float NdV, float roughness)\n'
                                      '{\n'
                                      '    float r = (roughness + 1.0);\n'
                                      '    float k = (r * r) / 8.0;\n'
                                      '    float num   = NdV;\n'
                                      '    float denom = NdV * (1.0 - k) + k;\n'
                                      '    return num / denom;\n'
                                      '}\n'
                                      '\n'
                                      'float GeometrySmith(float NdV, float NdL, float roughness)\n'
                                      '{\n'
                                      '    float ggx2  = GeometrySchlickGGX(NdV, roughness);\n'
                                      '    float ggx1  = GeometrySchlickGGX(NdL, roughness);\n'
                                      '    return ggx1 * ggx2;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 phong_specular(in float LdR, in vec3 specular, in float roughness)\n'
                                      '{\n'
                                      '    float spec = max(0.0, LdR);\n'
                                      '    float k = 1.999 / (roughness * roughness);\n'
                                      '    return min(1.0, 3.0 * 0.0398 * k) * pow(spec, min(10000.0, k)) * specular;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 blinn_specular(in float NdH, in vec3 specular, in float roughness)\n'
                                      '{\n'
                                      '    float k = 1.999 / (roughness * roughness);\n'
                                      '    return min(1.0, 3.0 * 0.0398 * k) * pow(NdH, min(10000.0, k)) * specular;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec3 cooktorrance_specular(vec3 F, float NdL, float NdV, float NdH, float roughness)\n'
                                      '{\n'
                                      '    \n'
                                      '    \n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    \n'
                                      '    float NDF = DistributionGGX(NdH, roughness);\n'
                                      '    float G   = GeometrySmith(NdV, NdL, roughness);\n'
                                      '    vec3 numerator    = NDF * G * F;\n'
                                      '    float denominator = 4.0 * NdV * NdL;\n'
                                      '    return numerator / max(denominator, 0.001);\n'
                                      '}\n'
                                      '\n'
                                      'vec2 env_BRDF_pproximate(float NdV, float roughness)\n'
                                      '{\n'
                                      '    \n'
                                      '    const vec4 c0 = vec4(-1.0, -0.0275, -0.572,  0.022);\n'
                                      '    const vec4 c1 = vec4( 1.0,  0.0425,  1.040, -0.040);\n'
                                      '    vec4 r = roughness * c0 + c1;\n'
                                      '    float a004 = min(r.x * r.x, exp2(-9.28 * NdV)) * r.x + r.y;\n'
                                      '    return vec2(-1.04, 1.04) * a004 + r.zw;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec4 surface_shading(vec4 base_color,\n'
                                      '                    vec3 emissive_color,\n'
                                      '                    float metallic,\n'
                                      '                    float roughness,\n'
                                      '                    float reflectance,\n'
                                      '                    float ssao_factor,\n'
                                      '                    vec4 scene_reflect_color,\n'
                                      '                    samplerCube texture_probe,\n'
                                      '                    sampler2D texture_shadow,\n'
                                      '                    vec2 screen_tex_coord,\n'
                                      '                    vec3 world_position,\n'
                                      '                    vec3 light_color,\n'
                                      '                    vec3 N,\n'
                                      '                    vec3 V,\n'
                                      '                    vec3 L,\n'
                                      '                    float depth)\n'
                                      '{\n'
                                      '    \n'
                                      '    vec3 scene_in_scatter;\n'
                                      '    vec3 scene_sun_irradiance;\n'
                                      '    vec3 scene_sky_irradiance;\n'
                                      '    float scene_shadow_length;\n'
                                      '    float scene_linear_depth = depth_to_linear_depth(depth);\n'
                                      '    GetSceneRadiance(ATMOSPHERE, scene_linear_depth, -V, N, scene_sun_irradiance, '
                                      'scene_sky_irradiance, scene_in_scatter);\n'
                                      '\n'
                                      '    light_color = light_color * scene_sun_irradiance;\n'
                                      '\n'
                                      '    \n'
                                      '    roughness = clamp(roughness, 0.05, 1.0);\n'
                                      '\n'
                                      '    \n'
                                      '    vec3 R = reflect(-V, N);\n'
                                      '    vec3 H = normalize(V + L);\n'
                                      '\n'
                                      '    float NdL = max(0.0, dot(N, L));\n'
                                      '    float NdV = max(0.001, dot(N, V));\n'
                                      '    float NdH = max(0.001, dot(N, H));\n'
                                      '    float HdV = max(0.001, dot(H, V));\n'
                                      '    float LdV = max(0.001, dot(L, V));\n'
                                      '\n'
                                      '    vec3 result = vec3(0.0, 0.0, 0.0);\n'
                                      '    float opacity = base_color.w;\n'
                                      '\n'
                                      '    vec3 F0 = vec3(0.04);\n'
                                      '    F0 = mix(max(F0, reflectance), base_color.xyz, metallic);\n'
                                      '    vec3 fresnel = fresnelSchlick(NdV, F0);\n'
                                      '\n'
                                      '    vec3 ambient_light = vec3(0.0, 0.0, 0.0);\n'
                                      '    vec3 diffuse_light = vec3(0.0, 0.0, 0.0);\n'
                                      '    vec3 specular_light = vec3(0.0, 0.0, 0.0);\n'
                                      '    vec3 shadow_factor = vec3(get_shadow_factor(screen_tex_coord, world_position, '
                                      'dot(N, L), texture_shadow));\n'
                                      '\n'
                                      '    \n'
                                      '    {\n'
                                      '        const vec2 env_size = textureSize(texture_probe, 0);\n'
                                      '        const float max_env_mipmap = 8.0; \n'
                                      '        vec2 envBRDF = clamp(env_BRDF_pproximate(NdV, roughness), 0.0, 1.0);\n'
                                      '        vec3 shValue = fresnel * envBRDF.x + envBRDF.y;\n'
                                      '\n'
                                      '        vec3 ibl_diffuse_light = textureCubeLod(texture_probe, invert_y(N), '
                                      'max_env_mipmap).xyz;\n'
                                      '        vec3 ibl_specular_light = textureCubeLod(texture_probe, invert_y(R), '
                                      'max_env_mipmap * roughness).xyz;\n'
                                      '\n'
                                      '        ambient_light = normalize(mix(ibl_diffuse_light, scene_sky_irradiance, 0.5)) * '
                                      'length(scene_sky_irradiance);\n'
                                      '        shadow_factor = max(shadow_factor, ambient_light);\n'
                                      '\n'
                                      '        diffuse_light += ibl_diffuse_light * shadow_factor;\n'
                                      '        specular_light += ibl_specular_light * shValue * shadow_factor;\n'
                                      '\n'
                                      '         \n'
                                      '        if(RENDER_SSR)\n'
                                      '        {\n'
                                      '            \n'
                                      '            specular_light.xyz = mix(specular_light.xyz, scene_reflect_color.xyz * '
                                      'shValue * shadow_factor, scene_reflect_color.w);\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '#if TRANSPARENT_MATERIAL == 1\n'
                                      '#endif\n'
                                      '\n'
                                      '    \n'
                                      '    {\n'
                                      '        vec3 light_fresnel = fresnelSchlick(HdV, F0);\n'
                                      '\n'
                                      '        \n'
                                      '        diffuse_light += oren_nayar(roughness, NdL, NdV, N, V, L) / PI * NdL * '
                                      'light_color * shadow_factor;\n'
                                      '        specular_light += cooktorrance_specular(light_fresnel, NdL, NdV, NdH, '
                                      'roughness) * NdL * light_color * shadow_factor;\n'
                                      '\n'
                                      '        \n'
                                      '        for(int i=0; i<MAX_POINT_LIGHTS; ++i)\n'
                                      '        {\n'
                                      '            if(1.0 != POINT_LIGHTS[i].render)\n'
                                      '            {\n'
                                      '                break;\n'
                                      '            }\n'
                                      '\n'
                                      '            float point_light_radius = POINT_LIGHTS[i].radius;\n'
                                      '            vec3 point_light_dir = POINT_LIGHTS[i].pos.xyz - world_position;\n'
                                      '            float point_light_dist = length(point_light_dir);\n'
                                      '\n'
                                      '            if(point_light_radius < point_light_dist)\n'
                                      '            {\n'
                                      '                continue;\n'
                                      '            }\n'
                                      '\n'
                                      '            point_light_dir /= point_light_dist;\n'
                                      '\n'
                                      '            vec3 point_light_half = normalize(V + point_light_dir);\n'
                                      '            float point_light_attenuation = clamp(1.0 - point_light_dist / '
                                      'point_light_radius, 0.0, 1.0);\n'
                                      '            point_light_attenuation *= point_light_attenuation;\n'
                                      '            vec3 point_light_color = POINT_LIGHTS[i].color.xyz * '
                                      'point_light_attenuation;\n'
                                      '\n'
                                      '            float point_light_NdL = max(0.01, dot(N, point_light_dir));\n'
                                      '            float point_light_NdH = max(0.01, dot(N, point_light_half));\n'
                                      '\n'
                                      '            diffuse_light += oren_nayar(roughness, point_light_NdL, NdV, N, V, '
                                      'point_light_dir) / PI * point_light_NdL * point_light_color;\n'
                                      '            specular_light += cooktorrance_specular(light_fresnel, point_light_NdL, '
                                      'NdV, point_light_NdH, roughness) * point_light_NdL * point_light_color;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '    \n'
                                      '    diffuse_light *= base_color.xyz * clamp((vec3(1.0) - fresnel) * (1.0 - metallic), '
                                      '0.0, 1.0);\n'
                                      '    specular_light = mix(specular_light, specular_light * base_color.xyz, '
                                      'vec3(metallic));\n'
                                      '\n'
                                      '    result = diffuse_light + specular_light;\n'
                                      '\n'
                                      '    \n'
                                      '    if(RENDER_SSAO)\n'
                                      '    {\n'
                                      '        result *= ssao_factor;\n'
                                      '    }\n'
                                      '\n'
                                      '    \n'
                                      '    result += emissive_color;\n'
                                      '\n'
                                      '    return vec4(max(vec3(0.0), result), opacity);\n'
                                      '}\n'
                                      '#endif /* UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8 */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "default_material.glsl"\n'
                                      '#ifndef UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0\n'
                                      '#define UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '#ifdef MATERIAL_COMPONENTS\n'
                                      '    uniform float brightness;\n'
                                      '    uniform float reflectance;\n'
                                      '    uniform float roughness;\n'
                                      '    uniform float metalicness;\n'
                                      '    uniform float normal_intensity;\n'
                                      '    uniform vec2 uv_tiling;\n'
                                      '    uniform vec4 emissive_color;\n'
                                      '    uniform vec4 diffuse_color;\n'
                                      '    uniform sampler2D texture_diffuse;\n'
                                      '    uniform sampler2D texture_material;\n'
                                      '    uniform sampler2D texture_normal;\n'
                                      '#if TRANSPARENT_MATERIAL == 1\n'
                                      '#endif\n'
                                      '#endif\n'
                                      '\n'
                                      'vec4 get_emissive_color()\n'
                                      '{\n'
                                      '    return emissive_color;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 get_base_color(vec2 tex_coord)\n'
                                      '{\n'
                                      '    vec4 color = texture2D(texture_diffuse, tex_coord);\n'
                                      '    \n'
                                      '    color.xyz = pow(color.xyz, vec3(2.2));\n'
                                      '    color.xyz = color.xyz * brightness * diffuse_color.xyz;\n'
                                      '    return color;\n'
                                      '}\n'
                                      '\n'
                                      'float get_reflection()\n'
                                      '{\n'
                                      '    return 1.0;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 get_edge_tint_color()\n'
                                      '{\n'
                                      '    return vec3(1.0, 1.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 get_sss_color()\n'
                                      '{\n'
                                      '    return vec3(1.0, 1.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float get_sss_scale()\n'
                                      '{\n'
                                      '    return 1.0;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 get_normal(vec2 tex_coord)\n'
                                      '{\n'
                                      '    \n'
                                      '    vec3 normal = texture2D(texture_normal, tex_coord).xzy * 2.0 - 1.0;\n'
                                      '    normal.xz *= normal_intensity;\n'
                                      '    return normalize(normal);\n'
                                      '}\n'
                                      '\n'
                                      'float get_ior()\n'
                                      '{\n'
                                      '    return 1.0;\n'
                                      '}\n'
                                      '\n'
                                      'float get_roughness()\n'
                                      '{\n'
                                      '    return clamp(roughness, 0.05, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float get_metalicness()\n'
                                      '{\n'
                                      '    return metalicness;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 get_world_offset()\n'
                                      '{\n'
                                      '    return vec3(1.0, 1.0, 1.0);\n'
                                      '}\n'
                                      '#endif /* UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0 */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "default_vs.glsl"\n'
                                      '#ifndef UUID_35552d2e_6275_372a_b55a_b42f8a0ce382\n'
                                      '#define UUID_35552d2e_6275_372a_b55a_b42f8a0ce382\n'
                                      '\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "default_material.glsl"\n'
                                      '#ifndef UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0\n'
                                      '#define UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0\n'
                                      '#ifdef MATERIAL_COMPONENTS\n'
                                      '    uniform float brightness;\n'
                                      '    uniform float reflectance;\n'
                                      '    uniform float roughness;\n'
                                      '    uniform float metalicness;\n'
                                      '    uniform float normal_intensity;\n'
                                      '    uniform vec2 uv_tiling;\n'
                                      '    uniform vec4 emissive_color;\n'
                                      '    uniform vec4 diffuse_color;\n'
                                      '    uniform sampler2D texture_diffuse;\n'
                                      '    uniform sampler2D texture_material;\n'
                                      '    uniform sampler2D texture_normal;\n'
                                      '#if TRANSPARENT_MATERIAL == 1\n'
                                      '#endif\n'
                                      '#endif\n'
                                      '#endif /* UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0 */\n'
                                      '\n'
                                      'uniform bool is_instancing;\n'
                                      'uniform mat4 model;\n'
                                      '\n'
                                      '#if 1 == SKELETAL\n'
                                      'uniform mat4 bone_matrices[MAX_BONES];\n'
                                      'uniform mat4 prev_bone_matrices[MAX_BONES];\n'
                                      '#endif\n'
                                      '\n'
                                      'struct VERTEX_OUTPUT\n'
                                      '{\n'
                                      '    vec3 world_position;\n'
                                      '    vec3 vertex_normal;\n'
                                      '    vec4 vertex_color;\n'
                                      '    vec2 tex_coord;\n'
                                      '    mat4 tangent_to_world;\n'
                                      '    vec4 projection_pos;\n'
                                      '    vec4 prev_projection_pos;\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '#ifdef VERTEX_SHADER\n'
                                      '#if 1 == SKELETAL\n'
                                      'layout (location = 5) in vec4 vs_in_bone_indicies;\n'
                                      'layout (location = 6) in vec4 vs_in_bone_weights;\n'
                                      '#endif\n'
                                      '#if 1 == SKELETAL\n'
                                      '    for(int i=0; i<MAX_BONES_PER_VERTEX; ++i)\n'
                                      '    {\n'
                                      '        prev_position += (prev_bone_matrices[int(vs_in_bone_indicies[i])] * '
                                      'vec4(vs_in_position, 1.0)) * vs_in_bone_weights[i];\n'
                                      '        position += (bone_matrices[int(vs_in_bone_indicies[i])] * vec4(vs_in_position, '
                                      '1.0)) * vs_in_bone_weights[i];\n'
                                      '        vertex_normal += (bone_matrices[int(vs_in_bone_indicies[i])] * '
                                      'vec4(vs_in_normal, 0.0)).xyz * vs_in_bone_weights[i];\n'
                                      '        vertex_tangent += (bone_matrices[int(vs_in_bone_indicies[i])] * '
                                      'vec4(vs_in_tangent, 0.0)).xyz * vs_in_bone_weights[i];\n'
                                      '    }\n'
                                      '    position /= position.w;\n'
                                      '    prev_position /= prev_position.w;\n'
                                      '#else\n'
                                      '#endif\n'
                                      '#endif\n'
                                      '#endif /* UUID_35552d2e_6275_372a_b55a_b42f8a0ce382 */\n'
                                      '\n'
                                      'uniform bool is_render_gbuffer;\n'
                                      '\n'
                                      'uniform sampler2D texture_depth;\n'
                                      'uniform sampler2D texture_shadow;\n'
                                      'uniform sampler2D texture_ssao;\n'
                                      'uniform sampler2D texture_scene_reflect;\n'
                                      'uniform samplerCube texture_probe;\n'
                                      '\n'
                                      '#ifdef FRAGMENT_SHADER\n'
                                      'layout (location = 0) in VERTEX_OUTPUT vs_output;\n'
                                      '\n'
                                      'layout (location = 0) out vec4 fs_diffuse;\n'
                                      'layout (location = 1) out vec4 fs_material;\n'
                                      'layout (location = 2) out vec4 fs_normal;\n'
                                      '#if 1 == SKELETAL\n'
                                      'layout (location = 3) out vec2 fs_velocity;\n'
                                      '#endif\n'
                                      '\n'
                                      'void main()\n'
                                      '{\n'
                                      '    vec2 screen_tex_coord = vs_output.projection_pos.xy / vs_output.projection_pos.w * '
                                      '0.5 + 0.5;\n'
                                      '    float depth = texture2D(texture_depth, screen_tex_coord).x;\n'
                                      '    vec4 base_color = get_base_color(vs_output.tex_coord.xy);\n'
                                      '\n'
                                      '#if TRANSPARENT_MATERIAL == 1\n'
                                      '#else\n'
                                      '    if(base_color.a < 0.333)\n'
                                      '    {\n'
                                      '        discard;\n'
                                      '    }\n'
                                      '#endif\n'
                                      '\n'
                                      '    vec4 emissive_color = get_emissive_color();\n'
                                      '    vec4 material_factors = texture2D(texture_material, vs_output.tex_coord.xy);\n'
                                      '    float ao_factor = material_factors.x;\n'
                                      '    float roughness_factor = material_factors.y * get_roughness();\n'
                                      '    float metallic_factor = material_factors.z * get_metalicness();\n'
                                      '\n'
                                      '    base_color.xyz *= ao_factor;\n'
                                      '\n'
                                      '    vec3 N = get_normal(vs_output.tex_coord.xy);\n'
                                      '\n'
                                      '    \n'
                                      '    N = normalize((vs_output.tangent_to_world * vec4(N, 0.0)).xyz);\n'
                                      '    vec3 V = normalize(CAMERA_POSITION.xyz - vs_output.world_position);\n'
                                      '    vec3 L = normalize(LIGHT_DIRECTION.xyz);\n'
                                      '\n'
                                      '    \n'
                                      '    if(is_render_gbuffer)\n'
                                      '    {\n'
                                      '        fs_diffuse.xyz = base_color.xyz + base_color.xyz * emissive_color.xyz * '
                                      'emissive_color.w * 0.5;\n'
                                      '        \n'
                                      '        fs_diffuse.w = saturate(get_luminance(emissive_color.xyz * 0.5) * '
                                      'emissive_color.w * 0.1);\n'
                                      '        fs_material = vec4(roughness_factor, metalicness, reflectance, 0.0);\n'
                                      '        fs_normal = vec4(N * 0.5 + 0.5, 0.0);\n'
                                      '#if 1 == SKELETAL\n'
                                      '        fs_velocity = (vs_output.projection_pos.xy / vs_output.projection_pos.w) - '
                                      '(vs_output.prev_projection_pos.xy / vs_output.prev_projection_pos.w);\n'
                                      '        \n'
                                      '        fs_velocity *= 0.5;\n'
                                      '        fs_velocity.xy -= JITTER_DELTA;\n'
                                      '#endif\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        \n'
                                      '        fs_diffuse = surface_shading(\n'
                                      '                        base_color,\n'
                                      '                        base_color.xyz * emissive_color.xyz * emissive_color.w,\n'
                                      '                        metalicness,\n'
                                      '                        metallic_factor,\n'
                                      '                        reflectance,\n'
                                      '                        texture2D(texture_ssao, screen_tex_coord).x,\n'
                                      '                        texture2D(texture_scene_reflect, screen_tex_coord),\n'
                                      '                        texture_probe,\n'
                                      '                        texture_shadow,\n'
                                      '                        screen_tex_coord,\n'
                                      '                        vs_output.world_position,\n'
                                      '                        LIGHT_COLOR.xyz,\n'
                                      '                        N,\n'
                                      '                        V,\n'
                                      '                        L,\n'
                                      '                        depth);\n'
                                      '    }\n'
                                      '}\n'
                                      '#endif',
                  GL_VERTEX_SHADER: '#version 430 core\n'
                                    '# extension GL_EXT_texture_array : enable\n'
                                    '#define MATERIAL_COMPONENTS 1\n'
                                    '#define VERTEX_SHADER 1\n'
                                    '#define TRANSPARENT_MATERIAL 0\n'
                                    '#define SKELETAL 1\n'
                                    '#define COMBINED_SCATTERING_TEXTURES 0\n'
                                    '#if __VERSION__ >= 130\n'
                                    '#define texture2D texture\n'
                                    '#define texture2DLod textureLod\n'
                                    '#define texture2DGrad textureGrad\n'
                                    '#define texture2DArray texture\n'
                                    '#define texture2DArrayLod textureLod\n'
                                    '#define texture2DArrayGrad textureGrad\n'
                                    '#define texture3D texture\n'
                                    '#define texture3DLod textureLod\n'
                                    '#define texture3DGrad textureGrad\n'
                                    '#define textureCube texture\n'
                                    '#define textureCubeLod textureLod\n'
                                    '#define textureCubeGrad textureGrad\n'
                                    '#endif\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    'layout(std140, binding=0) uniform scene_constants\n'
                                    '{\n'
                                    '    float TIME;\n'
                                    '    float JITTER_FRAME;\n'
                                    '    bool RENDER_SSR;\n'
                                    '    bool RENDER_SSAO;\n'
                                    '    vec2 SCREEN_SIZE;\n'
                                    '    vec2 BACKBUFFER_SIZE;\n'
                                    '    vec2 MOUSE_POS;\n'
                                    '    float DELTA_TIME;\n'
                                    '    int SCENE_DUMMY_0;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=1) uniform view_constants\n'
                                    '{\n'
                                    '    mat4 VIEW;\n'
                                    '    mat4 INV_VIEW;\n'
                                    '    mat4 VIEW_ORIGIN;\n'
                                    '    mat4 INV_VIEW_ORIGIN;\n'
                                    '    mat4 PROJECTION;\n'
                                    '    mat4 INV_PROJECTION;\n'
                                    '    vec3 CAMERA_POSITION;\n'
                                    '    float VIEW_DUMMY_0;\n'
                                    '    vec2 NEAR_FAR;\n'
                                    '    vec2 JITTER_DELTA;\n'
                                    '    vec2 JITTER_OFFSET;\n'
                                    '    vec2 VIEWCONSTANTS_DUMMY0;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=2) uniform view_projection\n'
                                    '{\n'
                                    '    mat4 VIEW_PROJECTION;\n'
                                    '    mat4 PREV_VIEW_PROJECTION;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=3) uniform light_constants\n'
                                    '{\n'
                                    '    mat4 SHADOW_MATRIX;\n'
                                    '    vec3 LIGHT_POSITION;\n'
                                    '    float SHADOW_EXP;\n'
                                    '    vec3 LIGHT_DIRECTION;\n'
                                    '    float SHADOW_BIAS;\n'
                                    '    vec3 LIGHT_COLOR;\n'
                                    '    int SHADOW_SAMPLES;\n'
                                    '};\n'
                                    '\n'
                                    'const int MAX_POINT_LIGHTS = 10;\n'
                                    '\n'
                                    'struct POINT_LIGHT\n'
                                    '{\n'
                                    '    vec3 color;\n'
                                    '    float radius;\n'
                                    '    vec3 pos;\n'
                                    '    float render;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=4) uniform point_light_constants\n'
                                    '{\n'
                                    '    POINT_LIGHT POINT_LIGHTS[MAX_POINT_LIGHTS];\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    'layout(std140, binding=5) uniform particle_common\n'
                                    '{\n'
                                    '    vec3 PARTICLE_COLOR;\n'
                                    '    int PARTICLE_ALIGN_MODE;\n'
                                    '    ivec2 PARTICLE_CELL_COUNT;\n'
                                    '    int PARTICLE_BLEND_MODE;\n'
                                    '    int PARTICLE_COMMON_DUMMY_0;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=6) uniform particle_infos\n'
                                    '{\n'
                                    '    mat4 PARTICLE_PARENT_MATRIX;\n'
                                    '    vec2 PARTICLE_DELAY;\n'
                                    '    vec2 PARTICLE_LIFE_TIME;\n'
                                    '    vec3 PARTICLE_TRANSFORM_ROTATION_MIN;\n'
                                    '    float PARTICLE_FADE_IN;\n'
                                    '    vec3 PARTICLE_TRANSFORM_ROTATION_MAX;\n'
                                    '    float PARTICLE_FADE_OUT;\n'
                                    '    vec3 PARTICLE_TRANSFORM_SCALE_MIN;\n'
                                    '    float PARTICLE_OPACITY;\n'
                                    '    vec3 PARTICLE_TRANSFORM_SCALE_MAX;\n'
                                    '    bool PARTICLE_ENABLE_VECTOR_FIELD;\n'
                                    '    vec3 PARTICLE_VELOCITY_POSITION_MIN;\n'
                                    '    float PARTICLE_VECTOR_FIELD_STRENGTH;\n'
                                    '    vec3 PARTICLE_VELOCITY_POSITION_MAX;\n'
                                    '    float PARTICLE_VECTOR_FIELD_TIGHTNESS;\n'
                                    '    vec3 PARTICLE_VELOCITY_ROTATION_MIN;\n'
                                    '    uint PARTICLE_MAX_COUNT;\n'
                                    '    vec3 PARTICLE_VELOCITY_ROTATION_MAX;\n'
                                    '    uint PARTICLE_SPAWN_COUNT;\n'
                                    '    vec3 PARTICLE_VELOCITY_SCALE_MIN;\n'
                                    '    float PARTICLE_VELOCITY_STRETCH;\n'
                                    '    vec3 PARTICLE_VELOCITY_SCALE_MAX;\n'
                                    '    float PARTICLE_VELOCITY_ACCELERATION;\n'
                                    '    mat4 PARTICLE_VECTOR_FIELD_MATRIX;\n'
                                    '    mat4 PARTICLE_VECTOR_FIELD_INV_MATRIX;\n'
                                    '    vec3 PARTICLE_SPAWN_VOLUME_INFO;\n'
                                    '    uint PARTICLE_SPAWN_VOLUME_TYPE;\n'
                                    '    mat4 PARTICLE_SPAWN_VOLUME_MATRIX;\n'
                                    '    vec2 PARTICLE_VELOCITY_LIMIT;\n'
                                    '    float PARTICLE_FORCE_GRAVITY;\n'
                                    '    float PARTICLE_PLAY_SPEED;\n'
                                    '    uint PARTICLE_VELOCITY_TYPE;\n'
                                    '    float PARTICLE_FORCE_ELASTICITY;\n'
                                    '    float PARTICLE_FORCE_FRICTION;\n'
                                    '    uint PARTICLE_DUMMY_0;\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'const int BLEND = 0;\n'
                                    'const int ADDITIVE = 1;\n'
                                    'const int MULTIPLY = 2;\n'
                                    'const int SUBTRACT = 3;\n'
                                    '\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '\n'
                                    'const int MAX_BONES_PER_VERTEX = 4;\n'
                                    'const int MAX_BONES = 100;\n'
                                    '\n'
                                    'const float PI = 3.14159265358979323846;\n'
                                    'const float HALF_PI = PI * 0.5;\n'
                                    'const float TWO_PI = PI * 2.0;\n'
                                    'const float deg = PI / 180.0;\n'
                                    '\n'
                                    'const vec3 kSphereCenter = vec3(1.0, 1.0, -2.0);\n'
                                    'const float kSphereRadius = 1.0;\n'
                                    'const vec3 kSphereAlbedo = vec3(0.8);\n'
                                    'const vec3 kGroundAlbedo = vec3(0.0, 0.0, 0.04);\n'
                                    '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "utility.glsl"\n'
                                    '#ifndef UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                    '#define UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                    '\n'
                                    'const int FilterTypes_Box = 0;\n'
                                    'const int FilterTypes_Triangle = 1;\n'
                                    'const int FilterTypes_Gaussian = 2;\n'
                                    'const int FilterTypes_BlackmanHarris = 3;\n'
                                    'const int FilterTypes_Smoothstep = 4;\n'
                                    'const int FilterTypes_BSpline = 5;\n'
                                    'const int FilterTypes_CatmullRom = 6;\n'
                                    'const int FilterTypes_Mitchell = 7;\n'
                                    'const int FilterTypes_GeneralizedCubic = 8;\n'
                                    'const int FilterTypes_Sinc = 9;\n'
                                    '\n'
                                    '\n'
                                    'float FilterBox(in float x)\n'
                                    '{\n'
                                    '    return x <= 1.0 ? 1.0 : 0.0;\n'
                                    '}\n'
                                    '\n'
                                    'float FilterTriangle(in float x)\n'
                                    '{\n'
                                    '    return clamp(1.0f - x, 0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float FilterGaussian(in float x)\n'
                                    '{\n'
                                    '    const float sigma = 0.25;\n'
                                    '    const float g = 1.0f / sqrt(2.0f * 3.14159f * sigma * sigma);\n'
                                    '    return (g * exp(-(x * x) / (2 * sigma * sigma)));\n'
                                    '}\n'
                                    '\n'
                                    'float FilterCubic(in float x, in float B, in float C)\n'
                                    '{\n'
                                    '    float y = 0.0f;\n'
                                    '    float x2 = x * x;\n'
                                    '    float x3 = x * x * x;\n'
                                    '\n'
                                    '    if(x < 1)\n'
                                    '    {\n'
                                    '        y = (12 - 9 * B - 6 * C) * x3 + (-18 + 12 * B + 6 * C) * x2 + (6 - 2 * B);\n'
                                    '    }\n'
                                    '    else if(x <= 2)\n'
                                    '    {\n'
                                    '        y = (-B - 6 * C) * x3 + (6 * B + 30 * C) * x2 + (-12 * B - 48 * C) * x + (8 * B + '
                                    '24 * C);\n'
                                    '    }\n'
                                    '\n'
                                    '    return y / 6.0f;\n'
                                    '}\n'
                                    '\n'
                                    'float FilterSinc(in float x, in float filterRadius)\n'
                                    '{\n'
                                    '    float s;\n'
                                    '    x *= filterRadius * 2.0f;\n'
                                    '    if(x < 0.001f)\n'
                                    '        s = 1.0f;\n'
                                    '    else\n'
                                    '        s = sin(x * PI) / (x * PI);\n'
                                    '    return s;\n'
                                    '}\n'
                                    '\n'
                                    'float FilterBlackmanHarris(in float x)\n'
                                    '{\n'
                                    '    x = 1.0f - x;\n'
                                    '    const float a0 = 0.35875f;\n'
                                    '    const float a1 = 0.48829f;\n'
                                    '    const float a2 = 0.14128f;\n'
                                    '    const float a3 = 0.01168f;\n'
                                    '    return clamp(a0 - a1 * cos(PI * x) + a2 * cos(2 * PI * x) - a3 * cos(3 * PI * x), '
                                    '0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float FilterSmoothstep(in float x)\n'
                                    '{\n'
                                    '    return 1.0f - smoothstep(0.0f, 1.0f, x);\n'
                                    '}\n'
                                    '\n'
                                    'float Filter(in float x, in int filterType, in float filterRadius, in bool rescaleCubic)\n'
                                    '{\n'
                                    '    \n'
                                    '    \n'
                                    '    float cubicX = rescaleCubic ? x * 2.0f : x;\n'
                                    '\n'
                                    '    if(filterType == FilterTypes_Box)\n'
                                    '        return FilterBox(x);\n'
                                    '    else if(filterType == FilterTypes_Triangle)\n'
                                    '        return FilterTriangle(x);\n'
                                    '    else if(filterType == FilterTypes_Gaussian)\n'
                                    '        return FilterGaussian(x);\n'
                                    '    else if(filterType == FilterTypes_BlackmanHarris)\n'
                                    '        return FilterBlackmanHarris(x);\n'
                                    '    else if(filterType == FilterTypes_Smoothstep)\n'
                                    '        return FilterSmoothstep(x);\n'
                                    '    else if(filterType == FilterTypes_BSpline)\n'
                                    '        return FilterCubic(cubicX, 1.0, 0.0f);\n'
                                    '    else if(filterType == FilterTypes_CatmullRom)\n'
                                    '        return FilterCubic(cubicX, 0, 0.5f);\n'
                                    '    else if(filterType == FilterTypes_Mitchell)\n'
                                    '        return FilterCubic(cubicX, 1 / 3.0f, 1 / 3.0f);\n'
                                    '    else if(filterType == FilterTypes_GeneralizedCubic)\n'
                                    '        return FilterCubic(cubicX, 0.33, 0.33);\n'
                                    '    else if(filterType == FilterTypes_Sinc)\n'
                                    '        return FilterSinc(x, filterRadius);\n'
                                    '    else\n'
                                    '        return 1.0f;\n'
                                    '}\n'
                                    '\n'
                                    'float saturate(float value) { return clamp(value, 0.0, 1.0); }\n'
                                    'vec2 saturate(vec2 value) { return clamp(value, 0.0, 1.0); }\n'
                                    'vec3 saturate(vec3 value) { return clamp(value, 0.0, 1.0); }\n'
                                    'vec4 saturate(vec4 value) { return clamp(value, 0.0, 1.0); }\n'
                                    '\n'
                                    'float get_luminance(vec3 color)\n'
                                    '{\n'
                                    '    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float depth_to_linear_depth(float depth)\n'
                                    '{\n'
                                    '    const float zNear = NEAR_FAR.x;\n'
                                    '    const float zFar = NEAR_FAR.y;\n'
                                    '    \n'
                                    '    depth = depth * 2.0 - 1.0;\n'
                                    '    \n'
                                    '    return 2.0 * zNear * zFar / (zFar + zNear - depth * (zFar - zNear));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float linear_depth_to_depth(float linear_depth)\n'
                                    '{\n'
                                    '    const float zNear = NEAR_FAR.x;\n'
                                    '    const float zFar = NEAR_FAR.y;\n'
                                    '    \n'
                                    '    float depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                    '    \n'
                                    '    return depth * 0.5 + 0.5;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 linear_depth_to_depth(vec4 linear_depth)\n'
                                    '{\n'
                                    '    const vec4 zNear = NEAR_FAR.xxxx;\n'
                                    '    const vec4 zFar = NEAR_FAR.yyyy;\n'
                                    '    vec4 depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                    '    return depth * 0.5 + 0.5;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 depth_to_relative_world(vec2 tex_coord, float depth)\n'
                                    '{\n'
                                    '    vec4 clip_coord = vec4(tex_coord * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                    '    vec4 relative_pos = INV_VIEW_ORIGIN * INV_PROJECTION * clip_coord;\n'
                                    '    relative_pos /= relative_pos.w;\n'
                                    '    return relative_pos;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 linear_depth_to_relative_world(vec2 tex_coord, float linear_depth)\n'
                                    '{\n'
                                    '    \n'
                                    '    float depth = linear_depth_to_depth(linear_depth);\n'
                                    '\n'
                                    '    \n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    return depth_to_relative_world(tex_coord, depth);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'float PseudoRandom(vec2 xy)\n'
                                    '{\n'
                                    '    vec2 pos = fract(xy / 128.0f) * 128.0f + vec2(-64.340622f, -72.465622f);\n'
                                    '\n'
                                    '    \n'
                                    '    return fract(dot(pos.xyx * pos.xyy, vec3(20.390625f, 60.703125f, 2.4281209f)));\n'
                                    '}\n'
                                    '\n'
                                    'float rand(vec2 co){\n'
                                    '    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n'
                                    '}\n'
                                    '\n'
                                    'float rand3(vec3 uvw, float scale)\n'
                                    '{\n'
                                    '\treturn fract(sin(dot(uvw, vec3(12.9898, 78.233, 45.164))) * 43758.5453123);\n'
                                    '}\n'
                                    '\n'
                                    'float rand4(vec4 seed4){\n'
                                    '    return fract(sin(dot(seed4, vec4(12.9898, 78.233, 45.164, 94.673))) * '
                                    '43758.5453123);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec4 generate_random(float random_seed)\n'
                                    '{\n'
                                    '    vec4 random_factor;\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_seed));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                    '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                    '    return random_factor;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random1(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.w = random_factor.x;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random2(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.w = random_factor.y;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random3(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                    '    random_factor.w = random_factor.z;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random4(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                    '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 invert_y(vec3 vector)\n'
                                    '{\n'
                                    '    return vec3(vector.x, -vector.y, vector.z);\n'
                                    '}\n'
                                    '\n'
                                    'float safe_atan(float y, float x)\n'
                                    '{\n'
                                    '    return mod(atan(y, x), TWO_PI);\n'
                                    '}\n'
                                    '\n'
                                    'vec2 safe_normalize(vec2 vector)\n'
                                    '{\n'
                                    '    float dist = length(vector);\n'
                                    '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 safe_normalize(vec3 vector)\n'
                                    '{\n'
                                    '    float dist = length(vector);\n'
                                    '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                    '}\n'
                                    '\n'
                                    'vec4 safe_normalize(vec4 vector)\n'
                                    '{\n'
                                    '    float dist = length(vector);\n'
                                    '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                    '}\n'
                                    '#endif /* UUID_e77aaefb_1a04_384d_928f_4a7739be43fb */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "shading.glsl"\n'
                                    '#ifndef UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8\n'
                                    '#define UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "PCFKernels.glsl"\n'
                                    '#ifndef UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                    '#define UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'const int PoissonSampleCount = 64;\n'
                                    '\n'
                                    '\n'
                                    'const vec2 PoissonSamples[PoissonSampleCount] =\n'
                                    '{\n'
                                    '    vec2(-0.5119625f, -0.4827938f),\n'
                                    '    vec2(-0.2171264f, -0.4768726f),\n'
                                    '    vec2(-0.7552931f, -0.2426507f),\n'
                                    '    vec2(-0.7136765f, -0.4496614f),\n'
                                    '    vec2(-0.5938849f, -0.6895654f),\n'
                                    '    vec2(-0.3148003f, -0.7047654f),\n'
                                    '    vec2(-0.42215f, -0.2024607f),\n'
                                    '    vec2(-0.9466816f, -0.2014508f),\n'
                                    '    vec2(-0.8409063f, -0.03465778f),\n'
                                    '    vec2(-0.6517572f, -0.07476326f),\n'
                                    '    vec2(-0.1041822f, -0.02521214f),\n'
                                    '    vec2(-0.3042712f, -0.02195431f),\n'
                                    '    vec2(-0.5082307f, 0.1079806f),\n'
                                    '    vec2(-0.08429877f, -0.2316298f),\n'
                                    '    vec2(-0.9879128f, 0.1113683f),\n'
                                    '    vec2(-0.3859636f, 0.3363545f),\n'
                                    '    vec2(-0.1925334f, 0.1787288f),\n'
                                    '    vec2(0.003256182f, 0.138135f),\n'
                                    '    vec2(-0.8706837f, 0.3010679f),\n'
                                    '    vec2(-0.6982038f, 0.1904326f),\n'
                                    '    vec2(0.1975043f, 0.2221317f),\n'
                                    '    vec2(0.1507788f, 0.4204168f),\n'
                                    '    vec2(0.3514056f, 0.09865579f),\n'
                                    '    vec2(0.1558783f, -0.08460935f),\n'
                                    '    vec2(-0.0684978f, 0.4461993f),\n'
                                    '    vec2(0.3780522f, 0.3478679f),\n'
                                    '    vec2(0.3956799f, -0.1469177f),\n'
                                    '    vec2(0.5838975f, 0.1054943f),\n'
                                    '    vec2(0.6155105f, 0.3245716f),\n'
                                    '    vec2(0.3928624f, -0.4417621f),\n'
                                    '    vec2(0.1749884f, -0.4202175f),\n'
                                    '    vec2(0.6813727f, -0.2424808f),\n'
                                    '    vec2(-0.6707711f, 0.4912741f),\n'
                                    '    vec2(0.0005130528f, -0.8058334f),\n'
                                    '    vec2(0.02703013f, -0.6010728f),\n'
                                    '    vec2(-0.1658188f, -0.9695674f),\n'
                                    '    vec2(0.4060591f, -0.7100726f),\n'
                                    '    vec2(0.7713396f, -0.4713659f),\n'
                                    '    vec2(0.573212f, -0.51544f),\n'
                                    '    vec2(-0.3448896f, -0.9046497f),\n'
                                    '    vec2(0.1268544f, -0.9874692f),\n'
                                    '    vec2(0.7418533f, -0.6667366f),\n'
                                    '    vec2(0.3492522f, 0.5924662f),\n'
                                    '    vec2(0.5679897f, 0.5343465f),\n'
                                    '    vec2(0.5663417f, 0.7708698f),\n'
                                    '    vec2(0.7375497f, 0.6691415f),\n'
                                    '    vec2(0.2271994f, -0.6163502f),\n'
                                    '    vec2(0.2312844f, 0.8725659f),\n'
                                    '    vec2(0.4216993f, 0.9002838f),\n'
                                    '    vec2(0.4262091f, -0.9013284f),\n'
                                    '    vec2(0.2001408f, -0.808381f),\n'
                                    '    vec2(0.149394f, 0.6650763f),\n'
                                    '    vec2(-0.09640376f, 0.9843736f),\n'
                                    '    vec2(0.7682328f, -0.07273844f),\n'
                                    '    vec2(0.04146584f, 0.8313184f),\n'
                                    '    vec2(0.9705266f, -0.1143304f),\n'
                                    '    vec2(0.9670017f, 0.1293385f),\n'
                                    '    vec2(0.9015037f, -0.3306949f),\n'
                                    '    vec2(-0.5085648f, 0.7534177f),\n'
                                    '    vec2(0.9055501f, 0.3758393f),\n'
                                    '    vec2(0.7599946f, 0.1809109f),\n'
                                    '    vec2(-0.2483695f, 0.7942952f),\n'
                                    '    vec2(-0.4241052f, 0.5581087f),\n'
                                    '    vec2(-0.1020106f, 0.6724468f),\n'
                                    '};\n'
                                    '#endif /* UUID_771b849e_fec4_3936_8f65_94ea74cfac5c */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "utility.glsl"\n'
                                    '#ifndef UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                    '#define UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                    '#endif /* UUID_e77aaefb_1a04_384d_928f_4a7739be43fb */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "precomputed_atmosphere/atmosphere_predefine.glsl"\n'
                                    '#ifndef UUID_8551a787_26aa_3125_a449_7e84cc6a7a01\n'
                                    '#define UUID_8551a787_26aa_3125_a449_7e84cc6a7a01\n'
                                    'const int TRANSMITTANCE_TEXTURE_WIDTH = 256;\n'
                                    'const int TRANSMITTANCE_TEXTURE_HEIGHT = 64;\n'
                                    'const int SCATTERING_TEXTURE_R_SIZE = 32;\n'
                                    'const int SCATTERING_TEXTURE_MU_SIZE = 128;\n'
                                    'const int SCATTERING_TEXTURE_MU_S_SIZE = 32;\n'
                                    'const int SCATTERING_TEXTURE_NU_SIZE = 8;\n'
                                    'const int IRRADIANCE_TEXTURE_WIDTH = 64;\n'
                                    'const int IRRADIANCE_TEXTURE_HEIGHT = 16;\n'
                                    'const vec2 IRRADIANCE_TEXTURE_SIZE = vec2(64, 16);\n'
                                    '\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "precomputed_atmosphere/definitions.glsl"\n'
                                    '#ifndef UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d\n'
                                    '#define UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                    '\n'
                                    '\n'
                                    'uniform vec3 earth_center;\n'
                                    'uniform vec2 sun_size;\n'
                                    'uniform float atmosphere_exposure;\n'
                                    'uniform bool render_light_probe_mode;\n'
                                    '\n'
                                    'uniform sampler2D transmittance_texture;\n'
                                    'uniform sampler2D irradiance_texture;\n'
                                    'uniform sampler3D scattering_texture;\n'
                                    'uniform sampler3D single_mie_scattering_texture;\n'
                                    'uniform sampler3D single_rayleigh_scattering_texture;\n'
                                    'uniform sampler3D scattering_density_texture;\n'
                                    'uniform sampler3D multiple_scattering_texture;\n'
                                    '\n'
                                    '\n'
                                    'uniform vec3 SKY_RADIANCE_TO_LUMINANCE;\n'
                                    'uniform vec3 SUN_RADIANCE_TO_LUMINANCE;\n'
                                    '\n'
                                    'const float atmosphere_ratio = 0.1;\n'
                                    '\n'
                                    'struct DensityProfileLayer\n'
                                    '{\n'
                                    '    float width;\n'
                                    '    float exp_term;\n'
                                    '    float exp_scale;\n'
                                    '    float linear_term;\n'
                                    '    float constant_term;\n'
                                    '};\n'
                                    '\n'
                                    'struct DensityProfile\n'
                                    '{\n'
                                    '    DensityProfileLayer layers[2];\n'
                                    '};\n'
                                    '\n'
                                    'struct AtmosphereParameters\n'
                                    '{\n'
                                    '    vec3 solar_irradiance;\n'
                                    '    float sun_angular_radius;\n'
                                    '    float bottom_radius;\n'
                                    '    float top_radius;\n'
                                    '    DensityProfile rayleigh_density;\n'
                                    '    vec3 rayleigh_scattering;\n'
                                    '    DensityProfile mie_density;\n'
                                    '    vec3 mie_scattering;\n'
                                    '    vec3 mie_extinction;\n'
                                    '    float mie_phase_function_g;\n'
                                    '    DensityProfile absorption_density;\n'
                                    '    vec3 absorption_extinction;\n'
                                    '    vec3 ground_albedo;\n'
                                    '    float mu_s_min;\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    'float ClampCosine(float mu)\n'
                                    '{\n'
                                    '    return clamp(mu, -1.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float ClampDistance(float d)\n'
                                    '{\n'
                                    '    return max(d, 0.0);\n'
                                    '}\n'
                                    '\n'
                                    'float ClampRadius(const in AtmosphereParameters atmosphere, float r)\n'
                                    '{\n'
                                    '    return clamp(r, atmosphere.bottom_radius, atmosphere.top_radius);\n'
                                    '}\n'
                                    '\n'
                                    'float SafeSqrt(float a)\n'
                                    '{\n'
                                    '    return sqrt(max(a, 0.0));\n'
                                    '}\n'
                                    '\n'
                                    'float DistanceToTopAtmosphereBoundary(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu)\n'
                                    '{\n'
                                    '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.top_radius * '
                                    'atmosphere.top_radius;\n'
                                    '    return ClampDistance(-r * mu + SafeSqrt(discriminant));\n'
                                    '}\n'
                                    '\n'
                                    'float DistanceToBottomAtmosphereBoundary(const in AtmosphereParameters atmosphere, float '
                                    'r, float mu)\n'
                                    '{\n'
                                    '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '    return ClampDistance(-r * mu - SafeSqrt(discriminant));\n'
                                    '}\n'
                                    '\n'
                                    'bool RayIntersectsGround(const in AtmosphereParameters atmosphere, float r, float mu)\n'
                                    '{\n'
                                    '    if(mu < 0.0)\n'
                                    '    {\n'
                                    '        float result = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '        if(0.0 <= result)\n'
                                    '        {\n'
                                    '            return true;\n'
                                    '        }\n'
                                    '    }\n'
                                    '    return false;\n'
                                    '}\n'
                                    '\n'
                                    'float GetLayerDensity(const in DensityProfileLayer layer, float altitude)\n'
                                    '{\n'
                                    '    float density =\n'
                                    '        layer.exp_term * exp(layer.exp_scale * altitude) + layer.linear_term * altitude + '
                                    'layer.constant_term;\n'
                                    '    return clamp(density, 0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float GetProfileDensity(const in DensityProfile profile, float altitude)\n'
                                    '{\n'
                                    '    return altitude < profile.layers[0].width ?\n'
                                    '        GetLayerDensity(profile.layers[0], altitude) : GetLayerDensity(profile.layers[1], '
                                    'altitude);\n'
                                    '}\n'
                                    '\n'
                                    'float ComputeOpticalLengthToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in DensityProfile profile,\n'
                                    '    float r,\n'
                                    '    float mu)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 500;\n'
                                    '    float dx = DistanceToTopAtmosphereBoundary(atmosphere, r, mu) / float(SAMPLE_COUNT);\n'
                                    '    float result = 0.0;\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);\n'
                                    '        float y_i = GetProfileDensity(profile, r_i - atmosphere.bottom_radius);\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        result += y_i * weight_i * dx;\n'
                                    '    }\n'
                                    '    return result;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeTransmittanceToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu)\n'
                                    '{\n'
                                    '    return exp(-(\n'
                                    '        atmosphere.rayleigh_scattering *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.rayleigh_density, r, mu) +\n'
                                    '        atmosphere.mie_extinction *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.mie_density, r, mu) +\n'
                                    '        atmosphere.absorption_extinction *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.absorption_density, r, mu)));\n'
                                    '}\n'
                                    '\n'
                                    'float GetTextureCoordFromUnitRange(float x, int texture_size)\n'
                                    '{\n'
                                    '    return 0.5 / float(texture_size) + x * (1.0 - 1.0 / float(texture_size));\n'
                                    '}\n'
                                    '\n'
                                    'float GetUnitRangeFromTextureCoord(float u, int texture_size)\n'
                                    '{\n'
                                    '    return (u - 0.5 / float(texture_size)) / (1.0 - 1.0 / float(texture_size));\n'
                                    '}\n'
                                    '\n'
                                    'vec2 GetTransmittanceTextureUvFromRMu(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                    '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float d = DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '    float d_min = atmosphere.top_radius - r;\n'
                                    '    float d_max = rho + H;\n'
                                    '    float x_mu = (d - d_min) / (d_max - d_min);\n'
                                    '    float x_r = rho / H;\n'
                                    '    return vec2(GetTextureCoordFromUnitRange(x_mu, TRANSMITTANCE_TEXTURE_WIDTH),\n'
                                    '              GetTextureCoordFromUnitRange(x_r, TRANSMITTANCE_TEXTURE_HEIGHT));\n'
                                    '}\n'
                                    '\n'
                                    'void GetRMuFromTransmittanceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 uv, out float r, out float mu)\n'
                                    '{\n'
                                    '    float x_mu = GetUnitRangeFromTextureCoord(uv.x, TRANSMITTANCE_TEXTURE_WIDTH);\n'
                                    '    float x_r = GetUnitRangeFromTextureCoord(uv.y, TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                    '\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                    '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '\n'
                                    '    float rho = H * x_r;\n'
                                    '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float d_min = atmosphere.top_radius - r;\n'
                                    '    float d_max = rho + H;\n'
                                    '    float d = d_min + x_mu * (d_max - d_min);\n'
                                    '    mu = (d == 0.0) ? 1.0 : (H * H - rho * rho - d * d) / (2.0 * r * d);\n'
                                    '    mu = ClampCosine(mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeTransmittanceToTopAtmosphereBoundarytexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 gl_frag_coord)\n'
                                    '{\n'
                                    '    const vec2 TRANSMITTANCE_TEXTURE_SIZE = vec2(TRANSMITTANCE_TEXTURE_WIDTH, '
                                    'TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    GetRMuFromTransmittanceTextureUv(atmosphere, gl_frag_coord / '
                                    'TRANSMITTANCE_TEXTURE_SIZE, r, mu);\n'
                                    '    return ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittanceToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r, float mu)\n'
                                    '{\n'
                                    '    vec2 uv = GetTransmittanceTextureUvFromRMu(atmosphere, r, mu);\n'
                                    '    return vec3(texture2D(transmittance_texture, uv));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float d,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_d = ClampCosine((r * mu + d) / r_d);\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        return min(\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                    'r_d, -mu_d) /\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    '-mu),\n'
                                    '            vec3(1.0));\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        return min(\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu) /\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                    'r_d, mu_d),\n'
                                    '            vec3(1.0));\n'
                                    '    }\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittanceToSun(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    float sin_theta_h = atmosphere.bottom_radius / r;\n'
                                    '    float cos_theta_h = -sqrt(max(1.0 - sin_theta_h * sin_theta_h, 0.0));\n'
                                    '    return GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu_s) *\n'
                                    '      smoothstep(-sin_theta_h * atmosphere.sun_angular_radius,\n'
                                    '                 sin_theta_h * atmosphere.sun_angular_radius,\n'
                                    '                 mu_s - cos_theta_h);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScatteringIntegrand(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    float d,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 rayleigh,\n'
                                    '    out vec3 mie)\n'
                                    '{\n'
                                    '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_s_d = ClampCosine((r * mu_s + d * nu) / r_d);\n'
                                    '    vec3 transmittance =\n'
                                    '        GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                    'ray_r_mu_intersects_ground) *\n'
                                    '        GetTransmittanceToSun(atmosphere, transmittance_texture, r_d, mu_s_d);\n'
                                    '    rayleigh = transmittance * GetProfileDensity(atmosphere.rayleigh_density, r_d - '
                                    'atmosphere.bottom_radius);\n'
                                    '    mie = transmittance * GetProfileDensity(atmosphere.mie_density, r_d - '
                                    'atmosphere.bottom_radius);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float DistanceToNearestAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        return DistanceToBottomAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '    }\n'
                                    '    return DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 rayleigh,\n'
                                    '    out vec3 mie)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 50;\n'
                                    '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                    'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                    '\n'
                                    '    vec3 rayleigh_sum = vec3(0.0);\n'
                                    '    vec3 mie_sum = vec3(0.0);\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        vec3 rayleigh_i;\n'
                                    '        vec3 mie_i;\n'
                                    '        ComputeSingleScatteringIntegrand(\n'
                                    '            atmosphere, transmittance_texture, r, mu, mu_s, nu, d_i, '
                                    'ray_r_mu_intersects_ground, rayleigh_i, mie_i);\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        rayleigh_sum += rayleigh_i * weight_i;\n'
                                    '        mie_sum += mie_i * weight_i;\n'
                                    '    }\n'
                                    '    rayleigh = rayleigh_sum * dx * atmosphere.solar_irradiance * '
                                    'atmosphere.rayleigh_scattering;\n'
                                    '    mie = mie_sum * dx * atmosphere.solar_irradiance * atmosphere.mie_scattering;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float RayleighPhaseFunction(float nu)\n'
                                    '{\n'
                                    '    float k = 3.0 / (16.0 * PI);\n'
                                    '    return k * (1.0 + nu * nu);\n'
                                    '}\n'
                                    '\n'
                                    'float MiePhaseFunction(float g, float nu)\n'
                                    '{\n'
                                    '    float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);\n'
                                    '    return k * (1.0 + nu * nu) / pow(1.0 + g * g - 2.0 * g * nu, 1.5);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec4 GetScatteringTextureUvwzFromRMuMuSNu(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                    'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float u_r = GetTextureCoordFromUnitRange(rho / H, SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    float r_mu = r * mu;\n'
                                    '    float discriminant = r_mu * r_mu - r * r + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '    float u_mu;\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        float d = -r_mu - SafeSqrt(discriminant);\n'
                                    '        float d_min = r - atmosphere.bottom_radius;\n'
                                    '        float d_max = rho;\n'
                                    '        u_mu = 0.5 - 0.5 * GetTextureCoordFromUnitRange(\n'
                                    '            d_max == d_min ? 0.0 : (d - d_min) / (d_max - d_min), '
                                    'SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d = -r_mu + SafeSqrt(discriminant + H * H);\n'
                                    '        float d_min = atmosphere.top_radius - r;\n'
                                    '        float d_max = rho + H;\n'
                                    '        u_mu = 0.5 + 0.5 * GetTextureCoordFromUnitRange(\n'
                                    '            (d - d_min) / (d_max - d_min), SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                    '    }\n'
                                    '\n'
                                    '    float d = DistanceToTopAtmosphereBoundary(atmosphere, atmosphere.bottom_radius, '
                                    'mu_s);\n'
                                    '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                    '    float d_max = H;\n'
                                    '    float a = (d - d_min) / (d_max - d_min);\n'
                                    '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                    '    float u_mu_s = GetTextureCoordFromUnitRange(max(1.0 - a / A, 0.0) / (1.0 + a), '
                                    'SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                    '    float u_nu = (nu + 1.0) / 2.0;\n'
                                    '    return vec4(u_nu, u_mu_s, u_mu, u_r);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuMuSNuFromScatteringTextureUvwz(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec4 uvwz,\n'
                                    '    out float r,\n'
                                    '    out float mu,\n'
                                    '    out float mu_s,\n'
                                    '    out float nu,\n'
                                    '    out bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                    'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = H * GetUnitRangeFromTextureCoord(uvwz.w, SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    if (uvwz.z < 0.5)\n'
                                    '    {\n'
                                    '        float d_min = r - atmosphere.bottom_radius;\n'
                                    '        float d_max = rho;\n'
                                    '        float d = d_min + (d_max - d_min) *\n'
                                    '            GetUnitRangeFromTextureCoord(1.0 - 2.0 * uvwz.z, SCATTERING_TEXTURE_MU_SIZE / '
                                    '2);\n'
                                    '        mu = (d == 0.0) ? -1.0 : ClampCosine(-(rho * rho + d * d) / (2.0 * r * d));\n'
                                    '        ray_r_mu_intersects_ground = true;\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d_min = atmosphere.top_radius - r;\n'
                                    '        float d_max = rho + H;\n'
                                    '        float d = d_min + (d_max - d_min) *\n'
                                    '            GetUnitRangeFromTextureCoord(2.0 * uvwz.z - 1.0, SCATTERING_TEXTURE_MU_SIZE / '
                                    '2);\n'
                                    '        mu = (d == 0.0) ? 1.0 : ClampCosine((H * H - rho * rho - d * d) / (2.0 * r * '
                                    'd));\n'
                                    '        ray_r_mu_intersects_ground = false;\n'
                                    '    }\n'
                                    '\n'
                                    '    float x_mu_s = GetUnitRangeFromTextureCoord(uvwz.y, SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                    '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                    '    float d_max = H;\n'
                                    '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                    '    float a = (A - x_mu_s * A) / (1.0 + x_mu_s * A);\n'
                                    '    float d = d_min + min(a, A) * (d_max - d_min);\n'
                                    '    mu_s = (d == 0.0) ? 1.0 : ClampCosine((H * H - d * d) / (2.0 * '
                                    'atmosphere.bottom_radius * d));\n'
                                    '    nu = ClampCosine(uvwz.x * 2.0 - 1.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuMuSNuFromScatteringTextureFragCoord(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec3 gl_frag_coord,\n'
                                    '    out float r,\n'
                                    '    out float mu,\n'
                                    '    out float mu_s,\n'
                                    '    out float nu,\n'
                                    '    out bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    const vec4 SCATTERING_TEXTURE_SIZE = vec4(\n'
                                    '        SCATTERING_TEXTURE_NU_SIZE - 1,\n'
                                    '        SCATTERING_TEXTURE_MU_S_SIZE,\n'
                                    '        SCATTERING_TEXTURE_MU_SIZE,\n'
                                    '        SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    float frag_coord_nu = floor(gl_frag_coord.x / float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                    '    float frag_coord_mu_s = mod(gl_frag_coord.x, float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                    '    vec4 uvwz = vec4(frag_coord_nu, frag_coord_mu_s, gl_frag_coord.y, gl_frag_coord.z) / '
                                    'SCATTERING_TEXTURE_SIZE;\n'
                                    '    GetRMuMuSNuFromScatteringTextureUvwz(atmosphere, uvwz, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    nu = clamp(\n'
                                    '        nu,\n'
                                    '        mu * mu_s - sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)),\n'
                                    '        mu * mu_s + sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScatteringtexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in vec3 gl_frag_coord,\n'
                                    '    out vec3 rayleigh, out vec3 mie)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    float nu;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground);\n'
                                    '    ComputeSingleScattering(atmosphere, transmittance_texture,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground, rayleigh, mie);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                    '    float tex_x = floor(tex_coord_x);\n'
                                    '    float lerp = tex_coord_x - tex_x;\n'
                                    '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    return vec3(\n'
                                    '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                    'texture3D(scattering_texture, uvw1) * lerp);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    int scattering_order)\n'
                                    '{\n'
                                    '    if (scattering_order == 1)\n'
                                    '    {\n'
                                    '        vec3 rayleigh = GetScattering(\n'
                                    '            atmosphere, single_rayleigh_scattering_texture, r, mu, mu_s, nu,\n'
                                    '            ray_r_mu_intersects_ground);\n'
                                    '        vec3 mie = GetScattering(\n'
                                    '            atmosphere, single_mie_scattering_texture, r, mu, mu_s, nu,\n'
                                    '            ray_r_mu_intersects_ground);\n'
                                    '\n'
                                    '        return rayleigh * RayleighPhaseFunction(nu) + mie * '
                                    'MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '    }\n'
                                    '\n'
                                    '    return GetScattering(atmosphere, multiple_scattering_texture, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r, float mu_s);\n'
                                    '\n'
                                    'vec3 ComputeScatteringDensity(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r, float mu, float mu_s, float nu, int scattering_order)\n'
                                    '{\n'
                                    '    vec3 zenith_direction = vec3(0.0, 0.0, 1.0);\n'
                                    '    vec3 omega = vec3(sqrt(1.0 - mu * mu), 0.0, mu);\n'
                                    '    float sun_dir_x = omega.x == 0.0 ? 0.0 : (nu - mu * mu_s) / omega.x;\n'
                                    '    float sun_dir_y = sqrt(max(1.0 - sun_dir_x * sun_dir_x - mu_s * mu_s, 0.0));\n'
                                    '    vec3 omega_s = vec3(sun_dir_x, sun_dir_y, mu_s);\n'
                                    '\n'
                                    '    const int SAMPLE_COUNT = 16;\n'
                                    '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                    '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                    '    vec3 rayleigh_mie = vec3(0.0);\n'
                                    '\n'
                                    '    for (int l = 0; l < SAMPLE_COUNT; ++l)\n'
                                    '    {\n'
                                    '        float theta = (float(l) + 0.5) * dtheta;\n'
                                    '        float cos_theta = cos(theta);\n'
                                    '        float sin_theta = sin(theta);\n'
                                    '        bool ray_r_theta_intersects_ground = RayIntersectsGround(atmosphere, r, '
                                    'cos_theta);\n'
                                    '\n'
                                    '        float distance_to_ground = 0.0;\n'
                                    '        vec3 transmittance_to_ground = vec3(0.0);\n'
                                    '        vec3 ground_albedo = vec3(0.0);\n'
                                    '        if (ray_r_theta_intersects_ground)\n'
                                    '        {\n'
                                    '            distance_to_ground = DistanceToBottomAtmosphereBoundary(atmosphere, r, '
                                    'cos_theta);\n'
                                    '            transmittance_to_ground = GetTransmittance(atmosphere, transmittance_texture, '
                                    'r, cos_theta, distance_to_ground, true );\n'
                                    '            ground_albedo = atmosphere.ground_albedo;\n'
                                    '        }\n'
                                    '\n'
                                    '        for (int m = 0; m < 2 * SAMPLE_COUNT; ++m)\n'
                                    '        {\n'
                                    '            float phi = 1.5 * dphi;\n'
                                    '            vec3 omega_i = vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);\n'
                                    '            float domega_i = dtheta * dphi * sin(theta);\n'
                                    '\n'
                                    '            float nu1 = dot(omega_s, omega_i);\n'
                                    '            vec3 incident_radiance = GetScattering(atmosphere,\n'
                                    '                single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                    '                multiple_scattering_texture, r, omega_i.z, mu_s, nu1,\n'
                                    '                ray_r_theta_intersects_ground, scattering_order - 1);\n'
                                    '\n'
                                    '            vec3 ground_normal = normalize(zenith_direction * r + omega_i * '
                                    'distance_to_ground);\n'
                                    '            vec3 ground_irradiance = GetIrradiance(\n'
                                    '                atmosphere, irradiance_texture, atmosphere.bottom_radius,\n'
                                    '                dot(ground_normal, omega_s));\n'
                                    '            incident_radiance += transmittance_to_ground * ground_albedo * (1.0 / (PI)) * '
                                    'ground_irradiance;\n'
                                    '\n'
                                    '            float nu2 = dot(omega, omega_i);\n'
                                    '            float rayleigh_density = GetProfileDensity(\n'
                                    '                atmosphere.rayleigh_density, r - atmosphere.bottom_radius);\n'
                                    '            float mie_density = GetProfileDensity(\n'
                                    '                atmosphere.mie_density, r - atmosphere.bottom_radius);\n'
                                    '            rayleigh_mie += incident_radiance *\n'
                                    '                (atmosphere.rayleigh_scattering * rayleigh_density * '
                                    'RayleighPhaseFunction(nu2) +\n'
                                    '                atmosphere.mie_scattering * mie_density *\n'
                                    '                MiePhaseFunction(atmosphere.mie_phase_function_g, nu2)) * domega_i;\n'
                                    '        }\n'
                                    '    }\n'
                                    '    return rayleigh_mie;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeMultipleScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_density_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 50;\n'
                                    '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                    'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                    '    vec3 rayleigh_mie_sum = vec3(0.0);\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        float r_i = ClampRadius(atmosphere, sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * '
                                    'r));\n'
                                    '        float mu_i = ClampCosine((r * mu + d_i) / r_i);\n'
                                    '        float mu_s_i = ClampCosine((r * mu_s + d_i * nu) / r_i);\n'
                                    '        vec3 rayleigh_mie_i =\n'
                                    '            GetScattering(atmosphere, scattering_density_texture, r_i, mu_i, mu_s_i, nu, '
                                    'ray_r_mu_intersects_ground) *\n'
                                    '            GetTransmittance(atmosphere, transmittance_texture, r, mu, d_i, '
                                    'ray_r_mu_intersects_ground) * dx;\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        rayleigh_mie_sum += rayleigh_mie_i * weight_i;\n'
                                    '    }\n'
                                    '    return rayleigh_mie_sum;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeScatteringDensitytexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    const in vec3 gl_frag_coord, int scattering_order)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    float nu;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    return ComputeScatteringDensity(atmosphere, transmittance_texture,\n'
                                    '        single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                    '        multiple_scattering_texture, irradiance_texture, r, mu, mu_s, nu,\n'
                                    '        scattering_order);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeMultipleScatteringtexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_density_texture,\n'
                                    '    const in vec3 gl_frag_coord, out float nu)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    return ComputeMultipleScattering(atmosphere, transmittance_texture,\n'
                                    '        scattering_density_texture, r, mu, mu_s, nu,\n'
                                    '        ray_r_mu_intersects_ground);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeDirectIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    float alpha_s = atmosphere.sun_angular_radius;\n'
                                    '    float average_cosine_factor = 0.0;\n'
                                    '    if(-alpha_s <= mu_s)\n'
                                    '    {\n'
                                    '        if(mu_s <= alpha_s)\n'
                                    '        {\n'
                                    '            average_cosine_factor = (mu_s + alpha_s) * (mu_s + alpha_s) / (4.0 * '
                                    'alpha_s);\n'
                                    '        }\n'
                                    '        else\n'
                                    '        {\n'
                                    '            average_cosine_factor = mu_s;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '    return atmosphere.solar_irradiance *\n'
                                    '        GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu_s) * average_cosine_factor;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeIndirectIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s,\n'
                                    '    int scattering_order)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 32;\n'
                                    '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                    '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                    '\n'
                                    '    vec3 result = vec3(0.0);\n'
                                    '    vec3 omega_s = vec3(sqrt(1.0 - mu_s * mu_s), 0.0, mu_s);\n'
                                    '    for (int j = 0; j < SAMPLE_COUNT / 2; ++j)\n'
                                    '    {\n'
                                    '        float theta = (float(j) + 0.5) * dtheta;\n'
                                    '        for (int i = 0; i < 2 * SAMPLE_COUNT; ++i)\n'
                                    '        {\n'
                                    '            float phi = (float(i) + 0.5) * dphi;\n'
                                    '            vec3 omega = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));\n'
                                    '            float domega = dtheta * dphi * sin(theta);\n'
                                    '            float nu = dot(omega, omega_s);\n'
                                    '            result += GetScattering(\n'
                                    '                atmosphere,\n'
                                    '                single_rayleigh_scattering_texture,\n'
                                    '                single_mie_scattering_texture,\n'
                                    '                multiple_scattering_texture,\n'
                                    '                r, omega.z, mu_s, nu, false, scattering_order) * omega.z * domega;\n'
                                    '        }\n'
                                    '    }\n'
                                    '  return result;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec2 GetIrradianceTextureUvFromRMuS(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu_s)\n'
                                    '{\n'
                                    '    float x_r = (r - atmosphere.bottom_radius) / (atmosphere.top_radius - '
                                    'atmosphere.bottom_radius);\n'
                                    '    float x_mu_s = mu_s * 0.5 + 0.5;\n'
                                    '    return vec2(GetTextureCoordFromUnitRange(x_mu_s, IRRADIANCE_TEXTURE_WIDTH),\n'
                                    '                GetTextureCoordFromUnitRange(x_r, IRRADIANCE_TEXTURE_HEIGHT));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuSFromIrradianceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 uv, out float r, out float mu_s)\n'
                                    '{\n'
                                    '    float x_mu_s = GetUnitRangeFromTextureCoord(uv.x, IRRADIANCE_TEXTURE_WIDTH);\n'
                                    '    float x_r = GetUnitRangeFromTextureCoord(uv.y, IRRADIANCE_TEXTURE_HEIGHT);\n'
                                    '    r = atmosphere.bottom_radius + x_r * (atmosphere.top_radius - '
                                    'atmosphere.bottom_radius);\n'
                                    '    mu_s = ClampCosine(2.0 * x_mu_s - 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ComputeDirectIrradiancetexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in vec2 gl_frag_coord)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu_s;\n'
                                    '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                    'r, mu_s);\n'
                                    '    return ComputeDirectIrradiance(atmosphere, transmittance_texture, r, mu_s);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeIndirectIrradiancetexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in vec2 gl_frag_coord, int scattering_order)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu_s;\n'
                                    '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                    'r, mu_s);\n'
                                    '    return ComputeIndirectIrradiance(atmosphere, single_rayleigh_scattering_texture, '
                                    'single_mie_scattering_texture,\n'
                                    '        multiple_scattering_texture, r, mu_s, scattering_order);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    vec2 uv = GetIrradianceTextureUvFromRMuS(atmosphere, r, mu_s);\n'
                                    '    return vec3(texture2D(irradiance_texture, uv));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    '#endif\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetCombinedScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 single_mie_scattering)\n'
                                    '{\n'
                                    '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                    '    float tex_x = floor(tex_coord_x);\n'
                                    '    float lerp = tex_coord_x - tex_x;\n'
                                    '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    '#else\n'
                                    '    vec3 scattering = vec3(\n'
                                    '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                    'texture3D(scattering_texture, uvw1) * lerp);\n'
                                    '    single_mie_scattering = vec3(\n'
                                    '        texture3D(single_mie_scattering_texture, uvw0) * (1.0 - lerp) +\n'
                                    '        texture3D(single_mie_scattering_texture, uvw1) * lerp);\n'
                                    '#endif\n'
                                    '    return scattering;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeSkyRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    vec3 camera, const in vec3 view_ray, float shadow_length,\n'
                                    '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    float r = length(camera);\n'
                                    '    float rmu = dot(camera, view_ray);\n'
                                    '    float distance_to_top_atmosphere_boundary = -rmu -\n'
                                    '        sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                    '\n'
                                    '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                    '    {\n'
                                    '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                    '        r = atmosphere.top_radius;\n'
                                    '        rmu += distance_to_top_atmosphere_boundary;\n'
                                    '    }\n'
                                    '    else if(r > atmosphere.top_radius)\n'
                                    '    {\n'
                                    '        transmittance = vec3(1.0);\n'
                                    '        return vec3(0.0);\n'
                                    '    }\n'
                                    '\n'
                                    '    float mu = rmu / r;\n'
                                    '    float mu_s = dot(camera, sun_direction) / r;\n'
                                    '    float nu = dot(view_ray, sun_direction);\n'
                                    '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                    '\n'
                                    '    transmittance = ray_r_mu_intersects_ground ?\n'
                                    '        vec3(0.0) : GetTransmittanceToTopAtmosphereBoundary(atmosphere, '
                                    'transmittance_texture, r, mu);\n'
                                    '    vec3 single_mie_scattering;\n'
                                    '    vec3 scattering;\n'
                                    '    if (shadow_length == 0.0)\n'
                                    '    {\n'
                                    '        scattering = GetCombinedScattering(\n'
                                    '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '            r, mu, mu_s, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d = shadow_length;\n'
                                    '        float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '        float mu_p = (r * mu + d) / r_p;\n'
                                    '        float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                    '\n'
                                    '        scattering = GetCombinedScattering(\n'
                                    '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '            r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                    '        vec3 shadow_transmittance =\n'
                                    '            GetTransmittance(atmosphere, transmittance_texture, r, mu, shadow_length, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '        scattering = scattering * shadow_transmittance;\n'
                                    '        single_mie_scattering = single_mie_scattering * shadow_transmittance;\n'
                                    '    }\n'
                                    '\n'
                                    '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                    '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeSkyRadianceToPoint(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    vec3 camera, const in vec3 point, float shadow_length,\n'
                                    '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    vec3 view_ray = normalize(point - camera);\n'
                                    '    float r = length(camera);\n'
                                    '    float rmu = dot(camera, view_ray);\n'
                                    '    float distance_to_top_atmosphere_boundary =\n'
                                    '        -rmu - sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                    '\n'
                                    '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                    '    {\n'
                                    '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                    '        r = atmosphere.top_radius;\n'
                                    '        rmu += distance_to_top_atmosphere_boundary;\n'
                                    '    }\n'
                                    '\n'
                                    '    float mu = rmu / r;\n'
                                    '    float mu_s = dot(camera, sun_direction) / r;\n'
                                    '    float nu = dot(view_ray, sun_direction);\n'
                                    '    float d = length(point - camera);\n'
                                    '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                    '\n'
                                    '    transmittance = GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '\n'
                                    '    vec3 single_mie_scattering;\n'
                                    '    vec3 scattering = GetCombinedScattering(\n'
                                    '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground,\n'
                                    '        single_mie_scattering);\n'
                                    '\n'
                                    '    d = max(d - shadow_length, 0.0);\n'
                                    '    float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_p = (r * mu + d) / r_p;\n'
                                    '    float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                    '\n'
                                    '    vec3 single_mie_scattering_p;\n'
                                    '    vec3 scattering_p = GetCombinedScattering(\n'
                                    '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '        r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground,\n'
                                    '        single_mie_scattering_p);\n'
                                    '\n'
                                    '    vec3 shadow_transmittance = transmittance;\n'
                                    '    if (shadow_length > 0.0)\n'
                                    '    {\n'
                                    '        shadow_transmittance = GetTransmittance(\n'
                                    '            atmosphere, transmittance_texture, r, mu, d, ray_r_mu_intersects_ground);\n'
                                    '    }\n'
                                    '    scattering = scattering - shadow_transmittance * scattering_p;\n'
                                    '    single_mie_scattering = single_mie_scattering - shadow_transmittance * '
                                    'single_mie_scattering_p;\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    '#endif\n'
                                    '\n'
                                    '    single_mie_scattering = single_mie_scattering * smoothstep(0.0, float(0.01), mu_s);\n'
                                    '\n'
                                    '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                    '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ComputeSunAndSkyIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    const in vec3 point, const in vec3 normal, const in vec3 sun_direction,\n'
                                    '    out vec3 sky_irradiance)\n'
                                    '{\n'
                                    '    float r = length(point);\n'
                                    '    float mu_s = dot(point, sun_direction) / r;\n'
                                    '\n'
                                    '    sky_irradiance = GetIrradiance(atmosphere, irradiance_texture, r, mu_s) * (1.0 + '
                                    'dot(normal, point) / r) * 0.5;\n'
                                    '\n'
                                    '    return atmosphere.solar_irradiance *\n'
                                    '        GetTransmittanceToSun(atmosphere, transmittance_texture, r, mu_s) *\n'
                                    '        max(dot(normal, sun_direction), 0.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetSolarRadiance(const in AtmosphereParameters atmosphere)\n'
                                    '{\n'
                                    '    return atmosphere.solar_irradiance /\n'
                                    '        (PI * atmosphere.sun_angular_radius * atmosphere.sun_angular_radius) * '
                                    'SUN_RADIANCE_TO_LUMINANCE * atmosphere_exposure;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSkyRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 view_ray, float '
                                    'shadow_length,\n'
                                    '    vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    return ComputeSkyRadiance(atmosphere, transmittance_texture,\n'
                                    '        scattering_texture, single_mie_scattering_texture,\n'
                                    '        camera, view_ray, shadow_length, sun_direction, transmittance) * '
                                    'SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSkyRadianceToPoint(\n'
                                    '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 point, float '
                                    'shadow_length,\n'
                                    '    vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    return ComputeSkyRadianceToPoint(atmosphere, transmittance_texture,\n'
                                    '        scattering_texture, single_mie_scattering_texture,\n'
                                    '        camera, point, shadow_length, sun_direction, transmittance) * '
                                    'SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSunAndSkyIrradiance(\n'
                                    '   const in AtmosphereParameters atmosphere, vec3 p, vec3 normal, vec3 sun_direction,\n'
                                    '   out vec3 sky_irradiance)\n'
                                    '{\n'
                                    '    vec3 sun_irradiance = ComputeSunAndSkyIrradiance(\n'
                                    '        atmosphere, transmittance_texture, irradiance_texture, p, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '    sky_irradiance *= SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '    return sun_irradiance * SUN_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'float GetSunVisibility(vec3 point, vec3 sun_direction)\n'
                                    '{\n'
                                    '    vec3 p = point - kSphereCenter;\n'
                                    '    float p_dot_v = dot(p, sun_direction);\n'
                                    '    float p_dot_p = dot(p, p);\n'
                                    '    float ray_sphere_center_squared_distance = p_dot_p - p_dot_v * p_dot_v;\n'
                                    '    float distance_to_intersection = -p_dot_v - sqrt(\n'
                                    '        kSphereRadius * kSphereRadius - ray_sphere_center_squared_distance);\n'
                                    '    if (distance_to_intersection > 0.0)\n'
                                    '    {\n'
                                    '        float ray_sphere_distance = kSphereRadius - '
                                    'sqrt(ray_sphere_center_squared_distance);\n'
                                    '        float ray_sphere_angular_distance = -ray_sphere_distance / p_dot_v;\n'
                                    '        return smoothstep(1.0, 0.0, ray_sphere_angular_distance / sun_size.x);\n'
                                    '    }\n'
                                    '    return 1.0;\n'
                                    '}\n'
                                    '\n'
                                    'float GetSkyVisibility(vec3 point)\n'
                                    '{\n'
                                    '  vec3 p = point - kSphereCenter;\n'
                                    '  float p_dot_p = dot(p, p);\n'
                                    '  return 1.0 + p.y / sqrt(p_dot_p) * kSphereRadius * kSphereRadius / p_dot_p;\n'
                                    '}\n'
                                    '\n'
                                    'void GetSphereShadowInOut(vec3 view_direction, vec3 sun_direction, out float d_in, out '
                                    'float d_out)\n'
                                    '{\n'
                                    '    vec3 pos = CAMERA_POSITION.xyz * atmosphere_ratio - kSphereCenter;\n'
                                    '    float pos_dot_sun = dot(pos, sun_direction);\n'
                                    '    float view_dot_sun = dot(view_direction, sun_direction);\n'
                                    '    float k = sun_size.x;\n'
                                    '    float l = 1.0 + k * k;\n'
                                    '    float a = 1.0 - l * view_dot_sun * view_dot_sun;\n'
                                    '    float b = dot(pos, view_direction) - l * pos_dot_sun * view_dot_sun - k * '
                                    'kSphereRadius * view_dot_sun;\n'
                                    '    float c = dot(pos, pos) - l * pos_dot_sun * pos_dot_sun -\n'
                                    '        2.0 * k * kSphereRadius * pos_dot_sun - kSphereRadius * kSphereRadius;\n'
                                    '    float discriminant = b * b - a * c;\n'
                                    '    if (discriminant > 0.0)\n'
                                    '    {\n'
                                    '        d_in = max(0.0, (-b - sqrt(discriminant)) / a);\n'
                                    '        d_out = (-b + sqrt(discriminant)) / a;\n'
                                    '        float d_base = -pos_dot_sun / view_dot_sun;\n'
                                    '        float d_apex = -(pos_dot_sun + kSphereRadius / k) / view_dot_sun;\n'
                                    '        if (view_dot_sun > 0.0)\n'
                                    '        {\n'
                                    '            d_in = max(d_in, d_apex);\n'
                                    '            d_out = a > 0.0 ? min(d_out, d_base) : d_base;\n'
                                    '        }\n'
                                    '        else\n'
                                    '        {\n'
                                    '            d_in = a > 0.0 ? max(d_in, d_base) : d_base;\n'
                                    '            d_out = min(d_out, d_apex);\n'
                                    '        }\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        d_in = 0.0;\n'
                                    '        d_out = 0.0;\n'
                                    '    }\n'
                                    '}\n'
                                    '\n'
                                    'float GetSceneShadowLength(float scene_dist, vec3 view_direction, sampler2D '
                                    'texture_shadow)\n'
                                    '{\n'
                                    '    const float earth_radius = abs(earth_center.y);\n'
                                    '    bool shadow_enter = false;\n'
                                    '    bool do_exit = false;\n'
                                    '    float scene_shadow_out = 0.0;\n'
                                    '    float scene_shadow_in = 0.0;\n'
                                    '    float shadow_length = 0.0;\n'
                                    '    const int LOOP = 64;\n'
                                    '    float d = min(NEAR_FAR.y * 0.01, scene_dist) / float(LOOP);\n'
                                    '    float enter_count = 0.0;\n'
                                    '\n'
                                    '    for(int i=0; i<LOOP; ++i)\n'
                                    '    {\n'
                                    '        float ray_dist = float(i) * d;\n'
                                    '        vec3 world_pos = CAMERA_POSITION.xyz + view_direction * ray_dist;\n'
                                    '        vec4 shadow_uv = SHADOW_MATRIX * vec4(world_pos, 1.0);\n'
                                    '        shadow_uv.xyz /= shadow_uv.w;\n'
                                    '        shadow_uv.xyz = shadow_uv.xyz * 0.5 + 0.5;\n'
                                    '        float shadow_depth = texture2D(texture_shadow, shadow_uv.xy, 0).x;\n'
                                    '\n'
                                    '        if(shadow_uv.x < 0.0 || 1.0 < shadow_uv.x || shadow_uv.y < 0.0 || 1.0 < '
                                    'shadow_uv.y || scene_dist <= ray_dist)\n'
                                    '        {\n'
                                    '            do_exit = true;\n'
                                    '        }\n'
                                    '        else if(length(world_pos - earth_center) < earth_radius)\n'
                                    '        {\n'
                                    '            \n'
                                    '            do_exit = true;\n'
                                    '        }\n'
                                    '        else if(false == shadow_enter && shadow_depth <= shadow_uv.z)\n'
                                    '        {\n'
                                    '            \n'
                                    '            shadow_enter = true;\n'
                                    '            scene_shadow_in = dot(view_direction, world_pos);\n'
                                    '        }\n'
                                    '        else if(shadow_enter && shadow_uv.z < shadow_depth)\n'
                                    '        {\n'
                                    '            \n'
                                    '            scene_shadow_out = dot(view_direction, world_pos);\n'
                                    '            shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                    '\n'
                                    '            \n'
                                    '            shadow_enter = false;\n'
                                    '            scene_shadow_in = 0.0;\n'
                                    '            scene_shadow_out = 0.0;\n'
                                    '            continue;\n'
                                    '        }\n'
                                    '\n'
                                    '        if(shadow_enter)\n'
                                    '        {\n'
                                    '            enter_count += 1.0;\n'
                                    '        }\n'
                                    '\n'
                                    '        if(do_exit || i == (LOOP-1))\n'
                                    '        {\n'
                                    '            if(shadow_enter)\n'
                                    '            {\n'
                                    '                \n'
                                    '                scene_shadow_out = dot(view_direction, world_pos);\n'
                                    '                shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                    '            }\n'
                                    '            else\n'
                                    '            {\n'
                                    '                \n'
                                    '                scene_shadow_in = 0.0;\n'
                                    '                scene_shadow_out = 0.0;\n'
                                    '            }\n'
                                    '            break;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '    shadow_length = enter_count / float(LOOP);\n'
                                    '\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    float lightshaft_fadein_hack = smoothstep(0.02, 0.04, '
                                    'dot(normalize(relative_camera_pos - earth_center), sun_direction));\n'
                                    '\n'
                                    '    return max(0.0, shadow_length) * lightshaft_fadein_hack * 2.0;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetSceneRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float scene_linear_depth, vec3 eye_direction, vec3 normal,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    \n'
                                    '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                    '    relative_point.y = max(0.0, relative_point.y);\n'
                                    '\n'
                                    '    \n'
                                    '    float scene_shadow_length = 0.0;\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                    '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                    'transmittance);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetSceneRadianceWithShadow(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float scene_linear_depth, vec3 eye_direction, vec3 normal, sampler2D texture_shadow,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter, out float '
                                    'scene_shadow_length)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    \n'
                                    '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                    '    relative_point.y = max(0.0, relative_point.y);\n'
                                    '\n'
                                    '    scene_shadow_length = GetSceneShadowLength(scene_linear_depth, eye_direction, '
                                    'texture_shadow);\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                    '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                    'transmittance);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetCloudRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float dist, vec3 eye_direction, float scene_shadow_length,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 inscatter)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 point = camera_pos + eye_direction.xyz * max(NEAR_FAR.x, dist) * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '        atmosphere, point.xyz - earth_center, sun_direction, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    inscatter = GetSkyRadianceToPoint(atmosphere, camera_pos - earth_center,\n'
                                    '        point.xyz - earth_center, scene_shadow_length, sun_direction, transmittance);\n'
                                    '\n'
                                    '    sun_irradiance = max(vec3(0.0), sun_irradiance);\n'
                                    '    sky_irradiance = max(vec3(0.0), sky_irradiance);\n'
                                    '    transmittance = max(vec3(0.0), transmittance);\n'
                                    '    inscatter = max(vec3(0.0), inscatter);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '#endif /* UUID_5d12e58e_4151_36f9_a2cf_ca628daa919d */\n'
                                    '\n'
                                    'const AtmosphereParameters ATMOSPHERE = AtmosphereParameters(\n'
                                    'vec3(1.474000, 1.850400, 1.911980),\n'
                                    '0.01175,\n'
                                    '6361.0,\n'
                                    '6420.0,\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                    '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.125000, 0.000000, '
                                    '0.000000))),\n'
                                    'vec3(0.005802, 0.013558, 0.033100),\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                    '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.833333, 0.000000, '
                                    '0.000000))),\n'
                                    'vec3(0.003996, 0.003996, 0.003996),\n'
                                    'vec3(0.004440, 0.004440, 0.004440),\n'
                                    '0.8,\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(25.000000, 0.000000, 0.000000, '
                                    '0.066667, -0.666667),DensityProfileLayer(0.000000, 0.000000, 0.000000, -0.066667, '
                                    '2.666667))),\n'
                                    'vec3(0.000650, 0.001881, 0.000085),\n'
                                    'vec3(0.100000, 0.100000, 0.100000),\n'
                                    '-0.4999999690599179);\n'
                                    '#endif /* UUID_8551a787_26aa_3125_a449_7e84cc6a7a01 */\n'
                                    '\n'
                                    '\n'
                                    'float get_shadow_factor_simple(vec2 screen_tex_coord, vec3 world_position, float NdotL, '
                                    'sampler2D texture_shadow)\n'
                                    '{\n'
                                    '    vec2 shadow_size = textureSize(texture_shadow, 0);\n'
                                    '    vec2 shadow_texel_size = 1.0 / shadow_size;\n'
                                    '    vec4 shadow_proj = SHADOW_MATRIX * vec4(world_position, 1.0);\n'
                                    '    shadow_proj.xyz /= shadow_proj.w;\n'
                                    '    shadow_proj.xyz = shadow_proj.xyz * 0.5 + 0.5;\n'
                                    '    float shadow_depth = shadow_proj.z;\n'
                                    '    vec2 offsets[4] = {\n'
                                    '        vec2(0.0, 0.0),\n'
                                    '        vec2(shadow_texel_size.x, 0.0),\n'
                                    '        vec2(0.0, shadow_texel_size.y),\n'
                                    '        vec2(shadow_texel_size.x, shadow_texel_size.y),\n'
                                    '    };\n'
                                    '\n'
                                    '    float shadow_factor = 0.0;\n'
                                    '    vec2 shadow_uv = shadow_proj.xy;\n'
                                    '\n'
                                    '    vec2 pixel_ratio = fract(shadow_uv.xy * shadow_size);\n'
                                    '    vec2 pixel_pos = shadow_uv.xy * shadow_size - pixel_ratio + 0.5;\n'
                                    '    vec2 uv = pixel_pos * shadow_texel_size;\n'
                                    '\n'
                                    '    vec4 shadow_factors;\n'
                                    '\n'
                                    '    for(int i=0; i<4; ++i)\n'
                                    '    {\n'
                                    '        vec2 shadow_uv = uv + offsets[i];\n'
                                    '        shadow_factors[i] = texture2DLod(texture_shadow, shadow_uv, 0.0).x;\n'
                                    '        if(0.0 <= shadow_uv.x && shadow_uv.x <= 1.0 && 0.0 <= shadow_uv.y && shadow_uv.y '
                                    '<= 1.0 && shadow_factors[i] < 1.0)\n'
                                    '        {\n'
                                    '            shadow_factors[i] = saturate(exp(-SHADOW_EXP * (shadow_depth - '
                                    'shadow_factors[i] - SHADOW_BIAS * (1.0 - saturate(NdotL)))));\n'
                                    '        }\n'
                                    '        else\n'
                                    '        {\n'
                                    '            shadow_factors[i] = 1.0;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '    shadow_factor += mix(\n'
                                    '        mix(shadow_factors.x, shadow_factors.y, pixel_ratio.x),\n'
                                    '        mix(shadow_factors.z, shadow_factors.w, pixel_ratio.x), pixel_ratio.y);\n'
                                    '\n'
                                    '    return clamp(shadow_factor, 0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float get_shadow_factor(vec2 screen_tex_coord, vec3 world_position, float NdotL, '
                                    'sampler2D texture_shadow)\n'
                                    '{\n'
                                    '    vec2 shadow_size = textureSize(texture_shadow, 0);\n'
                                    '    vec2 shadow_texel_size = 1.0 / shadow_size;\n'
                                    '    vec4 shadow_proj = SHADOW_MATRIX * vec4(world_position, 1.0);\n'
                                    '    shadow_proj.xyz /= shadow_proj.w;\n'
                                    '    shadow_proj.xyz = shadow_proj.xyz * 0.5 + 0.5;\n'
                                    '    float shadow_depth = shadow_proj.z;\n'
                                    '    vec2 offsets[4] = {\n'
                                    '        vec2(0.0, 0.0),\n'
                                    '        vec2(shadow_texel_size.x, 0.0),\n'
                                    '        vec2(0.0, shadow_texel_size.y),\n'
                                    '        vec2(shadow_texel_size.x, shadow_texel_size.y),\n'
                                    '    };\n'
                                    '\n'
                                    '    float shadow_factor = 0.0;\n'
                                    '\n'
                                    '    vec2 noise_size = (1 < SHADOW_SAMPLES) ? (shadow_texel_size * 4.0) : vec2(0.0);\n'
                                    '\n'
                                    '    for(int n = 0; n < SHADOW_SAMPLES; ++n)\n'
                                    '    {\n'
                                    '        vec2 uv = shadow_proj.xy + PoissonSamples[n % PoissonSampleCount] * noise_size;\n'
                                    '        vec2 pixel_ratio = fract(uv * shadow_size);\n'
                                    '\n'
                                    '        vec4 shadow_factors;\n'
                                    '        for(int i=0; i<4; ++i)\n'
                                    '        {\n'
                                    '            vec2 shadow_uv = uv + offsets[i];\n'
                                    '            shadow_factors[i] = texture2DLod(texture_shadow, shadow_uv, 0.0).x;\n'
                                    '            if(0.0 <= shadow_uv.x && shadow_uv.x <= 1.0 && 0.0 <= shadow_uv.y && '
                                    'shadow_uv.y <= 1.0 && shadow_factors[i] < 1.0)\n'
                                    '            {\n'
                                    '                float bias = SHADOW_BIAS * (1.0 - saturate(NdotL));\n'
                                    '                shadow_factors[i] = saturate(exp(-SHADOW_EXP * (shadow_depth - '
                                    'shadow_factors[i] - bias)));\n'
                                    '            }\n'
                                    '            else\n'
                                    '            {\n'
                                    '                shadow_factors[i] = 1.0;\n'
                                    '            }\n'
                                    '        }\n'
                                    '\n'
                                    '        shadow_factor += mix(\n'
                                    '            mix(shadow_factors.x, shadow_factors.y, pixel_ratio.x),\n'
                                    '            mix(shadow_factors.z, shadow_factors.w, pixel_ratio.x), pixel_ratio.y);\n'
                                    '    }\n'
                                    '\n'
                                    '    return clamp(shadow_factor / float(SHADOW_SAMPLES), 0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec3 oren_nayar(float roughness2, float NdotL, float NdotV, vec3 N, vec3 V, vec3 L)\n'
                                    '{\n'
                                    '    float incidentTheta = acos(NdotL);\n'
                                    '    float outTheta = acos(NdotV);\n'
                                    '\n'
                                    '    float A = 1.0 - 0.5 * (roughness2 / (roughness2 + 0.33));\n'
                                    '    float B = (0.45 * roughness2) / (roughness2 + 0.09);\n'
                                    '    float alpha = max(incidentTheta, outTheta);\n'
                                    '    float beta  = min(incidentTheta, outTheta);\n'
                                    '\n'
                                    '    vec3 u = normalize(V - N * NdotV);\n'
                                    '    vec3 v = normalize(L - N * NdotL);\n'
                                    '    float phiDiff = max(0.0, dot(u, v));\n'
                                    '\n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    return vec3((A + (B * phiDiff * sin(alpha) * tan(beta))) * NdotL);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 fresnelSchlick(float cosTheta, vec3 F0)\n'
                                    '{\n'
                                    '    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)\n'
                                    '{\n'
                                    '    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);\n'
                                    '}\n'
                                    '\n'
                                    'float D_blinn(float roughness, float NdH)\n'
                                    '{\n'
                                    '    float m = roughness * roughness;\n'
                                    '    float m2 = m * m;\n'
                                    '    float n = 2.0 / m2 - 2.0;\n'
                                    '    return (n + 2.0) / (2.0 * PI) * pow(NdH, n);\n'
                                    '}\n'
                                    '\n'
                                    'float D_beckmann(float roughness, float NdH)\n'
                                    '{\n'
                                    '    float m = roughness * roughness;\n'
                                    '    float m2 = m * m;\n'
                                    '    float NdH2 = NdH * NdH;\n'
                                    '    return exp((NdH2 - 1.0) / (m2 * NdH2)) / (PI * m2 * NdH2 * NdH2);\n'
                                    '}\n'
                                    '\n'
                                    'float DistributionGGX(float NdH, float roughness)\n'
                                    '{\n'
                                    '    float a      = roughness * roughness;\n'
                                    '    float a2     = a * a;\n'
                                    '    float NdH2 = NdH * NdH;\n'
                                    '\n'
                                    '    float num   = a2;\n'
                                    '    float denom = (NdH2 * (a2 - 1.0) + 1.0);\n'
                                    '    denom = PI * denom * denom;\n'
                                    '\n'
                                    '    return num / denom;\n'
                                    '}\n'
                                    '\n'
                                    'float GeometrySchlickGGX(float NdV, float roughness)\n'
                                    '{\n'
                                    '    float r = (roughness + 1.0);\n'
                                    '    float k = (r * r) / 8.0;\n'
                                    '    float num   = NdV;\n'
                                    '    float denom = NdV * (1.0 - k) + k;\n'
                                    '    return num / denom;\n'
                                    '}\n'
                                    '\n'
                                    'float GeometrySmith(float NdV, float NdL, float roughness)\n'
                                    '{\n'
                                    '    float ggx2  = GeometrySchlickGGX(NdV, roughness);\n'
                                    '    float ggx1  = GeometrySchlickGGX(NdL, roughness);\n'
                                    '    return ggx1 * ggx2;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 phong_specular(in float LdR, in vec3 specular, in float roughness)\n'
                                    '{\n'
                                    '    float spec = max(0.0, LdR);\n'
                                    '    float k = 1.999 / (roughness * roughness);\n'
                                    '    return min(1.0, 3.0 * 0.0398 * k) * pow(spec, min(10000.0, k)) * specular;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 blinn_specular(in float NdH, in vec3 specular, in float roughness)\n'
                                    '{\n'
                                    '    float k = 1.999 / (roughness * roughness);\n'
                                    '    return min(1.0, 3.0 * 0.0398 * k) * pow(NdH, min(10000.0, k)) * specular;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec3 cooktorrance_specular(vec3 F, float NdL, float NdV, float NdH, float roughness)\n'
                                    '{\n'
                                    '    \n'
                                    '    \n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    \n'
                                    '    float NDF = DistributionGGX(NdH, roughness);\n'
                                    '    float G   = GeometrySmith(NdV, NdL, roughness);\n'
                                    '    vec3 numerator    = NDF * G * F;\n'
                                    '    float denominator = 4.0 * NdV * NdL;\n'
                                    '    return numerator / max(denominator, 0.001);\n'
                                    '}\n'
                                    '\n'
                                    'vec2 env_BRDF_pproximate(float NdV, float roughness)\n'
                                    '{\n'
                                    '    \n'
                                    '    const vec4 c0 = vec4(-1.0, -0.0275, -0.572,  0.022);\n'
                                    '    const vec4 c1 = vec4( 1.0,  0.0425,  1.040, -0.040);\n'
                                    '    vec4 r = roughness * c0 + c1;\n'
                                    '    float a004 = min(r.x * r.x, exp2(-9.28 * NdV)) * r.x + r.y;\n'
                                    '    return vec2(-1.04, 1.04) * a004 + r.zw;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec4 surface_shading(vec4 base_color,\n'
                                    '                    vec3 emissive_color,\n'
                                    '                    float metallic,\n'
                                    '                    float roughness,\n'
                                    '                    float reflectance,\n'
                                    '                    float ssao_factor,\n'
                                    '                    vec4 scene_reflect_color,\n'
                                    '                    samplerCube texture_probe,\n'
                                    '                    sampler2D texture_shadow,\n'
                                    '                    vec2 screen_tex_coord,\n'
                                    '                    vec3 world_position,\n'
                                    '                    vec3 light_color,\n'
                                    '                    vec3 N,\n'
                                    '                    vec3 V,\n'
                                    '                    vec3 L,\n'
                                    '                    float depth)\n'
                                    '{\n'
                                    '    \n'
                                    '    vec3 scene_in_scatter;\n'
                                    '    vec3 scene_sun_irradiance;\n'
                                    '    vec3 scene_sky_irradiance;\n'
                                    '    float scene_shadow_length;\n'
                                    '    float scene_linear_depth = depth_to_linear_depth(depth);\n'
                                    '    GetSceneRadiance(ATMOSPHERE, scene_linear_depth, -V, N, scene_sun_irradiance, '
                                    'scene_sky_irradiance, scene_in_scatter);\n'
                                    '\n'
                                    '    light_color = light_color * scene_sun_irradiance;\n'
                                    '\n'
                                    '    \n'
                                    '    roughness = clamp(roughness, 0.05, 1.0);\n'
                                    '\n'
                                    '    \n'
                                    '    vec3 R = reflect(-V, N);\n'
                                    '    vec3 H = normalize(V + L);\n'
                                    '\n'
                                    '    float NdL = max(0.0, dot(N, L));\n'
                                    '    float NdV = max(0.001, dot(N, V));\n'
                                    '    float NdH = max(0.001, dot(N, H));\n'
                                    '    float HdV = max(0.001, dot(H, V));\n'
                                    '    float LdV = max(0.001, dot(L, V));\n'
                                    '\n'
                                    '    vec3 result = vec3(0.0, 0.0, 0.0);\n'
                                    '    float opacity = base_color.w;\n'
                                    '\n'
                                    '    vec3 F0 = vec3(0.04);\n'
                                    '    F0 = mix(max(F0, reflectance), base_color.xyz, metallic);\n'
                                    '    vec3 fresnel = fresnelSchlick(NdV, F0);\n'
                                    '\n'
                                    '    vec3 ambient_light = vec3(0.0, 0.0, 0.0);\n'
                                    '    vec3 diffuse_light = vec3(0.0, 0.0, 0.0);\n'
                                    '    vec3 specular_light = vec3(0.0, 0.0, 0.0);\n'
                                    '    vec3 shadow_factor = vec3(get_shadow_factor(screen_tex_coord, world_position, dot(N, '
                                    'L), texture_shadow));\n'
                                    '\n'
                                    '    \n'
                                    '    {\n'
                                    '        const vec2 env_size = textureSize(texture_probe, 0);\n'
                                    '        const float max_env_mipmap = 8.0; \n'
                                    '        vec2 envBRDF = clamp(env_BRDF_pproximate(NdV, roughness), 0.0, 1.0);\n'
                                    '        vec3 shValue = fresnel * envBRDF.x + envBRDF.y;\n'
                                    '\n'
                                    '        vec3 ibl_diffuse_light = textureCubeLod(texture_probe, invert_y(N), '
                                    'max_env_mipmap).xyz;\n'
                                    '        vec3 ibl_specular_light = textureCubeLod(texture_probe, invert_y(R), '
                                    'max_env_mipmap * roughness).xyz;\n'
                                    '\n'
                                    '        ambient_light = normalize(mix(ibl_diffuse_light, scene_sky_irradiance, 0.5)) * '
                                    'length(scene_sky_irradiance);\n'
                                    '        shadow_factor = max(shadow_factor, ambient_light);\n'
                                    '\n'
                                    '        diffuse_light += ibl_diffuse_light * shadow_factor;\n'
                                    '        specular_light += ibl_specular_light * shValue * shadow_factor;\n'
                                    '\n'
                                    '         \n'
                                    '        if(RENDER_SSR)\n'
                                    '        {\n'
                                    '            \n'
                                    '            specular_light.xyz = mix(specular_light.xyz, scene_reflect_color.xyz * '
                                    'shValue * shadow_factor, scene_reflect_color.w);\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '#if TRANSPARENT_MATERIAL == 1\n'
                                    '#endif\n'
                                    '\n'
                                    '    \n'
                                    '    {\n'
                                    '        vec3 light_fresnel = fresnelSchlick(HdV, F0);\n'
                                    '\n'
                                    '        \n'
                                    '        diffuse_light += oren_nayar(roughness, NdL, NdV, N, V, L) / PI * NdL * '
                                    'light_color * shadow_factor;\n'
                                    '        specular_light += cooktorrance_specular(light_fresnel, NdL, NdV, NdH, roughness) '
                                    '* NdL * light_color * shadow_factor;\n'
                                    '\n'
                                    '        \n'
                                    '        for(int i=0; i<MAX_POINT_LIGHTS; ++i)\n'
                                    '        {\n'
                                    '            if(1.0 != POINT_LIGHTS[i].render)\n'
                                    '            {\n'
                                    '                break;\n'
                                    '            }\n'
                                    '\n'
                                    '            float point_light_radius = POINT_LIGHTS[i].radius;\n'
                                    '            vec3 point_light_dir = POINT_LIGHTS[i].pos.xyz - world_position;\n'
                                    '            float point_light_dist = length(point_light_dir);\n'
                                    '\n'
                                    '            if(point_light_radius < point_light_dist)\n'
                                    '            {\n'
                                    '                continue;\n'
                                    '            }\n'
                                    '\n'
                                    '            point_light_dir /= point_light_dist;\n'
                                    '\n'
                                    '            vec3 point_light_half = normalize(V + point_light_dir);\n'
                                    '            float point_light_attenuation = clamp(1.0 - point_light_dist / '
                                    'point_light_radius, 0.0, 1.0);\n'
                                    '            point_light_attenuation *= point_light_attenuation;\n'
                                    '            vec3 point_light_color = POINT_LIGHTS[i].color.xyz * '
                                    'point_light_attenuation;\n'
                                    '\n'
                                    '            float point_light_NdL = max(0.01, dot(N, point_light_dir));\n'
                                    '            float point_light_NdH = max(0.01, dot(N, point_light_half));\n'
                                    '\n'
                                    '            diffuse_light += oren_nayar(roughness, point_light_NdL, NdV, N, V, '
                                    'point_light_dir) / PI * point_light_NdL * point_light_color;\n'
                                    '            specular_light += cooktorrance_specular(light_fresnel, point_light_NdL, NdV, '
                                    'point_light_NdH, roughness) * point_light_NdL * point_light_color;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '    \n'
                                    '    diffuse_light *= base_color.xyz * clamp((vec3(1.0) - fresnel) * (1.0 - metallic), '
                                    '0.0, 1.0);\n'
                                    '    specular_light = mix(specular_light, specular_light * base_color.xyz, '
                                    'vec3(metallic));\n'
                                    '\n'
                                    '    result = diffuse_light + specular_light;\n'
                                    '\n'
                                    '    \n'
                                    '    if(RENDER_SSAO)\n'
                                    '    {\n'
                                    '        result *= ssao_factor;\n'
                                    '    }\n'
                                    '\n'
                                    '    \n'
                                    '    result += emissive_color;\n'
                                    '\n'
                                    '    return vec4(max(vec3(0.0), result), opacity);\n'
                                    '}\n'
                                    '#endif /* UUID_ac3e3529_28e2_39d0_88f7_99463d7f1fe8 */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "default_material.glsl"\n'
                                    '#ifndef UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0\n'
                                    '#define UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '#ifdef MATERIAL_COMPONENTS\n'
                                    '    uniform float brightness;\n'
                                    '    uniform float reflectance;\n'
                                    '    uniform float roughness;\n'
                                    '    uniform float metalicness;\n'
                                    '    uniform float normal_intensity;\n'
                                    '    uniform vec2 uv_tiling;\n'
                                    '    uniform vec4 emissive_color;\n'
                                    '    uniform vec4 diffuse_color;\n'
                                    '    uniform sampler2D texture_diffuse;\n'
                                    '    uniform sampler2D texture_material;\n'
                                    '    uniform sampler2D texture_normal;\n'
                                    '#if TRANSPARENT_MATERIAL == 1\n'
                                    '#endif\n'
                                    '#endif\n'
                                    '\n'
                                    'vec4 get_emissive_color()\n'
                                    '{\n'
                                    '    return emissive_color;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 get_base_color(vec2 tex_coord)\n'
                                    '{\n'
                                    '    vec4 color = texture2D(texture_diffuse, tex_coord);\n'
                                    '    \n'
                                    '    color.xyz = pow(color.xyz, vec3(2.2));\n'
                                    '    color.xyz = color.xyz * brightness * diffuse_color.xyz;\n'
                                    '    return color;\n'
                                    '}\n'
                                    '\n'
                                    'float get_reflection()\n'
                                    '{\n'
                                    '    return 1.0;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 get_edge_tint_color()\n'
                                    '{\n'
                                    '    return vec3(1.0, 1.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 get_sss_color()\n'
                                    '{\n'
                                    '    return vec3(1.0, 1.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float get_sss_scale()\n'
                                    '{\n'
                                    '    return 1.0;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 get_normal(vec2 tex_coord)\n'
                                    '{\n'
                                    '    \n'
                                    '    vec3 normal = texture2D(texture_normal, tex_coord).xzy * 2.0 - 1.0;\n'
                                    '    normal.xz *= normal_intensity;\n'
                                    '    return normalize(normal);\n'
                                    '}\n'
                                    '\n'
                                    'float get_ior()\n'
                                    '{\n'
                                    '    return 1.0;\n'
                                    '}\n'
                                    '\n'
                                    'float get_roughness()\n'
                                    '{\n'
                                    '    return clamp(roughness, 0.05, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float get_metalicness()\n'
                                    '{\n'
                                    '    return metalicness;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 get_world_offset()\n'
                                    '{\n'
                                    '    return vec3(1.0, 1.0, 1.0);\n'
                                    '}\n'
                                    '#endif /* UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0 */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "default_vs.glsl"\n'
                                    '#ifndef UUID_35552d2e_6275_372a_b55a_b42f8a0ce382\n'
                                    '#define UUID_35552d2e_6275_372a_b55a_b42f8a0ce382\n'
                                    '\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "default_material.glsl"\n'
                                    '#ifndef UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0\n'
                                    '#define UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0\n'
                                    '#ifdef MATERIAL_COMPONENTS\n'
                                    '    uniform float brightness;\n'
                                    '    uniform float reflectance;\n'
                                    '    uniform float roughness;\n'
                                    '    uniform float metalicness;\n'
                                    '    uniform float normal_intensity;\n'
                                    '    uniform vec2 uv_tiling;\n'
                                    '    uniform vec4 emissive_color;\n'
                                    '    uniform vec4 diffuse_color;\n'
                                    '    uniform sampler2D texture_diffuse;\n'
                                    '    uniform sampler2D texture_material;\n'
                                    '    uniform sampler2D texture_normal;\n'
                                    '#if TRANSPARENT_MATERIAL == 1\n'
                                    '#endif\n'
                                    '#endif\n'
                                    '#endif /* UUID_3cfc74b4_7b02_31ad_8742_f397a89623b0 */\n'
                                    '\n'
                                    'uniform bool is_instancing;\n'
                                    'uniform mat4 model;\n'
                                    '\n'
                                    '#if 1 == SKELETAL\n'
                                    'uniform mat4 bone_matrices[MAX_BONES];\n'
                                    'uniform mat4 prev_bone_matrices[MAX_BONES];\n'
                                    '#endif\n'
                                    '\n'
                                    'struct VERTEX_OUTPUT\n'
                                    '{\n'
                                    '    vec3 world_position;\n'
                                    '    vec3 vertex_normal;\n'
                                    '    vec4 vertex_color;\n'
                                    '    vec2 tex_coord;\n'
                                    '    mat4 tangent_to_world;\n'
                                    '    vec4 projection_pos;\n'
                                    '    vec4 prev_projection_pos;\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '#ifdef VERTEX_SHADER\n'
                                    'layout (location = 0) in vec3 vs_in_position;\n'
                                    'layout (location = 1) in vec4 vs_in_color;\n'
                                    'layout (location = 2) in vec3 vs_in_normal;\n'
                                    'layout (location = 3) in vec3 vs_in_tangent;\n'
                                    'layout (location = 4) in vec2 vs_in_tex_coord;\n'
                                    '#if 1 == SKELETAL\n'
                                    'layout (location = 5) in vec4 vs_in_bone_indicies;\n'
                                    'layout (location = 6) in vec4 vs_in_bone_weights;\n'
                                    '#endif\n'
                                    'layout (location = 7) in mat4 vs_in_isntance_matrix;\n'
                                    '\n'
                                    'layout (location = 0) out VERTEX_OUTPUT vs_output;\n'
                                    '\n'
                                    'void main() {\n'
                                    '    vec4 position = vec4(0.0, 0.0, 0.0, 0.0);\n'
                                    '    vec4 prev_position = vec4(0.0, 0.0, 0.0, 0.0);\n'
                                    '    vec3 vertex_normal = vec3(0.0, 0.0, 0.0);\n'
                                    '    vec3 vertex_tangent = vec3(0.0, 0.0, 0.0);\n'
                                    '\n'
                                    '#if 1 == SKELETAL\n'
                                    '    for(int i=0; i<MAX_BONES_PER_VERTEX; ++i)\n'
                                    '    {\n'
                                    '        prev_position += (prev_bone_matrices[int(vs_in_bone_indicies[i])] * '
                                    'vec4(vs_in_position, 1.0)) * vs_in_bone_weights[i];\n'
                                    '        position += (bone_matrices[int(vs_in_bone_indicies[i])] * vec4(vs_in_position, '
                                    '1.0)) * vs_in_bone_weights[i];\n'
                                    '        vertex_normal += (bone_matrices[int(vs_in_bone_indicies[i])] * vec4(vs_in_normal, '
                                    '0.0)).xyz * vs_in_bone_weights[i];\n'
                                    '        vertex_tangent += (bone_matrices[int(vs_in_bone_indicies[i])] * '
                                    'vec4(vs_in_tangent, 0.0)).xyz * vs_in_bone_weights[i];\n'
                                    '    }\n'
                                    '    position /= position.w;\n'
                                    '    prev_position /= prev_position.w;\n'
                                    '#else\n'
                                    '#endif\n'
                                    '\n'
                                    '    vertex_normal = normalize(vertex_normal);\n'
                                    '    vertex_tangent = normalize(vertex_tangent);\n'
                                    '\n'
                                    '    mat4 local_matrix = is_instancing ? model * vs_in_isntance_matrix : model;\n'
                                    '\n'
                                    '    vs_output.world_position = (local_matrix * position).xyz;\n'
                                    '    vs_output.vertex_normal = vertex_normal;\n'
                                    '    vs_output.vertex_color = vs_in_color;\n'
                                    '    vs_output.tex_coord = vs_in_tex_coord * uv_tiling;\n'
                                    '\n'
                                    '    vec3 bitangent = cross(vertex_tangent, vertex_normal);\n'
                                    '\n'
                                    '    \n'
                                    '    vs_output.tangent_to_world = local_matrix *\n'
                                    '        mat4(vec4(vertex_tangent, 0.0), vec4(vertex_normal, 0.0), vec4(bitangent, 0.0), '
                                    'vec4(0.0, 0.0, 0.0, 1.0));\n'
                                    '\n'
                                    '    position = VIEW_PROJECTION * local_matrix * position;\n'
                                    '    prev_position = PREV_VIEW_PROJECTION * local_matrix * prev_position;\n'
                                    '\n'
                                    '    vs_output.projection_pos = position;\n'
                                    '    vs_output.prev_projection_pos = prev_position;\n'
                                    '\n'
                                    '    gl_Position = position;\n'
                                    '}\n'
                                    '#endif\n'
                                    '#endif /* UUID_35552d2e_6275_372a_b55a_b42f8a0ce382 */\n'
                                    '\n'
                                    'uniform bool is_render_gbuffer;\n'
                                    '\n'
                                    'uniform sampler2D texture_depth;\n'
                                    'uniform sampler2D texture_shadow;\n'
                                    'uniform sampler2D texture_ssao;\n'
                                    'uniform sampler2D texture_scene_reflect;\n'
                                    'uniform samplerCube texture_probe;\n'
                                    '\n'
                                    '#ifdef FRAGMENT_SHADER\n'
                                    '#if 1 == SKELETAL\n'
                                    'layout (location = 3) out vec2 fs_velocity;\n'
                                    '#endif\n'
                                    '#if TRANSPARENT_MATERIAL == 1\n'
                                    '#else\n'
                                    '    if(base_color.a < 0.333)\n'
                                    '    {\n'
                                    '        discard;\n'
                                    '    }\n'
                                    '#endif\n'
                                    '#if 1 == SKELETAL\n'
                                    '        fs_velocity = (vs_output.projection_pos.xy / vs_output.projection_pos.w) - '
                                    '(vs_output.prev_projection_pos.xy / vs_output.prev_projection_pos.w);\n'
                                    '        \n'
                                    '        fs_velocity *= 0.5;\n'
                                    '        fs_velocity.xy -= JITTER_DELTA;\n'
                                    '#endif\n'
                                    '#endif'},
 'shader_name': 'default',
 'uniforms': [('vec3', 'earth_center'),
              ('vec2', 'sun_size'),
              ('float', 'atmosphere_exposure'),
              ('bool', 'render_light_probe_mode'),
              ('sampler2D', 'transmittance_texture'),
              ('sampler2D', 'irradiance_texture'),
              ('sampler3D', 'scattering_texture'),
              ('sampler3D', 'single_mie_scattering_texture'),
              ('sampler3D', 'single_rayleigh_scattering_texture'),
              ('sampler3D', 'scattering_density_texture'),
              ('sampler3D', 'multiple_scattering_texture'),
              ('vec3', 'SKY_RADIANCE_TO_LUMINANCE'),
              ('vec3', 'SUN_RADIANCE_TO_LUMINANCE'),
              ('float', 'brightness'),
              ('float', 'reflectance'),
              ('float', 'roughness'),
              ('float', 'metalicness'),
              ('float', 'normal_intensity'),
              ('vec2', 'uv_tiling'),
              ('vec4', 'emissive_color'),
              ('vec4', 'diffuse_color'),
              ('sampler2D', 'texture_diffuse'),
              ('sampler2D', 'texture_material'),
              ('sampler2D', 'texture_normal'),
              ('bool', 'is_instancing'),
              ('mat4', 'model'),
              ('mat4', 'bone_matrices'),
              ('mat4', 'prev_bone_matrices'),
              ('bool', 'is_render_gbuffer'),
              ('sampler2D', 'texture_depth'),
              ('sampler2D', 'texture_shadow'),
              ('sampler2D', 'texture_ssao'),
              ('sampler2D', 'texture_scene_reflect'),
              ('samplerCube', 'texture_probe')]}

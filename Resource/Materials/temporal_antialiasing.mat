{'binary_data': b'\x80\x03cnumpy.core.multiarray\n_reconstruct\nq\x00cnumpy\nndarray\nq\x01K\x00\x85q\x02C\x01bq\x03\x87q\x04Rq'
                b'\x05(K\x01M\xc5E\x85q\x06cnumpy\ndtype\nq\x07X\x02\x00\x00\x00u1q\x08K\x00K\x01\x87q\tRq\n(K\x03X'
                b'\x01\x00\x00\x00|q\x0bNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\x0cb\x89B\xc5E\x00\x00\n\x00\x00\x00'
                b'\xcc\x9e\xb9\xdd]V\xd7w*\x04]\x99J\x14\xecw\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00`\x00\x00\x00x\x16\x00\x00'
                b'\xc5E\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x16\x00\x00\x00\x16\x00\x00\x00'
                b'\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x1d\x01\x00\x00\x14\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00;\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x1f\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x003\x00\x00\x00\x13\x00\x00\x00\x03\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xc5E\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\xbfu\x85\x9369\xb6\x8d\xbfu\x85\x9369\xb6\x8dkD\x0c\xda\x0b\xb4\x11\xf0'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x0f\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x14\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00'
                b'\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x0e\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00@\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x1f\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00(\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00'
                b'\xc0\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x0c\x00\x00\x008\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00\x98\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00E\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00R\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00^\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x10\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x0e\x00\x00\x00n\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00}\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x90\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x86\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\n\x00\x00\x00\x9b\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\xa6\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00'
                b'\xb2\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00'
                b'\x00\x01\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\xbd\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x000\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\xcb\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x04\x00\x00\x00\xd0\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\xd5\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x0f\x00\x00\x00\xe1\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00'
                b'\x03\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\xf1\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x008\xe4\xb3\xa6IV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\xff\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\xc8\xe2\xb3\xa6IV\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00'
                b'\x0c\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00'
                b'\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00CAMERA_POSITION\x00INV_PROJECTION\x00INV_VIEW\x00INV_VIEW_ORIGIN\x00JITTER_DELTA\x00JITTER_'
                b'FRAME\x00LIGHT_COLOR\x00LIGHT_DIRECTION\x00LIGHT_POSITION\x00NEAR_FAR\x00PREV_VIEW_PROJECTION\x00PROJECTIO'
                b'N\x00RENDER_SSAO\x00RENDER_SSR\x00SHADOW_MATRIX\x00TIME\x00VIEW\x00VIEW_ORIGIN\x00VIEW_PROJECTION\x00texture'
                b'_input\x00texture_prev\x00texture_velocity\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x0f\x00\x00\x00\x0f\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x8b\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00vs_in_position\x00vs_in_tex_coord\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00!\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x13\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00P\x8b\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00'
                b"\x00\x00\x00\x00 \x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x0b\x00\x00\x00'\x00\x00\x00\x01\x00\x00\x00"
                b'\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xffvs_output.position\x00vs_output.tex_coo'
                b'rd\x00gl_Position\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00fs_output'
                b'\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x03\x03\xff\xff\xff\xff\x00\x00\x00p\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x01\x01\xff\xff\xff\xff\x00\x00\x00\xa0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00,\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x02\x02\xff\xff\xff\xff\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00lightCo'
                b'nstants\x00sceneConstants\x00viewConstants\x00viewProjection\x00\x0e\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffQ\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x0f\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xffP\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'vs_in_position\x00vs_in_tex_coord\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\xff\xff\xff\xffP\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00v'
                b's_output.tex_coord\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00fs_output'
                b'\x00\x00\xfc\x01\x00\x00!!NVvp5.0\nOPTION NV_internal;\nOPTION NV_bindless_texture;\n CBUFFER buf0[] = { prog'
                b'ram.buffer[0] };\nCBUFFER buf1[] = { program.buffer[1] };\nCBUFFER buf2[] = { program.buffer[2] };\nCBUFFER'
                b' buf3[] = { program.buffer[3] };\nATTRIB vertex_attrib[] = { vertex.attrib[0..4] };\nOUTPUT result_attrib['
                b'] = { result.attrib[0..1] };\nTEMP T;\nMOV.F result.attrib[1].xyz, vertex.attrib[0];\nMOV.F result.position'
                b'.xyz, vertex.attrib[0];\nMOV.F result.attrib[0].xy, vertex.attrib[4];\nMOV.F result.position.w, {1, 0, 0, '
                b'0}.x;\nEND\n\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x1b\x16\x00\x00!!NVfp5.0\nOPTION NV_internal;\nOPTION NV_gpu_program_fp64;\nOPTION NV_bindless_textu'
                b're;\n PARAM c[3] = { program.local[0..2] };\nCBUFFER buf0[] = { program.buffer[0] };\nCBUFFER buf1[] = { pr'
                b'ogram.buffer[1] };\nCBUFFER buf2[] = { program.buffer[2] };\nCBUFFER buf3[] = { program.buffer[3] };\nATTRI'
                b'B fragment_attrib[] = { fragment.attrib[0..0] };\nTEMP R0, R1, R2, R3, R4, R5, R6, R7;\nLONG TEMP D0, D1;\n'
                b'TEMP T;\nTEMP RC, HC;\nOUTPUT result_color0 = result.color;\nPK64.U D0.x, c[1];\nTXQ R0.xy, {0, 0, 0, 0}, ha'
                b'ndle(D0.x), 2D;\nMOV.F R1.xyz, {0, 0, 0, 0}.x;\nMOV.F R2.xyz, {0, 0, 0, 0}.x;\nI2F.S R3.xy, R0;\nMOV.F R3.w,'
                b' {0, 0, 0, 0}.x;\nMOV.S R0.w, {-1, 0, 0, 0}.x;\nREP.S {3, 0, 0, 0};\nMOV.S R1.w, {-1, 0, 0, 0}.x;\nREP.S {3,'
                b' 0, 0, 0};\nI2F.S R0.x, R1.w;\nI2F.S R2.w, R0;\nMOV.F R0.y, R2.w;\nMUL.F R3.z, |R0.x|, {2, 0, 0, 0}.x;\nRCP.F'
                b' R4.x, R3.x;\nRCP.F R4.y, R3.y;\nMUL.F R4.xy, R0, R4;\nADD.F.SAT R4.xy, fragment.attrib[0], R4;\nPK64.U D0.x'
                b', c[1];\nTEX.F R0.xyz, R4, handle(D0.x), 2D;\nSLT.F R4.x, R3.z, {1, 0, 0, 0};\nTRUNC.U.CC HC.x, R4;\nMOV.F R'
                b'2.w, |R2|;\nIF NE.x;\nELSE;\nSLE.F R3.z, R3, {2, 0, 0, 0}.x;\nTRUNC.U.CC HC.x, R3.z;\nIF NE.x;\nENDIF;\nEND'
                b'IF;\nMUL.F R2.w, R2, {2, 0, 0, 0}.x;\nSLT.F R3.z, R2.w, {1, 0, 0, 0}.x;\nTRUNC.U.CC HC.x, R3.z;\nIF NE.x;\nEL'
                b'SE;\nSLE.F R2.w, R2, {2, 0, 0, 0}.x;\nTRUNC.U.CC HC.x, R2.w;\nIF NE.x;\nENDIF;\nENDIF;\nADD.F R1.xyz, R1, '
                b'R0;\nMAD.F R2.xyz, R0, R0, R2;\nADD.F R3.w, R3, {1, 0, 0, 0}.x;\nADD.S R1.w, R1, {1, 0, 0, 0}.x;\nENDREP;\nAD'
                b'D.S R0.w, R0, {1, 0, 0, 0}.x;\nENDREP;\nPK64.U D0.x, c[1];\nTEX.F R0, fragment.attrib[0], handle(D0.x), 2D;'
                b'\nPK64.U D1.x, c[2];\nTXQ R4.xy, {0, 0, 0, 0}, handle(D1.x), 2D;\nMOV.F R3.xyz, R0;\nI2F.S R0.xy, R4;\nMOV.F '
                b'R1.w, R0;\nRCP.F R4.x, R0.x;\nRCP.F R4.y, R0.y;\nMOV.F R0.zw, {0, 0, 0, 0}.x;\nMOV.F R2.w, {-1, 0, 0, 0}.x;\n'
                b'MOV.S R4.z, {-1, 0, 0, 0}.x;\nREP.S {3, 0, 0, 0};\nI2F.S R0.y, R4.z;\nMOV.F R0.x, {-1, 0, 0, 0};\nMAD.F R0.x'
                b'y, R0, R4, fragment.attrib[0];\nPK64.U D0.x, c[2];\nTEX.F R0.xy, R0, handle(D0.x), 2D;\nDP2.F R4.w, R0, R0;'
                b'\nSGT.F R5.x, R4.w, R2.w;\nTRUNC.U.CC HC.x, R5;\nIF NE.x;\nMOV.F R0.zw, R0.xyxy;\nMOV.F R2.w, R4;\nENDIF;\n'
                b'I2F.S R0.y, R4.z;\nMOV.F R0.x, {0, 0, 0, 0};\nMAD.F R0.xy, R0, R4, fragment.attrib[0];\nPK64.U D0.x, c[2];\n'
                b'TEX.F R0.xy, R0, handle(D0.x), 2D;\nDP2.F R4.w, R0, R0;\nSGT.F R5.x, R4.w, R2.w;\nTRUNC.U.CC HC.x, R5;\nIF N'
                b'E.x;\nMOV.F R0.zw, R0.xyxy;\nMOV.F R2.w, R4;\nENDIF;\nI2F.S R0.y, R4.z;\nMOV.F R0.x, {1, 0, 0, 0};\nMAD.F '
                b'R0.xy, R0, R4, fragment.attrib[0];\nPK64.U D0.x, c[2];\nTEX.F R0.xy, R0, handle(D0.x), 2D;\nDP2.F R4.w, R0,'
                b' R0;\nSGT.F R5.x, R4.w, R2.w;\nTRUNC.U.CC HC.x, R5;\nIF NE.x;\nMOV.F R0.zw, R0.xyxy;\nMOV.F R2.w, R4;\nEND'
                b'IF;\nADD.S R4.z, R4, {1, 0, 0, 0}.x;\nENDREP;\nPK64.U D0.x, c[0];\nTXQ R0.xy, {0, 0, 0, 0}, handle(D0.x), 2D'
                b';\nADD.F R0.zw, fragment.attrib[0].xyxy, -R0;\nI2F.S R5.xy, R0;\nMUL.F R5.zw, R5.xyxy, R0;\nMOV.F R4.xyz, {0'
                b', 0, 0, 0}.x;\nMOV.F R2.w, {0, 0, 0, 0}.x;\nMOV.S R4.w, {-1, 0, 0, 0}.x;\nREP.S {4, 0, 0, 0};\nMOV.S R7.x, {'
                b'-1, 0, 0, 0};\nREP.S {4, 0, 0, 0};\nI2F.S R0.y, R4.w;\nI2F.S R0.x, R7;\nADD.F R0.xy, R5.zwzw, R0;\nFLR.F R0.x'
                b'y, R0;\nADD.F R0.zw, R0.xyxy, {0.5, 0, 0, 0}.x;\nADD.F R6.zw, R0, -R5;\nMOV.F R6.xy, |R6.zwzw|;\nSLT.F R6.w,'
                b' |R6.z|, {1, 0, 0, 0}.x;\nTRUNC.U.CC HC.x, R6.w;\nRCP.F R0.y, R5.y;\nRCP.F R0.x, R5.x;\nMUL.F R0.xy, R0.zwzw'
                b', R0;\nMUL.F R0.w, |R6.z|, |R6.z|;\nPK64.U D0.x, c[0];\nMUL.F R7.y, |R6.z|, R0.w;\nTEX.F R0.xyz, R0, handle('
                b'D0.x), 2D;\nMOV.F R6.z, {0, 0, 0, 0}.x;\nIF NE.x;\nMUL.F R0.w, R0, {-15, 0, 0, 0}.x;\nMAD.F R0.w, R7.y, {9, '
                b'0, 0, 0}.x, R0;\nADD.F R6.z, R0.w, {6, 0, 0, 0}.x;\nELSE;\nSLE.F R6.w, R6.x, {2, 0, 0, 0}.x;\nTRUNC.U.CC HC.'
                b'x, R6.w;\nIF NE.x;\nMUL.F R0.w, R0, {15, 0, 0, 0}.x;\nMAD.F R0.w, R7.y, {-3, 0, 0, 0}.x, R0;\nMAD.F R0.w, R6'
                b'.x, {-24, 0, 0, 0}.x, R0;\nADD.F R6.z, R0.w, {12, 0, 0, 0}.x;\nENDIF;\nENDIF;\nMUL.F R6.w, R6.y, R6.y;\nSLT.F'
                b' R7.y, R6, {1, 0, 0, 0}.x;\nMUL.F R0.w, R6.z, {0.166666672, 0, 0, 0}.x;\nTRUNC.U.CC HC.x, R7.y;\nMUL.F R6.x'
                b', R6.w, R6.y;\nMOV.F R6.z, {0, 0, 0, 0}.x;\nIF NE.x;\nMUL.F R6.y, R6.w, {-15, 0, 0, 0}.x;\nMAD.F R6.x, R6, {'
                b'9, 0, 0, 0}, R6.y;\nADD.F R6.z, R6.x, {6, 0, 0, 0}.x;\nELSE;\nSLE.F R7.y, R6, {2, 0, 0, 0}.x;\nTRUNC.U.CC HC'
                b'.x, R7.y;\nIF NE.x;\nMUL.F R6.z, R6.w, {15, 0, 0, 0}.x;\nMAD.F R6.x, R6, {-3, 0, 0, 0}, R6.z;\nMAD.F R6.x, R'
                b'6.y, {-24, 0, 0, 0}, R6;\nADD.F R6.z, R6.x, {12, 0, 0, 0}.x;\nENDIF;\nENDIF;\nDP3.F R6.x, R0, {0.298999995, '
                b'0.587000012, 0.114, 0};\nADD.F R6.x, R6, {1, 0, 0, 0};\nMUL.F R0.w, R6.z, R0;\nDIV.F R0.w, R0, R6.x;\nMUL.F '
                b'R0.w, R0, {0.166666672, 0, 0, 0}.x;\nMAD.F R4.xyz, R0, R0.w, R4;\nADD.F R2.w, R0, R2;\nADD.S R7.x, R7, {1, '
                b'0, 0, 0};\nENDREP;\nADD.S R4.w, R4, {1, 0, 0, 0}.x;\nENDREP;\nDIV.F R0.xyz, R1, R3.w;\nMUL.F R1.xyz, R0, '
                b'R0;\nRCP.F R0.w, R3.w;\nMAD.F R1.xyz, R2, R0.w, -R1;\nRSQ.F R0.w, |R1.x|;\nRCP.F R2.x, R0.w;\nRSQ.F R1.x, |R1'
                b'.z|;\nRSQ.F R0.w, |R1.y|;\nRCP.F R2.z, R1.x;\nRCP.F R2.y, R0.w;\nMAD.F R1.xyz, -R2, {1.5, 0, 0, 0}.x, R0;\nMA'
                b'D.F R2.xyz, R2, {1.5, 0, 0, 0}.x, R0;\nADD.F R0.xyz, R2, -R1;\nMUL.F R0.xyz, R0, {0.5, 0, 0, 0}.x;\nADD.F R'
                b'1.xyz, R2, R1;\nDIV.F R4.xyz, R4, R2.w;\nMUL.F R2.xyz, R1, {0.5, 0, 0, 0}.x;\nMAX.F R1.xyz, R4, {0, 0, 0, 0'
                b'}.x;\nADD.F R4.xyz, R1, -R2;\nRCP.F R0.x, R0.x;\nRCP.F R0.z, R0.z;\nRCP.F R0.y, R0.y;\nMUL.F R0.xyz, R4, '
                b'R0;\nMAX.F R0.y, |R0|, |R0.z|;\nMAX.F R0.x, |R0|, R0.y;\nSGT.F R0.y, R0.x, {1, 0, 0, 0}.x;\nTRUNC.U.CC HC.x,'
                b' R0.y;\nIF NE.x;\nRCP.F R0.x, R0.x;\nMAD.F R0.xyz, R4, R0.x, R2;\nELSE;\nMOV.F R0.xyz, R1;\nENDIF;\nDP3.F R'
                b'1.x, R0, {0.298999995, 0.587000012, 0.114, 0};\nDP3.F R0.w, R3, {0.298999995, 0.587000012, 0.114, 0};\nADD'
                b'.F R1.x, R1, {1, 0, 0, 0};\nDIV.F R1.x, {0.899999976, 0, 0, 0}, R1.x;\nADD.F R0.w, R0, {1, 0, 0, 0}.x;\nDIV'
                b'.F R0.w, {0.100000024, 0, 0, 0}.x, R0.w;\nMUL.F R0.xyz, R0, R1.x;\nADD.F R1.y, R0.w, R1.x;\nRCP.F R1.x, R1.'
                b'y;\nMAD.F R0.xyz, R3, R0.w, R0;\nMUL.F result_color0.xyz, R0, R1.x;\nMOV.F result_color0.w, R1;\nEND'
                b'\n\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00 \x00\x00\x00\x07\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x01\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q\rt'
                b'q\x0eb.',
 'binary_format': c_uint(36385),
 'fragment_shader_code': '#version 430 core\n'
                         '#define MATERIAL_COMPONENTS 1\n'
                         '#define FRAGMENT_SHADER 1\n'
                         '\n'
                         '\n'
                         '\n'
                         '\n'
                         '\n'
                         '\n'
                         '\n'
                         '\n'
                         '\n'
                         '\n'
                         '//------------ INCLUDE -------------//\n'
                         '// #include "scene_constants.glsl"\n'
                         '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                         '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                         'layout(std140, binding=0) uniform sceneConstants\n'
                         '{\n'
                         '    float TIME;\n'
                         '    float JITTER_FRAME;\n'
                         '    float RENDER_SSR;\n'
                         '    float RENDER_SSAO;\n'
                         '};\n'
                         '\n'
                         'layout(std140, binding=1) uniform viewConstants\n'
                         '{\n'
                         '    mat4 VIEW;\n'
                         '    mat4 INV_VIEW;\n'
                         '    mat4 VIEW_ORIGIN;\n'
                         '    mat4 INV_VIEW_ORIGIN;\n'
                         '    mat4 PROJECTION;\n'
                         '    mat4 INV_PROJECTION;\n'
                         '    vec4 CAMERA_POSITION;\n'
                         '    vec2 NEAR_FAR;\n'
                         '    vec2 JITTER_DELTA;\n'
                         '};\n'
                         '\n'
                         'layout(std140, binding=2) uniform viewProjection\n'
                         '{\n'
                         '    mat4 VIEW_PROJECTION;\n'
                         '    mat4 PREV_VIEW_PROJECTION;\n'
                         '};\n'
                         '\n'
                         'layout(std140, binding=3) uniform lightConstants\n'
                         '{\n'
                         '    vec4 LIGHT_POSITION;\n'
                         '    vec4 LIGHT_DIRECTION;\n'
                         '    vec4 LIGHT_COLOR;\n'
                         '    mat4 SHADOW_MATRIX;\n'
                         '};\n'
                         '\n'
                         'const int MAX_BONES_PER_VERTEX = 4;\n'
                         'const int MAX_BONES = 100;\n'
                         'const float SHADOW_BIAS = -0.0001;\n'
                         '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                         '//------------ INCLUDE -------------//\n'
                         '// #include "quad.glsl"\n'
                         '#ifndef UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                         '#define UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                         'struct VERTEX_OUTPUT\n'
                         '{\n'
                         '    vec2 tex_coord;\n'
                         '    vec3 position;\n'
                         '};\n'
                         '\n'
                         '#ifdef VERTEX_SHADER\n'
                         '#endif \n'
                         '#endif /* UUID_09be6e6c_9934_3777_a020_c1b0299d186d */\n'
                         '\n'
                         '\n'
                         '\n'
                         'const float Pi = 3.141592f;\n'
                         'const int FilterTypes_Box = 0;\n'
                         'const int FilterTypes_Triangle = 1;\n'
                         'const int FilterTypes_Gaussian = 2;\n'
                         'const int FilterTypes_BlackmanHarris = 3;\n'
                         'const int FilterTypes_Smoothstep = 4;\n'
                         'const int FilterTypes_BSpline = 5;\n'
                         'const int FilterTypes_CatmullRom = 6;\n'
                         'const int FilterTypes_Mitchell = 7;\n'
                         'const int FilterTypes_GeneralizedCubic = 8;\n'
                         'const int FilterTypes_Sinc = 9;\n'
                         '\n'
                         'const int ClampModes_Disabled = 0;\n'
                         'const int ClampModes_RGB_Clamp = 1;\n'
                         'const int ClampModes_RGB_Clip = 2;\n'
                         'const int ClampModes_Variance_Clip = 3;\n'
                         '\n'
                         'const int DilationModes_CenterAverage = 0;\n'
                         'const int DilationModes_DilateNearestDepth = 1;\n'
                         'const int DilationModes_DilateGreatestVelocity = 2;\n'
                         '\n'
                         '\n'
                         '\n'
                         'const int ResolveFilterType = FilterTypes_BSpline;\n'
                         'const float ResolveFilterDiameter = 2.0;  \n'
                         'const float GaussianSigma = 0.25;   \n'
                         'const float CubicB = 0.33;  \n'
                         'const float CubicC = 0.33;  \n'
                         'const float ExposureFilterOffset = 2.0;     \n'
                         'const float TemporalAABlendFactor = 0.9;    \n'
                         'const int NeighborhoodClampMode = ClampModes_Variance_Clip;\n'
                         'const float VarianceClipGamma = 1.5;    \n'
                         'const float LowFreqWeight = 0.25;   \n'
                         'const float HiFreqWeight = 0.85;    \n'
                         'const int DilationMode = DilationModes_DilateGreatestVelocity;\n'
                         'const int ReprojectionFilter = FilterTypes_CatmullRom;\n'
                         'const float ExposureScale = 0.0;    \n'
                         'const float ManualExposure = -2.5;  \n'
                         '\n'
                         'const bool UseStandardReprojection = false;\n'
                         'const bool UseTemporalColorWeighting = false;\n'
                         'const bool InverseLuminanceFiltering = true;\n'
                         'const bool UseExposureFiltering = false;\n'
                         '\n'
                         'uniform sampler2D texture_prev;\n'
                         'uniform sampler2D texture_input;\n'
                         'uniform sampler2D texture_velocity;\n'
                         'uniform sampler2D texture_depth;\n'
                         '\n'
                         '\n'
                         '\n'
                         'float FilterBox(in float x)\n'
                         '{\n'
                         '    return x <= 1.0 ? 1.0 : 0.0;\n'
                         '}\n'
                         '\n'
                         'float FilterTriangle(in float x)\n'
                         '{\n'
                         '    return clamp(1.0f - x, 0.0, 1.0);\n'
                         '}\n'
                         '\n'
                         'float FilterGaussian(in float x)\n'
                         '{\n'
                         '    const float sigma = GaussianSigma;\n'
                         '    const float g = 1.0f / sqrt(2.0f * 3.14159f * sigma * sigma);\n'
                         '    return (g * exp(-(x * x) / (2 * sigma * sigma)));\n'
                         '}\n'
                         '\n'
                         'float FilterCubic(in float x, in float B, in float C)\n'
                         '{\n'
                         '    float y = 0.0f;\n'
                         '    float x2 = x * x;\n'
                         '    float x3 = x * x * x;\n'
                         '    if(x < 1)\n'
                         '        y = (12 - 9 * B - 6 * C) * x3 + (-18 + 12 * B + 6 * C) * x2 + (6 - 2 * B);\n'
                         '    else if (x <= 2)\n'
                         '        y = (-B - 6 * C) * x3 + (6 * B + 30 * C) * x2 + (-12 * B - 48 * C) * x + (8 * B + 24 * C);\n'
                         '    return y / 6.0f;\n'
                         '}\n'
                         '\n'
                         'float FilterSinc(in float x, in float filterRadius)\n'
                         '{\n'
                         '    float s;\n'
                         '    x *= filterRadius * 2.0f;\n'
                         '    if(x < 0.001f)\n'
                         '        s = 1.0f;\n'
                         '    else\n'
                         '        s = sin(x * Pi) / (x * Pi);\n'
                         '    return s;\n'
                         '}\n'
                         '\n'
                         'float FilterBlackmanHarris(in float x)\n'
                         '{\n'
                         '    x = 1.0f - x;\n'
                         '    const float a0 = 0.35875f;\n'
                         '    const float a1 = 0.48829f;\n'
                         '    const float a2 = 0.14128f;\n'
                         '    const float a3 = 0.01168f;\n'
                         '    return clamp(a0 - a1 * cos(Pi * x) + a2 * cos(2 * Pi * x) - a3 * cos(3 * Pi * x), 0.0, 1.0);\n'
                         '}\n'
                         '\n'
                         'float FilterSmoothstep(in float x)\n'
                         '{\n'
                         '    return 1.0f - smoothstep(0.0f, 1.0f, x);\n'
                         '}\n'
                         '\n'
                         'float Filter(in float x, in int filterType, in float filterRadius, in bool rescaleCubic)\n'
                         '{\n'
                         '    \n'
                         '    \n'
                         '    float cubicX = rescaleCubic ? x * 2.0f : x;\n'
                         '\n'
                         '    if(filterType == FilterTypes_Box)\n'
                         '        return FilterBox(x);\n'
                         '    else if(filterType == FilterTypes_Triangle)\n'
                         '        return FilterTriangle(x);\n'
                         '    else if(filterType == FilterTypes_Gaussian)\n'
                         '        return FilterGaussian(x);\n'
                         '    else if(filterType == FilterTypes_BlackmanHarris)\n'
                         '        return FilterBlackmanHarris(x);\n'
                         '    else if(filterType == FilterTypes_Smoothstep)\n'
                         '        return FilterSmoothstep(x);\n'
                         '    else if(filterType == FilterTypes_BSpline)\n'
                         '        return FilterCubic(cubicX, 1.0, 0.0f);\n'
                         '    else if(filterType == FilterTypes_CatmullRom)\n'
                         '        return FilterCubic(cubicX, 0, 0.5f);\n'
                         '    else if(filterType == FilterTypes_Mitchell)\n'
                         '        return FilterCubic(cubicX, 1 / 3.0f, 1 / 3.0f);\n'
                         '    else if(filterType == FilterTypes_GeneralizedCubic)\n'
                         '        return FilterCubic(cubicX, CubicB, CubicC);\n'
                         '    else if(filterType == FilterTypes_Sinc)\n'
                         '        return FilterSinc(x, filterRadius);\n'
                         '    else\n'
                         '        return 1.0f;\n'
                         '}\n'
                         '\n'
                         'float Luminance(in vec3 clr)\n'
                         '{\n'
                         '    return dot(clr, vec3(0.299f, 0.587f, 0.114f));\n'
                         '}\n'
                         '\n'
                         '\n'
                         '\n'
                         'vec3 ClipAABB(vec3 aabbMin, vec3 aabbMax, vec3 prevSample, vec3 avg)\n'
                         '{\n'
                         '    #if 1\n'
                         '        \n'
                         '        vec3 p_clip = 0.5 * (aabbMax + aabbMin);\n'
                         '        vec3 e_clip = 0.5 * (aabbMax - aabbMin);\n'
                         '\n'
                         '        vec3 v_clip = prevSample - p_clip;\n'
                         '        vec3 v_unit = v_clip.xyz / e_clip;\n'
                         '        vec3 a_unit = abs(v_unit);\n'
                         '        float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));\n'
                         '\n'
                         '        if (ma_unit > 1.0)\n'
                         '            return p_clip + v_clip / ma_unit;\n'
                         '        else\n'
                         '            return prevSample;\n'
                         '    #else\n'
                         '    #endif\n'
                         '}\n'
                         '\n'
                         'vec3 Reproject(vec2 texCoord)\n'
                         '{\n'
                         '    vec2 inv_velocity_tex_size = 1.0 / textureSize(texture_velocity, 0).xy;\n'
                         '    vec2 velocity = vec2(0.0, 0.0);\n'
                         '\n'
                         '    if(DilationMode == DilationModes_CenterAverage)\n'
                         '    {\n'
                         '        velocity += texture(texture_velocity, texCoord).xy;\n'
                         '    }\n'
                         '    else if(DilationMode == DilationModes_DilateNearestDepth)\n'
                         '    {\n'
                         '        vec2 inv_depth_tex_size = 1.0 / textureSize(texture_depth, 0).xy;\n'
                         '        float closestDepth = 10.0f;\n'
                         '        for(int vy = -1; vy <= 1; ++vy)\n'
                         '        {\n'
                         '            for(int vx = -1; vx <= 1; ++vx)\n'
                         '            {\n'
                         '                vec2 neighborVelocity = texture(texture_velocity, texCoord + vec2(vx, vy) * '
                         'inv_velocity_tex_size).xy;\n'
                         '                float neighborDepth = texture(texture_depth, texCoord + vec2(vx, vy) * '
                         'inv_depth_tex_size).x;\n'
                         '                if(neighborDepth < closestDepth)\n'
                         '                {\n'
                         '                    velocity = neighborVelocity;\n'
                         '                    closestDepth = neighborDepth;\n'
                         '                }\n'
                         '            }\n'
                         '        }\n'
                         '    }\n'
                         '    else if(DilationMode == DilationModes_DilateGreatestVelocity)\n'
                         '    {\n'
                         '        float greatestVelocity = -1.0f;\n'
                         '        for(int vy = -1; vy <= 1; ++vy)\n'
                         '        {\n'
                         '            for(int vx = -1; vx <= 1; ++vx)\n'
                         '            {\n'
                         '                vec2 neighborVelocity = texture(texture_velocity, texCoord + vec2(vx, vy) * '
                         'inv_velocity_tex_size).xy;\n'
                         '                float neighborVelocityMag = dot(neighborVelocity, neighborVelocity).x;\n'
                         '                if(dot(neighborVelocity, neighborVelocity) > greatestVelocity)\n'
                         '                {\n'
                         '                    velocity = neighborVelocity;\n'
                         '                    greatestVelocity = neighborVelocityMag;\n'
                         '                }\n'
                         '            }\n'
                         '        }\n'
                         '    }\n'
                         '\n'
                         '    vec2 texture_prev_size = textureSize(texture_prev, 0).xy;\n'
                         '    vec2 reprojectedUV = texCoord - velocity;\n'
                         '    vec2 reprojectedPos = reprojectedUV * texture_prev_size;\n'
                         '\n'
                         '    if(UseStandardReprojection)\n'
                         '    {\n'
                         '        return texture(texture_prev, reprojectedUV).xyz;\n'
                         '    }\n'
                         '\n'
                         '    vec3 sum = vec3(0.0f);\n'
                         '    float totalWeight = 0.0f;\n'
                         '\n'
                         '    for(int ty = -1; ty <= 2; ++ty)\n'
                         '    {\n'
                         '        for(int tx = -1; tx <= 2; ++tx)\n'
                         '        {\n'
                         '            vec2 samplePos = floor(reprojectedPos + vec2(tx, ty)) + 0.5f;\n'
                         '            vec3 reprojectedSample = texture(texture_prev, samplePos / texture_prev_size).xyz;\n'
                         '\n'
                         '            vec2 sampleDist = abs(samplePos - reprojectedPos);\n'
                         '            float filterWeight = Filter(sampleDist.x, ReprojectionFilter, 1.0f, false) *\n'
                         '                                 Filter(sampleDist.y, ReprojectionFilter, 1.0f, false);\n'
                         '\n'
                         '            if(InverseLuminanceFiltering)\n'
                         '            {\n'
                         '                float sampleLum = Luminance(reprojectedSample);\n'
                         '                if(UseExposureFiltering)\n'
                         '                {\n'
                         '                    sampleLum *= exp2(ManualExposure - ExposureScale + ExposureFilterOffset);\n'
                         '                }\n'
                         '                filterWeight /= (1.0f + sampleLum);\n'
                         '            }\n'
                         '\n'
                         '            sum += reprojectedSample * filterWeight;\n'
                         '            totalWeight += filterWeight;\n'
                         '        }\n'
                         '    }\n'
                         '    return max(sum / totalWeight, 0.0f);\n'
                         '}\n'
                         '\n'
                         'vec4 ResolvePS(vec2 texCoord, vec2 pixelPos)\n'
                         '{\n'
                         '    vec3 sum = vec3(0.0f);\n'
                         '    float totalWeight = 0.0f;\n'
                         '\n'
                         '    vec3 clrMin = vec3(99999999.0f);\n'
                         '    vec3 clrMax = vec3(-99999999.0f);\n'
                         '\n'
                         '    vec3 m1 = vec3(0.0f);\n'
                         '    vec3 m2 = vec3(0.0f);\n'
                         '    float mWeight = 0.0f;\n'
                         '\n'
                         '    vec2 texture_input_size = textureSize(texture_input, 0).xy;\n'
                         '\n'
                         '    const float filterRadius = ResolveFilterDiameter / 2.0f;\n'
                         '\n'
                         '    for(int y = -1; y <= 1; ++y)\n'
                         '    {\n'
                         '        for(int x = -1; x <= 1; ++x)\n'
                         '        {\n'
                         '            vec2 sampleOffset = vec2(x, y);\n'
                         '            vec2 sampleUV = texCoord + sampleOffset / texture_input_size;\n'
                         '            sampleUV = clamp(sampleUV, 0.0, 1.0);\n'
                         '\n'
                         '            vec3 sample_color = texture(texture_input, sampleUV).xyz;\n'
                         '\n'
                         '            vec2 sampleDist = abs(sampleOffset) / (ResolveFilterDiameter / 2.0f);\n'
                         '\n'
                         '            float weight = Filter(sampleDist.x, ResolveFilterType, filterRadius, true) *\n'
                         '                           Filter(sampleDist.y, ResolveFilterType, filterRadius, true);\n'
                         '            clrMin = min(clrMin, sample_color);\n'
                         '            clrMax = max(clrMax, sample_color);\n'
                         '\n'
                         '            if(InverseLuminanceFiltering)\n'
                         '            {\n'
                         '                float sampleLum = Luminance(sample_color);\n'
                         '                if(UseExposureFiltering)\n'
                         '                {\n'
                         '                    sampleLum *= exp2(ManualExposure - ExposureScale + ExposureFilterOffset);\n'
                         '                }\n'
                         '                weight /= (1.0f + sampleLum);\n'
                         '            }\n'
                         '\n'
                         '            sum += sample_color * weight;\n'
                         '            totalWeight += weight;\n'
                         '\n'
                         '            m1 += sample_color;\n'
                         '            m2 += sample_color * sample_color;\n'
                         '            mWeight += 1.0f;\n'
                         '        }\n'
                         '    }\n'
                         '\n'
                         '    vec4 result = texture(texture_input, texCoord);\n'
                         '\n'
                         '    vec3 currColor = result.xyz;\n'
                         '    vec3 prevColor = Reproject(texCoord);\n'
                         '\n'
                         '    if(NeighborhoodClampMode == ClampModes_RGB_Clamp)\n'
                         '    {\n'
                         '        prevColor = clamp(prevColor, clrMin, clrMax);\n'
                         '    }\n'
                         '    else if(NeighborhoodClampMode == ClampModes_RGB_Clip)\n'
                         '    {\n'
                         '        prevColor = ClipAABB(clrMin, clrMax, prevColor, m1 / mWeight);\n'
                         '    }\n'
                         '    else if(NeighborhoodClampMode == ClampModes_Variance_Clip)\n'
                         '    {\n'
                         '        vec3 mu = m1 / mWeight;\n'
                         '        vec3 sigma = sqrt(abs(m2 / mWeight - mu * mu));\n'
                         '        vec3 minc = mu - VarianceClipGamma * sigma;\n'
                         '        vec3 maxc = mu + VarianceClipGamma * sigma;\n'
                         '        prevColor = ClipAABB(minc, maxc, prevColor, mu);\n'
                         '    }\n'
                         '\n'
                         '    vec3 weightA = vec3(clamp(1.0f - TemporalAABlendFactor, 0.0, 1.0));\n'
                         '    vec3 weightB = vec3(clamp(TemporalAABlendFactor, 0.0, 1.0));\n'
                         '\n'
                         '    if(UseTemporalColorWeighting)\n'
                         '    {\n'
                         '        vec3 temporalWeight = clamp(abs(clrMax - clrMin) / currColor, 0.0, 1.0);\n'
                         '        weightB = clamp(mix(vec3(LowFreqWeight), vec3(HiFreqWeight), temporalWeight), 0.0, 1.0);\n'
                         '        weightA = 1.0f - weightB;\n'
                         '    }\n'
                         '\n'
                         '    if(InverseLuminanceFiltering)\n'
                         '    {\n'
                         '        weightA /= (1.0f + Luminance(currColor));\n'
                         '        weightB /= (1.0f + Luminance(prevColor));\n'
                         '    }\n'
                         '\n'
                         '    result.xyz = (currColor * weightA + prevColor * weightB) / (weightA + weightB);\n'
                         '\n'
                         '    return result;\n'
                         '}\n'
                         '\n'
                         '\n'
                         '#ifdef FRAGMENT_SHADER\n'
                         'layout (location = 0) in VERTEX_OUTPUT vs_output;\n'
                         'layout (location = 0) out vec4 fs_output;\n'
                         '\n'
                         'void main() {\n'
                         '    fs_output = ResolvePS(vs_output.tex_coord.xy, gl_FragCoord.xy);\n'
                         '}\n'
                         '#endif ',
 'include_files': {'Resource/Shaders/quad.glsl': '2017-12-04 00:03:41.464634',
                   'Resource/Shaders/scene_constants.glsl': '2017-12-08 03:08:07.316305'},
 'macros': {},
 'material_components': [],
 'shader_name': 'temporal_antialiasing',
 'uniforms': [('sampler2D', 'texture_prev'),
              ('sampler2D', 'texture_input'),
              ('sampler2D', 'texture_velocity'),
              ('sampler2D', 'texture_depth')],
 'vertex_shader_code': '#version 430 core\n'
                       '#define MATERIAL_COMPONENTS 1\n'
                       '#define VERTEX_SHADER 1\n'
                       '\n'
                       '\n'
                       '\n'
                       '\n'
                       '\n'
                       '\n'
                       '\n'
                       '\n'
                       '\n'
                       '\n'
                       '//------------ INCLUDE -------------//\n'
                       '// #include "scene_constants.glsl"\n'
                       '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                       '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                       'layout(std140, binding=0) uniform sceneConstants\n'
                       '{\n'
                       '    float TIME;\n'
                       '    float JITTER_FRAME;\n'
                       '    float RENDER_SSR;\n'
                       '    float RENDER_SSAO;\n'
                       '};\n'
                       '\n'
                       'layout(std140, binding=1) uniform viewConstants\n'
                       '{\n'
                       '    mat4 VIEW;\n'
                       '    mat4 INV_VIEW;\n'
                       '    mat4 VIEW_ORIGIN;\n'
                       '    mat4 INV_VIEW_ORIGIN;\n'
                       '    mat4 PROJECTION;\n'
                       '    mat4 INV_PROJECTION;\n'
                       '    vec4 CAMERA_POSITION;\n'
                       '    vec2 NEAR_FAR;\n'
                       '    vec2 JITTER_DELTA;\n'
                       '};\n'
                       '\n'
                       'layout(std140, binding=2) uniform viewProjection\n'
                       '{\n'
                       '    mat4 VIEW_PROJECTION;\n'
                       '    mat4 PREV_VIEW_PROJECTION;\n'
                       '};\n'
                       '\n'
                       'layout(std140, binding=3) uniform lightConstants\n'
                       '{\n'
                       '    vec4 LIGHT_POSITION;\n'
                       '    vec4 LIGHT_DIRECTION;\n'
                       '    vec4 LIGHT_COLOR;\n'
                       '    mat4 SHADOW_MATRIX;\n'
                       '};\n'
                       '\n'
                       'const int MAX_BONES_PER_VERTEX = 4;\n'
                       'const int MAX_BONES = 100;\n'
                       'const float SHADOW_BIAS = -0.0001;\n'
                       '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                       '//------------ INCLUDE -------------//\n'
                       '// #include "quad.glsl"\n'
                       '#ifndef UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                       '#define UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                       'struct VERTEX_OUTPUT\n'
                       '{\n'
                       '    vec2 tex_coord;\n'
                       '    vec3 position;\n'
                       '};\n'
                       '\n'
                       '#ifdef VERTEX_SHADER\n'
                       'layout (location = 0) in vec3 vs_in_position;\n'
                       'layout (location = 1) in vec4 vs_in_color;\n'
                       'layout (location = 2) in vec3 vs_in_normal;\n'
                       'layout (location = 3) in vec3 vs_in_tangent;\n'
                       'layout (location = 4) in vec2 vs_in_tex_coord;\n'
                       '\n'
                       'layout (location = 0) out VERTEX_OUTPUT vs_output;\n'
                       '\n'
                       'void main() {\n'
                       '    vs_output.tex_coord = vs_in_tex_coord;\n'
                       '    vs_output.position = vs_in_position;\n'
                       '    gl_Position = vec4(vs_in_position, 1.0);\n'
                       '}\n'
                       '#endif \n'
                       '#endif /* UUID_09be6e6c_9934_3777_a020_c1b0299d186d */\n'
                       '\n'
                       '\n'
                       '\n'
                       'const float Pi = 3.141592f;\n'
                       'const int FilterTypes_Box = 0;\n'
                       'const int FilterTypes_Triangle = 1;\n'
                       'const int FilterTypes_Gaussian = 2;\n'
                       'const int FilterTypes_BlackmanHarris = 3;\n'
                       'const int FilterTypes_Smoothstep = 4;\n'
                       'const int FilterTypes_BSpline = 5;\n'
                       'const int FilterTypes_CatmullRom = 6;\n'
                       'const int FilterTypes_Mitchell = 7;\n'
                       'const int FilterTypes_GeneralizedCubic = 8;\n'
                       'const int FilterTypes_Sinc = 9;\n'
                       '\n'
                       'const int ClampModes_Disabled = 0;\n'
                       'const int ClampModes_RGB_Clamp = 1;\n'
                       'const int ClampModes_RGB_Clip = 2;\n'
                       'const int ClampModes_Variance_Clip = 3;\n'
                       '\n'
                       'const int DilationModes_CenterAverage = 0;\n'
                       'const int DilationModes_DilateNearestDepth = 1;\n'
                       'const int DilationModes_DilateGreatestVelocity = 2;\n'
                       '\n'
                       '\n'
                       '\n'
                       'const int ResolveFilterType = FilterTypes_BSpline;\n'
                       'const float ResolveFilterDiameter = 2.0;  \n'
                       'const float GaussianSigma = 0.25;   \n'
                       'const float CubicB = 0.33;  \n'
                       'const float CubicC = 0.33;  \n'
                       'const float ExposureFilterOffset = 2.0;     \n'
                       'const float TemporalAABlendFactor = 0.9;    \n'
                       'const int NeighborhoodClampMode = ClampModes_Variance_Clip;\n'
                       'const float VarianceClipGamma = 1.5;    \n'
                       'const float LowFreqWeight = 0.25;   \n'
                       'const float HiFreqWeight = 0.85;    \n'
                       'const int DilationMode = DilationModes_DilateGreatestVelocity;\n'
                       'const int ReprojectionFilter = FilterTypes_CatmullRom;\n'
                       'const float ExposureScale = 0.0;    \n'
                       'const float ManualExposure = -2.5;  \n'
                       '\n'
                       'const bool UseStandardReprojection = false;\n'
                       'const bool UseTemporalColorWeighting = false;\n'
                       'const bool InverseLuminanceFiltering = true;\n'
                       'const bool UseExposureFiltering = false;\n'
                       '\n'
                       'uniform sampler2D texture_prev;\n'
                       'uniform sampler2D texture_input;\n'
                       'uniform sampler2D texture_velocity;\n'
                       'uniform sampler2D texture_depth;\n'
                       '\n'
                       '\n'
                       '\n'
                       'float FilterBox(in float x)\n'
                       '{\n'
                       '    return x <= 1.0 ? 1.0 : 0.0;\n'
                       '}\n'
                       '\n'
                       'float FilterTriangle(in float x)\n'
                       '{\n'
                       '    return clamp(1.0f - x, 0.0, 1.0);\n'
                       '}\n'
                       '\n'
                       'float FilterGaussian(in float x)\n'
                       '{\n'
                       '    const float sigma = GaussianSigma;\n'
                       '    const float g = 1.0f / sqrt(2.0f * 3.14159f * sigma * sigma);\n'
                       '    return (g * exp(-(x * x) / (2 * sigma * sigma)));\n'
                       '}\n'
                       '\n'
                       'float FilterCubic(in float x, in float B, in float C)\n'
                       '{\n'
                       '    float y = 0.0f;\n'
                       '    float x2 = x * x;\n'
                       '    float x3 = x * x * x;\n'
                       '    if(x < 1)\n'
                       '        y = (12 - 9 * B - 6 * C) * x3 + (-18 + 12 * B + 6 * C) * x2 + (6 - 2 * B);\n'
                       '    else if (x <= 2)\n'
                       '        y = (-B - 6 * C) * x3 + (6 * B + 30 * C) * x2 + (-12 * B - 48 * C) * x + (8 * B + 24 * C);\n'
                       '    return y / 6.0f;\n'
                       '}\n'
                       '\n'
                       'float FilterSinc(in float x, in float filterRadius)\n'
                       '{\n'
                       '    float s;\n'
                       '    x *= filterRadius * 2.0f;\n'
                       '    if(x < 0.001f)\n'
                       '        s = 1.0f;\n'
                       '    else\n'
                       '        s = sin(x * Pi) / (x * Pi);\n'
                       '    return s;\n'
                       '}\n'
                       '\n'
                       'float FilterBlackmanHarris(in float x)\n'
                       '{\n'
                       '    x = 1.0f - x;\n'
                       '    const float a0 = 0.35875f;\n'
                       '    const float a1 = 0.48829f;\n'
                       '    const float a2 = 0.14128f;\n'
                       '    const float a3 = 0.01168f;\n'
                       '    return clamp(a0 - a1 * cos(Pi * x) + a2 * cos(2 * Pi * x) - a3 * cos(3 * Pi * x), 0.0, 1.0);\n'
                       '}\n'
                       '\n'
                       'float FilterSmoothstep(in float x)\n'
                       '{\n'
                       '    return 1.0f - smoothstep(0.0f, 1.0f, x);\n'
                       '}\n'
                       '\n'
                       'float Filter(in float x, in int filterType, in float filterRadius, in bool rescaleCubic)\n'
                       '{\n'
                       '    \n'
                       '    \n'
                       '    float cubicX = rescaleCubic ? x * 2.0f : x;\n'
                       '\n'
                       '    if(filterType == FilterTypes_Box)\n'
                       '        return FilterBox(x);\n'
                       '    else if(filterType == FilterTypes_Triangle)\n'
                       '        return FilterTriangle(x);\n'
                       '    else if(filterType == FilterTypes_Gaussian)\n'
                       '        return FilterGaussian(x);\n'
                       '    else if(filterType == FilterTypes_BlackmanHarris)\n'
                       '        return FilterBlackmanHarris(x);\n'
                       '    else if(filterType == FilterTypes_Smoothstep)\n'
                       '        return FilterSmoothstep(x);\n'
                       '    else if(filterType == FilterTypes_BSpline)\n'
                       '        return FilterCubic(cubicX, 1.0, 0.0f);\n'
                       '    else if(filterType == FilterTypes_CatmullRom)\n'
                       '        return FilterCubic(cubicX, 0, 0.5f);\n'
                       '    else if(filterType == FilterTypes_Mitchell)\n'
                       '        return FilterCubic(cubicX, 1 / 3.0f, 1 / 3.0f);\n'
                       '    else if(filterType == FilterTypes_GeneralizedCubic)\n'
                       '        return FilterCubic(cubicX, CubicB, CubicC);\n'
                       '    else if(filterType == FilterTypes_Sinc)\n'
                       '        return FilterSinc(x, filterRadius);\n'
                       '    else\n'
                       '        return 1.0f;\n'
                       '}\n'
                       '\n'
                       'float Luminance(in vec3 clr)\n'
                       '{\n'
                       '    return dot(clr, vec3(0.299f, 0.587f, 0.114f));\n'
                       '}\n'
                       '\n'
                       '\n'
                       '\n'
                       'vec3 ClipAABB(vec3 aabbMin, vec3 aabbMax, vec3 prevSample, vec3 avg)\n'
                       '{\n'
                       '    #if 1\n'
                       '        \n'
                       '        vec3 p_clip = 0.5 * (aabbMax + aabbMin);\n'
                       '        vec3 e_clip = 0.5 * (aabbMax - aabbMin);\n'
                       '\n'
                       '        vec3 v_clip = prevSample - p_clip;\n'
                       '        vec3 v_unit = v_clip.xyz / e_clip;\n'
                       '        vec3 a_unit = abs(v_unit);\n'
                       '        float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));\n'
                       '\n'
                       '        if (ma_unit > 1.0)\n'
                       '            return p_clip + v_clip / ma_unit;\n'
                       '        else\n'
                       '            return prevSample;\n'
                       '    #else\n'
                       '    #endif\n'
                       '}\n'
                       '\n'
                       'vec3 Reproject(vec2 texCoord)\n'
                       '{\n'
                       '    vec2 inv_velocity_tex_size = 1.0 / textureSize(texture_velocity, 0).xy;\n'
                       '    vec2 velocity = vec2(0.0, 0.0);\n'
                       '\n'
                       '    if(DilationMode == DilationModes_CenterAverage)\n'
                       '    {\n'
                       '        velocity += texture(texture_velocity, texCoord).xy;\n'
                       '    }\n'
                       '    else if(DilationMode == DilationModes_DilateNearestDepth)\n'
                       '    {\n'
                       '        vec2 inv_depth_tex_size = 1.0 / textureSize(texture_depth, 0).xy;\n'
                       '        float closestDepth = 10.0f;\n'
                       '        for(int vy = -1; vy <= 1; ++vy)\n'
                       '        {\n'
                       '            for(int vx = -1; vx <= 1; ++vx)\n'
                       '            {\n'
                       '                vec2 neighborVelocity = texture(texture_velocity, texCoord + vec2(vx, vy) * '
                       'inv_velocity_tex_size).xy;\n'
                       '                float neighborDepth = texture(texture_depth, texCoord + vec2(vx, vy) * '
                       'inv_depth_tex_size).x;\n'
                       '                if(neighborDepth < closestDepth)\n'
                       '                {\n'
                       '                    velocity = neighborVelocity;\n'
                       '                    closestDepth = neighborDepth;\n'
                       '                }\n'
                       '            }\n'
                       '        }\n'
                       '    }\n'
                       '    else if(DilationMode == DilationModes_DilateGreatestVelocity)\n'
                       '    {\n'
                       '        float greatestVelocity = -1.0f;\n'
                       '        for(int vy = -1; vy <= 1; ++vy)\n'
                       '        {\n'
                       '            for(int vx = -1; vx <= 1; ++vx)\n'
                       '            {\n'
                       '                vec2 neighborVelocity = texture(texture_velocity, texCoord + vec2(vx, vy) * '
                       'inv_velocity_tex_size).xy;\n'
                       '                float neighborVelocityMag = dot(neighborVelocity, neighborVelocity).x;\n'
                       '                if(dot(neighborVelocity, neighborVelocity) > greatestVelocity)\n'
                       '                {\n'
                       '                    velocity = neighborVelocity;\n'
                       '                    greatestVelocity = neighborVelocityMag;\n'
                       '                }\n'
                       '            }\n'
                       '        }\n'
                       '    }\n'
                       '\n'
                       '    vec2 texture_prev_size = textureSize(texture_prev, 0).xy;\n'
                       '    vec2 reprojectedUV = texCoord - velocity;\n'
                       '    vec2 reprojectedPos = reprojectedUV * texture_prev_size;\n'
                       '\n'
                       '    if(UseStandardReprojection)\n'
                       '    {\n'
                       '        return texture(texture_prev, reprojectedUV).xyz;\n'
                       '    }\n'
                       '\n'
                       '    vec3 sum = vec3(0.0f);\n'
                       '    float totalWeight = 0.0f;\n'
                       '\n'
                       '    for(int ty = -1; ty <= 2; ++ty)\n'
                       '    {\n'
                       '        for(int tx = -1; tx <= 2; ++tx)\n'
                       '        {\n'
                       '            vec2 samplePos = floor(reprojectedPos + vec2(tx, ty)) + 0.5f;\n'
                       '            vec3 reprojectedSample = texture(texture_prev, samplePos / texture_prev_size).xyz;\n'
                       '\n'
                       '            vec2 sampleDist = abs(samplePos - reprojectedPos);\n'
                       '            float filterWeight = Filter(sampleDist.x, ReprojectionFilter, 1.0f, false) *\n'
                       '                                 Filter(sampleDist.y, ReprojectionFilter, 1.0f, false);\n'
                       '\n'
                       '            if(InverseLuminanceFiltering)\n'
                       '            {\n'
                       '                float sampleLum = Luminance(reprojectedSample);\n'
                       '                if(UseExposureFiltering)\n'
                       '                {\n'
                       '                    sampleLum *= exp2(ManualExposure - ExposureScale + ExposureFilterOffset);\n'
                       '                }\n'
                       '                filterWeight /= (1.0f + sampleLum);\n'
                       '            }\n'
                       '\n'
                       '            sum += reprojectedSample * filterWeight;\n'
                       '            totalWeight += filterWeight;\n'
                       '        }\n'
                       '    }\n'
                       '    return max(sum / totalWeight, 0.0f);\n'
                       '}\n'
                       '\n'
                       'vec4 ResolvePS(vec2 texCoord, vec2 pixelPos)\n'
                       '{\n'
                       '    vec3 sum = vec3(0.0f);\n'
                       '    float totalWeight = 0.0f;\n'
                       '\n'
                       '    vec3 clrMin = vec3(99999999.0f);\n'
                       '    vec3 clrMax = vec3(-99999999.0f);\n'
                       '\n'
                       '    vec3 m1 = vec3(0.0f);\n'
                       '    vec3 m2 = vec3(0.0f);\n'
                       '    float mWeight = 0.0f;\n'
                       '\n'
                       '    vec2 texture_input_size = textureSize(texture_input, 0).xy;\n'
                       '\n'
                       '    const float filterRadius = ResolveFilterDiameter / 2.0f;\n'
                       '\n'
                       '    for(int y = -1; y <= 1; ++y)\n'
                       '    {\n'
                       '        for(int x = -1; x <= 1; ++x)\n'
                       '        {\n'
                       '            vec2 sampleOffset = vec2(x, y);\n'
                       '            vec2 sampleUV = texCoord + sampleOffset / texture_input_size;\n'
                       '            sampleUV = clamp(sampleUV, 0.0, 1.0);\n'
                       '\n'
                       '            vec3 sample_color = texture(texture_input, sampleUV).xyz;\n'
                       '\n'
                       '            vec2 sampleDist = abs(sampleOffset) / (ResolveFilterDiameter / 2.0f);\n'
                       '\n'
                       '            float weight = Filter(sampleDist.x, ResolveFilterType, filterRadius, true) *\n'
                       '                           Filter(sampleDist.y, ResolveFilterType, filterRadius, true);\n'
                       '            clrMin = min(clrMin, sample_color);\n'
                       '            clrMax = max(clrMax, sample_color);\n'
                       '\n'
                       '            if(InverseLuminanceFiltering)\n'
                       '            {\n'
                       '                float sampleLum = Luminance(sample_color);\n'
                       '                if(UseExposureFiltering)\n'
                       '                {\n'
                       '                    sampleLum *= exp2(ManualExposure - ExposureScale + ExposureFilterOffset);\n'
                       '                }\n'
                       '                weight /= (1.0f + sampleLum);\n'
                       '            }\n'
                       '\n'
                       '            sum += sample_color * weight;\n'
                       '            totalWeight += weight;\n'
                       '\n'
                       '            m1 += sample_color;\n'
                       '            m2 += sample_color * sample_color;\n'
                       '            mWeight += 1.0f;\n'
                       '        }\n'
                       '    }\n'
                       '\n'
                       '    vec4 result = texture(texture_input, texCoord);\n'
                       '\n'
                       '    vec3 currColor = result.xyz;\n'
                       '    vec3 prevColor = Reproject(texCoord);\n'
                       '\n'
                       '    if(NeighborhoodClampMode == ClampModes_RGB_Clamp)\n'
                       '    {\n'
                       '        prevColor = clamp(prevColor, clrMin, clrMax);\n'
                       '    }\n'
                       '    else if(NeighborhoodClampMode == ClampModes_RGB_Clip)\n'
                       '    {\n'
                       '        prevColor = ClipAABB(clrMin, clrMax, prevColor, m1 / mWeight);\n'
                       '    }\n'
                       '    else if(NeighborhoodClampMode == ClampModes_Variance_Clip)\n'
                       '    {\n'
                       '        vec3 mu = m1 / mWeight;\n'
                       '        vec3 sigma = sqrt(abs(m2 / mWeight - mu * mu));\n'
                       '        vec3 minc = mu - VarianceClipGamma * sigma;\n'
                       '        vec3 maxc = mu + VarianceClipGamma * sigma;\n'
                       '        prevColor = ClipAABB(minc, maxc, prevColor, mu);\n'
                       '    }\n'
                       '\n'
                       '    vec3 weightA = vec3(clamp(1.0f - TemporalAABlendFactor, 0.0, 1.0));\n'
                       '    vec3 weightB = vec3(clamp(TemporalAABlendFactor, 0.0, 1.0));\n'
                       '\n'
                       '    if(UseTemporalColorWeighting)\n'
                       '    {\n'
                       '        vec3 temporalWeight = clamp(abs(clrMax - clrMin) / currColor, 0.0, 1.0);\n'
                       '        weightB = clamp(mix(vec3(LowFreqWeight), vec3(HiFreqWeight), temporalWeight), 0.0, 1.0);\n'
                       '        weightA = 1.0f - weightB;\n'
                       '    }\n'
                       '\n'
                       '    if(InverseLuminanceFiltering)\n'
                       '    {\n'
                       '        weightA /= (1.0f + Luminance(currColor));\n'
                       '        weightB /= (1.0f + Luminance(prevColor));\n'
                       '    }\n'
                       '\n'
                       '    result.xyz = (currColor * weightA + prevColor * weightB) / (weightA + weightB);\n'
                       '\n'
                       '    return result;\n'
                       '}\n'
                       '\n'
                       '\n'
                       '#ifdef FRAGMENT_SHADER\n'
                       '#endif '}

uniform int enable_blend;
uniform float brightness;
uniform vec4 emissive_color;
uniform vec4 diffuse_color;
uniform sampler2D texture_diffuse;
uniform sampler2D texture_normal;

vec4 get_emissive_color()
{
    return emissive_color;
}

vec4 get_base_color()
{
    vec4 color = texture(texture_diffuse, vs_output.texCoord.xy);
    color.xyz = color.xyz * brightness * diffuse_color.xyz * diffuse_color.a;
    return color;
}

float get_reflection()
{
    return 1.0;
}

vec3 get_edge_tint_color()
{
    return vec3(1.0, 1.0, 1.0);
}

vec3 get_sss_color()
{
    return vec3(1.0, 1.0, 1.0);
}

float get_sss_scale()
{
    return 1.0;
}

vec3 get_normal()
{
    vec3 normal = texture(texture_normal, vs_output.texCoord.xy).xyz;
    normal = normalize((vs_output.tangentToWorld * vec4(normal * 2.0 - 1.0, 0.0)).xyz);
    return normal;
}

float get_ior()
{
    return 1.0;
}

float get_roughness()
{
    return 1.0;
}

float get_metalicness()
{
    return 1.0;
}

vec3 get_world_offset()
{
    return vec3(1.0, 1.0, 1.0);
}
{'binary_data': b'\x80\x03cnumpy.core.multiarray\n_reconstruct\nq\x00cnumpy\nndarray\nq\x01K\x00\x85q\x02C\x01bq\x03\x87q\x04Rq'
                b'\x05(K\x01M\xf0\\\x85q\x06cnumpy\ndtype\nq\x07X\x02\x00\x00\x00u1q\x08K\x00K\x01\x87q\tRq\n(K\x03X'
                b'\x01\x00\x00\x00|q\x0bNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\x0cb\x89B\xf0\\\x00\x00\n\x00\x00\x00'
                b'\xcc\x9e\xb9\xdd]V\xd7w*\x04]\x99J\x14\xecw\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00`\x00\x00\x00x\x16\x00\x00'
                b'\xf0\\\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\x1a\x00\x00\x00'
                b'\x1a\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00W\x01\x00\x00\x14\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00;\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x1f\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x003\x00\x00\x00\x13\x00\x00\x00\x03\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xf0\\\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\xbfu\x85\x9369\xb6\x8d\xbfu\x85\x9369\xb6\x8d'
                b'\x16\xf4\xef\xc2&V\x00\xd7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00'
                b'\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00'
                b'\x0f\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x14\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x0f\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00'
                b'\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00@\x01\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00/\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x0f\x00\x00\x008\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00'
                b'\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00H\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x98\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00U\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x04\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\r\x00\x00\x00b\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00'
                b'\x00\x01\x00\x00\xa0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00p\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00|\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'R\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x8c\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\t\x00\x00\x00\x9b\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00'
                b'\x00\x01\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\xa5\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00'
                b'\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x90\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\xae\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\n\x00\x00\x00\xc3\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\xce\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00'
                b'\xda\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00'
                b'\x00\x01\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\xe5\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00'
                b'\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x000\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\xf3\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x04\x00\x00\x00\xf8\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00'
                b'\x02\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\xfd\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00'
                b'\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x0f\x00\x00\x00\t\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00'
                b'\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00?\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x19\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00'
                b'\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x03\x00\x00\x00\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00'\x01\x00\x00\x01\x00\x00\x00"
                b'\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00p\xd2\x16~\xdaU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x007\x01\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x02\x00\x00\x00(\xd3\x16~\xdaU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00'
                b'F\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00^\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x0f\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00?\x00\x00\x00\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\xd1\x16~\xdaU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00'
                b'\x18\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00BACKBUFFER_SIZE\x00CAMERA_POSITION\x00INV_'
                b'PROJECTION\x00INV_VIEW\x00INV_VIEW_ORIGIN\x00JITTER_DELTA\x00JITTER_FRAME\x00JITTER_OFFSET\x00LIGHT_COLOR\x00'
                b'LIGHT_DIRECTION\x00LIGHT_POSITION\x00MOUSE_POS\x00NEAR_FAR\x00PREV_VIEW_PROJECTION\x00PROJECTION\x00RENDER'
                b'_SSAO\x00RENDER_SSR\x00SHADOW_MATRIX\x00TIME\x00VIEW\x00VIEW_ORIGIN\x00VIEW_PROJECTION\x00texture_depth\x00t'
                b'exture_diffuse\x00texture_normal\x00texture_velocity\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x0f\x00\x00\x00\x0f\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P'
                b'\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00vs_in_position\x00vs_in_tex_coor'
                b'd\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00!\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x13\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00P\x8b\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b"\x00\x00 \x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x0b\x00\x00\x00'\x00\x00\x00\x01\x00\x00\x00\x00\x00"
                b'\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xffvs_output.position\x00vs_output.tex_coord\x00gl_Posi'
                b'tion\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00fs_output\x00\x0e'
                b'\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x03\x03\xff\xff\xff\xff\x00\x00\x00p\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00 '
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x01\x01'
                b'\xff\xff\xff\xff\x00\x00\x00\xb0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00,\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x02\x02\xff\xff\xff\xff\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00lightConstants\x00sceneConstants'
                b'\x00viewConstants\x00viewProjection\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffQ\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x0f\x00\x00\x00\x0f\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffP\x8b'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00vs_in_position\x00vs_in_tex_coord'
                b'\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffP\x8b\x00'
                b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00vs_output.tex_coord\x00\t\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00fs_output\x00\x00\xfc\x01\x00\x00!!NVvp5.0\nOPTION NV_'
                b'internal;\nOPTION NV_bindless_texture;\n CBUFFER buf0[] = { program.buffer[0] };\nCBUFFER buf1[] = { progra'
                b'm.buffer[1] };\nCBUFFER buf2[] = { program.buffer[2] };\nCBUFFER buf3[] = { program.buffer[3] };\nATTRIB ve'
                b'rtex_attrib[] = { vertex.attrib[0..4] };\nOUTPUT result_attrib[] = { result.attrib[0..1] };\nTEMP T;\nMOV.F'
                b' result.attrib[1].xyz, vertex.attrib[0];\nMOV.F result.position.xyz, vertex.attrib[0];\nMOV.F result.attri'
                b'b[0].xy, vertex.attrib[4];\nMOV.F result.position.w, {1, 0, 0, 0}.x;\nEND\n\x00\x00\x00\x00\x00\x00\x00\x00'
                b' \x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x1c*\x00\x00!!NVfp5.0\nOPTION NV_internal;\nOPTION NV_gpu_'
                b'program_fp64;\nOPTION NV_bindless_texture;\n PARAM c[4] = { program.local[0..3] };\nCBUFFER buf0[] = { prog'
                b'ram.buffer[0] };\nCBUFFER buf1[] = { program.buffer[1] };\nCBUFFER buf2[] = { program.buffer[2] };\nCBUFFER'
                b' buf3[] = { program.buffer[3] };\nATTRIB fragment_attrib[] = { fragment.attrib[0..0] };\nTEMP R0, R1, R2, '
                b'R3, R4, R5, R6, R7, R8, R9;\nLONG TEMP D0;\nTEMP T;\nTEMP RC, HC;\nTEMP lmem0[64];\nOUTPUT result_color0 = re'
                b'sult.color;\nMOV.F lmem0[0].xy, {-0.511962473, -0.482793808, 0, 0};\nMOV.F lmem0[1].xy, {-0.217126399, -0.'
                b'476872593, 0, 0};\nMOV.F lmem0[2].xy, {-0.755293071, -0.242650703, 0, 0};\nMOV.F lmem0[3].xy, {-0.71367651'
                b'2, -0.449661404, 0, 0};\nMOV.F lmem0[4].xy, {-0.593884885, -0.68956542, 0, 0};\nMOV.F lmem0[5].xy, {-0.314'
                b'800292, -0.704765379, 0, 0};\nMOV.F lmem0[6].xy, {-0.422149986, -0.202460706, 0, 0};\nMOV.F lmem0[7].xy, {'
                b'-0.946681619, -0.201450795, 0, 0};\nMOV.F lmem0[8].xy, {-0.840906322, -0.0346577801, 0, 0};\nMOV.F lmem0[9'
                b'].xy, {-0.651757181, -0.0747632608, 0, 0};\nMOV.F lmem0[10].xy, {-0.104182199, -0.0252121408, 0, 0};\nMOV.'
                b'F lmem0[11].xy, {-0.304271191, -0.0219543092, 0, 0};\nMOV.F lmem0[12].xy, {-0.508230686, 0.107980601, 0, '
                b'0};\nMOV.F lmem0[13].xy, {-0.0842987671, -0.231629804, 0, 0};\nMOV.F lmem0[14].xy, {-0.987912774, 0.111368'
                b'299, 0, 0};\nMOV.F lmem0[15].xy, {-0.385963589, 0.336354494, 0, 0};\nMOV.F lmem0[16].xy, {-0.192533404, 0.'
                b'178728804, 0, 0};\nMOV.F lmem0[17].xy, {0.00325618195, 0.138135001, 0, 0};\nMOV.F lmem0[18].xy, {-0.870683'
                b'73, 0.301067889, 0, 0};\nMOV.F lmem0[19].xy, {-0.698203802, 0.190432593, 0, 0};\nMOV.F lmem0[20].xy, {0.19'
                b'7504297, 0.222131699, 0, 0};\nMOV.F lmem0[21].xy, {0.1507788, 0.420416802, 0, 0};\nMOV.F lmem0[22].xy, {0.'
                b'351405591, 0.0986557901, 0, 0};\nMOV.F lmem0[23].xy, {0.155878305, -0.0846093521, 0, 0};\nMOV.F lmem0[24].'
                b'xy, {-0.0684977993, 0.446199298, 0, 0};\nMOV.F lmem0[25].xy, {0.378052205, 0.347867906, 0, 0};\nMOV.F lmem'
                b'0[26].xy, {0.395679891, -0.146917701, 0, 0};\nMOV.F lmem0[27].xy, {0.583897471, 0.105494298, 0, 0};\nMOV.F'
                b' lmem0[28].xy, {0.615510523, 0.324571609, 0, 0};\nMOV.F lmem0[29].xy, {0.392862409, -0.44176209, 0, 0};\nM'
                b'OV.F lmem0[30].xy, {0.174988404, -0.420217514, 0, 0};\nMOV.F lmem0[31].xy, {0.681372702, -0.2424808, 0, 0'
                b'};\nMOV.F lmem0[32].xy, {-0.670771122, 0.491274089, 0, 0};\nMOV.F lmem0[33].xy, {0.000513052801, -0.805833'
                b'399, 0, 0};\nMOV.F lmem0[34].xy, {0.0270301308, -0.601072788, 0, 0};\nMOV.F lmem0[35].xy, {-0.165818796, -'
                b'0.969567418, 0, 0};\nMOV.F lmem0[36].xy, {0.406059086, -0.710072577, 0, 0};\nMOV.F lmem0[37].xy, {0.771339'
                b'595, -0.471365899, 0, 0};\nMOV.F lmem0[38].xy, {0.573212028, -0.515439987, 0, 0};\nMOV.F lmem0[39].xy, {-0'
                b'.344889611, -0.904649675, 0, 0};\nMOV.F lmem0[40].xy, {0.126854405, -0.987469196, 0, 0};\nMOV.F lmem0[41].'
                b'xy, {0.741853297, -0.666736603, 0, 0};\nMOV.F lmem0[42].xy, {0.349252194, 0.592466176, 0, 0};\nMOV.F lmem0'
                b'[43].xy, {0.567989707, 0.534346521, 0, 0};\nMOV.F lmem0[44].xy, {0.566341698, 0.770869792, 0, 0};\nMOV.F l'
                b'mem0[45].xy, {0.737549722, 0.669141471, 0, 0};\nMOV.F lmem0[46].xy, {0.227199405, -0.616350174, 0, 0};\nMO'
                b'V.F lmem0[47].xy, {0.231284395, 0.872565925, 0, 0};\nMOV.F lmem0[48].xy, {0.421699286, 0.900283813, 0, 0}'
                b';\nMOV.F lmem0[49].xy, {0.426209092, -0.901328385, 0, 0};\nMOV.F lmem0[50].xy, {0.200140804, -0.808381021,'
                b' 0, 0};\nMOV.F lmem0[51].xy, {0.149394006, 0.665076315, 0, 0};\nMOV.F lmem0[52].xy, {-0.0964037627, 0.9843'
                b'73629, 0, 0};\nMOV.F lmem0[53].xy, {0.768232822, -0.0727384388, 0, 0};\nMOV.F lmem0[54].xy, {0.0414658412,'
                b' 0.831318378, 0, 0};\nMOV.F lmem0[55].xy, {0.970526576, -0.114330404, 0, 0};\nMOV.F lmem0[56].xy, {0.96700'
                b'1677, 0.129338503, 0, 0};\nMOV.F lmem0[57].xy, {0.901503682, -0.330694914, 0, 0};\nMOV.F lmem0[58].xy, {-0'
                b'.50856477, 0.753417671, 0, 0};\nMOV.F lmem0[59].xy, {0.905550122, 0.375839293, 0, 0};\nMOV.F lmem0[60].xy,'
                b' {0.759994626, 0.1809109, 0, 0};\nMOV.F lmem0[61].xy, {-0.2483695, 0.794295192, 0, 0};\nPK64.U D0.x, c[3];'
                b'\nMOV.F lmem0[62].xy, {-0.424105197, 0.558108687, 0, 0};\nTEX.F R0.x, fragment.attrib[0], handle(D0.x), 2D'
                b';\nSGE.F R0.z, R0.x, {1, 0, 0, 0}.x;\nTRUNC.U.CC HC.x, R0.z;\nMOV.F R1, {0, 0, 0, 0}.x;\nMOV.F result_color0'
                b', {0, 0, 0, 0}.x;\nMOV.F lmem0[63].xy, {-0.1020106, 0.672446787, 0, 0};\nMOV.U R0.y, {1, 0, 0, 0}.x;\nIF NE'
                b'.x;\nMOV.U R0.y, {0, 0, 0, 0}.x;\nENDIF;\nMOV.U.CC RC.x, R0.y;\nIF NE.x;\nLDC.F32X4 R2, buf1[352];\nMUL.F '
                b'R3, R0.x, R2;\nMAD.F R4, R3, {2, 0, 0, 0}.x, -R2;\nMAD.F R0.zw, fragment.attrib[0].xyxy, {2, -1, 0, 0}.x, '
                b'{2, -1, 0, 0}.y;\nLDC.F32X4 R2, buf1[336];\nMUL.F R3, R0.w, R2;\nLDC.F32X4 R2, buf1[320];\nMAD.F R2, R0.z, R'
                b'2, R3;\nADD.F R4, R2, R4;\nLDC.F32X4 R2, buf1[368];\nADD.F R2, R4, R2;\nLDC.F32X4 R3, buf1[208];\nMUL.F R4, R'
                b'2.y, R3;\nLDC.F32X4 R3, buf1[192];\nMAD.F R4, R2.x, R3, R4;\nLDC.F32X4 R3, buf1[224];\nMAD.F R4, R2.z, R3, R'
                b'4;\nLDC.F32X4 R3, buf1[240];\nMAD.F R2, R2.w, R3, R4;\nDIV.F R6.xyz, R2, R2.w;\nLDC.F32X2 R2.xy, buf1[400];\n'
                b'ADD.F R0.w, R2.y, -R2.x;\nMUL.F R2.z, R0.x, R0.w;\nMAD.F R2.z, R2, {2, 0, 0, 0}.x, -R0.w;\nADD.F R0.w, R2.y'
                b', R2.x;\nADD.F R2.z, R0.w, -R2;\nMUL.F R0.w, R2.x, R2.y;\nDP3.F R0.y, -R6, -R6;\nRSQ.F R0.y, R0.y;\nDIV.F R0.'
                b'w, R0, R2.z;\nMUL.F R7.xyz, R0.y, -R6;\nPK64.U D0.x, c[1];\nTEX.F R0.xyz, fragment.attrib[0], handle(D0.x),'
                b' 2D;\nMAD.F R0.xyz, R0, {2, -1, 0, 0}.x, {2, -1, 0, 0}.y;\nDP3.F R2.w, R0, R0;\nRSQ.F R2.x, R2.w;\nMUL.F R6.'
                b'w, R0, {0.200000003, 0, 0, 0}.x;\nMUL.F R9.xyz, R2.x, R0;\nMOV.S R7.w, {0, 0, 0, 0}.x;\nREP.S {8, 0, 0, 0};'
                b'\nI2F.S R0.y, R7.w;\nLDC.F32 R0.x, buf0[4];\nADD.F R0.x, R0, R0.y;\nTRUNC.S R0.x, R0;\nMOD.S R0.x, R0, {64, 0'
                b', 0, 0}.x;\nMOV.U R0.x, R0;\nMOV.F R0.xy, lmem0[R0.x].xyzw;\nADD.F R0.zw, fragment.attrib[0].xyxy, R0.xyxy;'
                b'\nMUL.S R2.x, R7.w, {64, 0, 0, 0};\nDIV.S R0.x, R2, {8, 0, 0, 0}.x;\nRCP.F R0.y, {0, 0, 0, 0}.x;\nMAD.F R2.x'
                b', R0.y, {2, -1, 0, 0}, {2, -1, 0, 0}.y;\nMOV.U R0.x, R0;\nMOV.F R0.xy, lmem0[R0.x].xyzw;\nMAX.F R0.y, |R0|,'
                b' {9.99999997e-07, 0, 0, 0}.x;\nRCP.F R2.x, R2.x;\nPOW.F R2.x, R0.y, R2.x;\nDP2.F R0.y, R0.zwzw, {12.9898005'
                b', 78.2330017, 0, 0};\nMUL.F R0.z, R0.x, {6.28318548, 0, 0, 0}.x;\nMAD.F R0.w, -R2.x, R2.x, {1, 0, 0, 0}.x;'
                b'\nRSQ.F R0.w, R0.w;\nCOS.F R0.x, R0.z;\nDIV.F R4.x, R0, R0.w;\nSIN.F R0.x, R0.y;\nSIN.F R0.y, R0.z;\nMUL.F'
                b' R0.x, R0, {43758.5469, 0, 0, 0};\nDIV.F R4.z, R0.y, R0.w;\nFRC.F R0.x, R0;\nSLT.F R0.y, |R9.z|, {0.9990000'
                b'13, 0, 0, 0}.x;\nTRUNC.U.CC HC.x, R0.y;\nADD.F R9.w, R0.x, {-0.5, 0, 0, 0}.x;\nMOV.F R4.y, R2.x;\nIF NE.x;\nM'
                b'OV.F R0.xyz, {0, 1, 0, 0}.xyxw;\nELSE;\nMOV.F R0.xyz, {0, 1, 0, 0}.xxyw;\nENDIF;\nMUL.F R2.xyz, R9.yzxw, R0.'
                b'zxyw;\nMAD.F R0.xyz, R9.zxyw, R0.yzxw, -R2;\nDP3.F R0.w, R0, R0;\nRSQ.F R0.w, R0.w;\nMUL.F R0.xyz, R0.w, R0;'
                b'\nMUL.F R3.xyz, R4.y, R9;\nMAD.F R3.xyz, R4.x, R0, R3;\nMUL.F R2.xyz, R9.zxyw, R0.yzxw;\nMAD.F R0.xyz, R9.yz'
                b'xw, R0.zxyw, -R2;\nMAD.F R0.xyz, R4.z, R0, R3;\nDP3.F R0.w, R0, -R7;\nMUL.F R0.xyz, R0, R0.w;\nMAD.F R2.xyz,'
                b' -R0, {2, 0, 0, 0}.x, -R7;\nLDC.F32X4 R0, buf1[144];\nMUL.F R5.xyz, R2, R6.w;\nMUL.F R2, R5.y, R0;\nMUL.F R3'
                b', R0, R6.y;\nLDC.F32X4 R0, buf1[128];\nMAD.F R4, R0, R6.x, R3;\nMAD.F R2, R5.x, R0, R2;\nLDC.F32X4 R0, buf1['
                b'160];\nMAD.F R4, R0, R6.z, R4;\nMAD.F R0, R5.z, R0, R2;\nLDC.F32X4 R3, buf1[176];\nADD.F R3, R4, R3;\nADD.F R'
                b'0, R0, R3;\nADD.F R5, R0, {0, 0, 0, 0}.x;\nLDC.F32X4 R2, buf1[272];\nMUL.F R4, R5.y, R2;\nLDC.F32X4 R0, buf1'
                b'[256];\nMUL.F R8, R3.y, R2;\nLDC.F32X4 R2, buf1[288];\nMAD.F R4, R5.x, R0, R4;\nMAD.F R8, R3.x, R0, R8;\nMAD.'
                b'F R4, R5.z, R2, R4;\nLDC.F32X4 R0, buf1[304];\nMAD.F R4, R5.w, R0, R4;\nMAD.F R5, R3.z, R2, R8;\nMAD.F R0, R'
                b'3.w, R0, R5;\nDIV.F R3.xyz, R4, R4.w;\nDIV.F R5.xyz, R0, R0.w;\nMAD.F R4.w, R5.z, {0.5, 0, 0, 0}.x, {0.5, 0'
                b', 0, 0}.x;\nMAD.F R2.xy, R6.w, R2.zwzw, {0, 0, 0, 0}.x;\nADD.F R0.zw, R0, R2.xyxy;\nADD.F R0.zw, R0, {0, 0,'
                b' 0, 0}.x;\nDIV.F R0.z, R0, R0.w;\nMOV.F R4.xy, R5;\nMOV.F R4.z, R4.w;\nMAD.F R3.z, R3, {0.5, 0, 0, 0}.x, {0.'
                b'5, 0, 0, 0}.x;\nADD.F R3.xyz, R3, -R4;\nDP2.F R0.x, R3, R3;\nRSQ.F R0.x, R0.x;\nDIV.F R3.w, {0.5, 0, 0, 0}.x'
                b', R0.x;\nMAD.F R0.xy, R5, R3.w, R3;\nADD.F R0.xy, |R0|, -R3.w;\nMAX.F R0.xy, R0, {0, 0, 0, 0}.x;\nADD.F R0.x'
                b'y, |R3|, -R0;\nRCP.F R2.z, |R3.x|;\nRCP.F R2.w, |R3.y|;\nMUL.F R0.xy, R0, R2.zwzw;\nMIN.F R0.x, R0, R0.y;\nMA'
                b'D.F R0.y, -R0.z, {0.5, 0, 0, 0}.x, R4.w;\nDIV.F R0.x, R0, R3.w;\nADD.F R0.w, R0.y, {-0.5, 0, 0, 0}.x;\nMUL.'
                b'F R0.xyz, R0.x, R3;\nMAX.F R0.w, |R0.z|, |R0|;\nMUL.F R0.xyz, R0, {0.5, 1, 0, 0}.xxyw;\nMUL.F R4.xyz, R0, {'
                b'0.125, 0, 0, 0}.x;\nMOV.F R0.z, R4.w;\nMAD.F R0.xy, R5, {0.5, 0, 0, 0}.x, {0.5, 0, 0, 0}.x;\nMUL.F R3.w, R0'
                b', {0.125, 0, 0, 0}.x;\nMAD.F R5.xyz, R4, R9.w, R0;\nMOV.F R3.xyz, {0, 1, 0, 0}.xxyw;\nMOV.F R4.w, {0, 0, 0,'
                b' 0}.x;\nREP.S {2, 0, 0, 0};\nMAD.F R2, R4.xyxy, {3, 4, 0, 0}.xxyy, R5.xyxy;\nMOV.F R0.xy, R2.zwzw;\nPK64.U D'
                b'0.x, c[3];\nMOV.F R0.z, {0, 0, 0, 0}.x;\nTXL.F R0.x, R0.xyzz, handle(D0.x), 2D;\nMOV.F R0.w, R0.x;\nMOV.F R0'
                b'.xy, R2;\nMOV.F R0.z, {0, 0, 0, 0}.x;\nTXL.F R0.x, R0.xyzz, handle(D0.x), 2D;\nMAD.F R8, R4.xyxy, {1, 2, 0,'
                b' 0}.xxyy, R5.xyxy;\nMOV.F R2.z, {0, 0, 0, 0}.x;\nMOV.F R2.xy, R8.zwzw;\nTXL.F R2.x, R2.xyzz, handle(D0.x), '
                b'2D;\nMOV.F R0.y, R2.x;\nMOV.F R0.z, R0.x;\nMOV.F R2.z, {0, 0, 0, 0}.x;\nMOV.F R2.xy, R8;\nTXL.F R0.x, R2.xyzz'
                b', handle(D0.x), 2D;\nMAD.F R2, R4.z, {1, 2, 3, 4}, R5.z;\nADD.F R0, R2, -R0;\nADD.F R2.z, R0, -R3.w;\nADD.F '
                b'R2.y, R0, -R3.w;\nADD.F R2.x, R0, -R3.w;\nSLT.F R2.y, |R2|, R3.w;\nSLT.F R2.x, |R2|, R3.w;\nSLT.F R2.z, |R2|'
                b', R3.w;\nADD.F R5.w, R0, -R3;\nSLT.F R5.w, |R5|, R3;\nTRUNC.U R2.y, R2;\nTRUNC.U R2.x, R2;\nOR.U R2.w, R2.x, '
                b'R2.y;\nTRUNC.U R2.z, R2;\nOR.U R2.w, R2.z, R2;\nTRUNC.U R5.w, R5;\nOR.U.CC HC.x, R2.w, R5.w;\nIF NE.x;\nMO'
                b'V.U.CC RC.x, R2.z;\nMOV.F R2.w, R0.z;\nMOV.F R3.x, R0.w;\nMOV.F R3.y, {3, 0, 0, 0}.x;\nIF NE.x;\nMOV.F R2.w, '
                b'R0.y;\nMOV.F R3.x, R0.z;\nMOV.F R3.y, {2, 0, 0, 0}.x;\nENDIF;\nMOV.U.CC RC.x, R2.y;\nIF NE.x;\nMOV.F R2.w,'
                b' R0.x;\nMOV.F R3.x, R0.y;\nMOV.F R3.y, {1, 0, 0, 0}.x;\nENDIF;\nMOV.U.CC RC.x, R2;\nIF NE.x;\nMOV.F R3.x, '
                b'R0;\nMOV.F R2.w, R4;\nMOV.F R3.y, {0, 0, 0, 0}.x;\nENDIF;\nADD.F R0.x, R2.w, -R3;\nDIV.F.SAT R0.x, R2.w, R0.x'
                b';\nADD.F R0.x, R3.y, R0;\nMOV.U.CC RC.x, {1, 0, 0, 0};\nMAD.F R3.xy, R4, R0.x, R5;\nMOV.F R3.z, {0.5, 0, 0, '
                b'0}.x;\nBRK (NE.x);\nENDIF;\nMAD.F R5.xyz, R4, {4, 0, 0, 0}.x, R5;\nMOV.F R4.w, R0;\nENDREP;\nSLT.F R0.x, R'
                b'3.z, {1, 0, 0, 0};\nTRUNC.U.CC HC.x, R0;\nIF NE.x;\nPK64.U D0.x, c[2];\nTEX.F R0.xy, R3, handle(D0.x), 2D;\nA'
                b'DD.F R0.xy, R3, -R0;\nMAD.F R0.zw, R0.xyxy, {2, -1, 0, 0}.x, {2, -1, 0, 0}.y;\nADD.F R0.zw, |R0|, {-0.6999'
                b'99988, 0, 0, 0}.x;\nMUL.F.SAT R0.zw, R0, {3.33333325, 0, 0, 0}.x;\nDP2.F R0.w, R0.zwzw, R0.zwzw;\nRSQ.F R0.'
                b'w, R0.w;\nRCP.F R0.w, R0.w;\nMOV.F R0.z, {0, 0, 0, 0}.x;\nPK64.U D0.x, c[0];\nTXL.F R0.xyz, R0.xyzz, handle('
                b'D0.x), 2D;\nDP3.F R2.x, R0, {0.300000012, 0.589999974, 0.109999999, 0};\nADD.F R2.x, R2, {1, 0, 0, 0};\nADD'
                b'.F.SAT R0.w, -R0, {1, 0, 0, 0}.x;\nDIV.F R0.xyz, R0, R2.x;\nADD.F R0, R1, R0;\nMOV.F R1, R0;\nMOV.F result_c'
                b'olor0, R0;\nENDIF;\nADD.S R7.w, R7, {1, 0, 0, 0}.x;\nENDREP;\nMUL.F R0, R1, {0.125, 0, 0, 0}.x;\nDP3.F R1.x, '
                b'R0, {0.300000012, 0.589999974, 0.109999999, 0};\nADD.F R1.x, -R1, {1, 0, 0, 0};\nDIV.F result_color0.xyz, '
                b'R0, R1.x;\nMOV.F result_color0.w, R0;\nENDIF;\nEND\n\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x04\x00\x00\x00 \x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x01\x00'
                b'\x02\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q\rtq\x0eb.',
 'binary_format': c_uint(36385),
 'include_files': {'Resource/Shaders/PCFKernels.glsl': '2017-12-20 01:08:59.723794',
                   'Resource/Shaders/quad.glsl': '2017-12-28 03:50:53.162797',
                   'Resource/Shaders/scene_constants.glsl': '2018-01-19 04:58:44.116801',
                   'Resource/Shaders/screen_space_raycast.glsl': '2017-12-20 01:08:59.839791',
                   'Resource/Shaders/utility.glsl': '2017-12-20 01:08:59.903789'},
 'macros': {},
 'material_components': [],
 'shader_codes': {GL_FRAGMENT_SHADER: '#version 430 core\n'
                                      '#define MATERIAL_COMPONENTS 1\n'
                                      '#define GL_FRAGMENT_SHADER 1\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "screen_space_raycast.glsl"\n'
                                      '#ifndef UUID_95e9088e_e7d5_3ed7_877a_d22bc0e41bdc\n'
                                      '#define UUID_95e9088e_e7d5_3ed7_877a_d22bc0e41bdc\n'
                                      'vec4 SampleDepthTexture(sampler2D texDepth, vec4 SampleUV0, vec4 SampleUV1)\n'
                                      '{  \n'
                                      '    vec4 SampleDepth;\n'
                                      '    SampleDepth.x = textureLod(texDepth, SampleUV0.xy, 0.0).x;\n'
                                      '    SampleDepth.y = textureLod(texDepth, SampleUV0.zw, 0.0).x;\n'
                                      '    SampleDepth.z = textureLod(texDepth, SampleUV1.xy, 0.0).x;\n'
                                      '    SampleDepth.w = textureLod(texDepth, SampleUV1.zw, 0.0).x;\n'
                                      '    return SampleDepth;\n'
                                      '}\n'
                                      ' \n'
                                      'vec4 RayCast(\n'
                                      '    sampler2D texDepthRaw,\n'
                                      '    mat4 matViewOrigin,\n'
                                      '    mat4 matProjection,\n'
                                      '    vec3 RayOriginTranslatedWorld,\n'
                                      '    vec3 RayDirection,\n'
                                      '    float Roughness,\n'
                                      '    float ConeAngleWorld,\n'
                                      '    float LinearDepth,\n'
                                      '    int NumSteps,\n'
                                      '    float StepOffset\n'
                                      ')\n'
                                      '{\n'
                                      '    \n'
                                      '    vec4 Result = vec4(0, 0, 0, 1);\n'
                                      ' \n'
                                      '    vec4 RayStartV = matViewOrigin * vec4(RayOriginTranslatedWorld, 1);\n'
                                      '    vec4 RayDirV = matViewOrigin * vec4(RayDirection * LinearDepth, 0);\n'
                                      '    vec4 RayEndV = RayStartV + RayDirV;\n'
                                      '\n'
                                      '    vec4 RayStartClip = matProjection * RayStartV;\n'
                                      '    vec4 RayEndClip = matProjection * RayEndV;\n'
                                      ' \n'
                                      '    vec3 RayStartScreen = RayStartClip.xyz / RayStartClip.w;\n'
                                      '    RayStartScreen.z = RayStartScreen.z * 0.5 + 0.5;\n'
                                      '\n'
                                      '    vec3 RayEndScreen = RayEndClip.xyz / RayEndClip.w;\n'
                                      '    RayEndScreen.z = RayEndScreen.z * 0.5 + 0.5;\n'
                                      ' \n'
                                      '    vec4 RayDepthClip = RayStartClip + matProjection * vec4(0, 0, LinearDepth, 0);\n'
                                      '    vec3 RayDepthScreen = RayDepthClip.xyz / RayDepthClip.w;\n'
                                      '    RayDepthScreen.z = RayDepthScreen.z * 0.5 + 0.5;\n'
                                      ' \n'
                                      '    vec3 RayStepScreen = RayEndScreen - RayStartScreen;\n'
                                      ' \n'
                                      '    {\n'
                                      '        \n'
                                      '        float RayStepScreenInvFactor = 0.5 * length(RayStepScreen.xy);\n'
                                      '        vec2 AbsRayStepScreen = abs(RayStepScreen.xy);\n'
                                      '        vec2 S = (AbsRayStepScreen - max(abs(RayStepScreen.xy + RayStartScreen.xy * '
                                      'RayStepScreenInvFactor) - RayStepScreenInvFactor, 0.0f)) / AbsRayStepScreen;\n'
                                      ' \n'
                                      '        \n'
                                      '        float RayStepFactor = min(S.x, S.y) / RayStepScreenInvFactor;\n'
                                      ' \n'
                                      '        RayStepScreen *= RayStepFactor;\n'
                                      '    }\n'
                                      ' \n'
                                      '    vec3 RayStartUVz = vec3(RayStartScreen.xy * 0.5 + 0.5, RayStartScreen.z);\n'
                                      '    vec3 RayStepUVz = vec3(RayStepScreen.xy * 0.5, RayStepScreen.z);\n'
                                      ' \n'
                                      '    float Step = 1.0 / NumSteps;\n'
                                      '    float CompareTolerance = max(abs(RayStepUVz.z), abs(RayStartScreen.z - '
                                      'RayDepthScreen.z)) * Step;\n'
                                      '    \n'
                                      ' \n'
                                      '    float LastDiff = 0;\n'
                                      ' \n'
                                      '    RayStepUVz *= Step;\n'
                                      '    vec3 RayUVz = RayStartUVz + RayStepUVz * StepOffset;\n'
                                      '\n'
                                      '    for (int i = 0; i < NumSteps; i += 4)\n'
                                      '    {\n'
                                      '        \n'
                                      '        vec4 SampleUV0 = RayUVz.xyxy + RayStepUVz.xyxy * vec4(1, 1, 2, 2);\n'
                                      '        vec4 SampleUV1 = RayUVz.xyxy + RayStepUVz.xyxy * vec4(3, 3, 4, 4);\n'
                                      '        vec4 SampleZ = RayUVz.zzzz + RayStepUVz.zzzz * vec4(1, 2, 3, 4);\n'
                                      ' \n'
                                      '        \n'
                                      '        vec4 SampleDepth = SampleDepthTexture(texDepthRaw, SampleUV0, SampleUV1);\n'
                                      '\n'
                                      '        vec4 DepthDiff = SampleZ - SampleDepth;\n'
                                      ' \n'
                                      '        bvec4 Hit = bvec4(\n'
                                      '            abs(DepthDiff[0] - CompareTolerance) < CompareTolerance,\n'
                                      '            abs(DepthDiff[1] - CompareTolerance) < CompareTolerance,\n'
                                      '            abs(DepthDiff[2] - CompareTolerance) < CompareTolerance,\n'
                                      '            abs(DepthDiff[3] - CompareTolerance) < CompareTolerance\n'
                                      '        );\n'
                                      ' \n'
                                      '        \n'
                                      '        if (Hit[0] || Hit[1] || Hit[2] || Hit[3])\n'
                                      '        {\n'
                                      '            float DepthDiff0 = DepthDiff[2];\n'
                                      '            float DepthDiff1 = DepthDiff[3];\n'
                                      '            float MinTime = 3;\n'
                                      ' \n'
                                      '            if (Hit[2])\n'
                                      '            {\n'
                                      '                DepthDiff0 = DepthDiff[1];\n'
                                      '                DepthDiff1 = DepthDiff[2];\n'
                                      '                MinTime = 2;\n'
                                      '            }\n'
                                      '\n'
                                      '            if (Hit[1])\n'
                                      '            {\n'
                                      '                DepthDiff0 = DepthDiff[0];\n'
                                      '                DepthDiff1 = DepthDiff[1];\n'
                                      '                MinTime = 1;\n'
                                      '            }\n'
                                      '\n'
                                      '            if (Hit[0])\n'
                                      '            {\n'
                                      '                DepthDiff0 = LastDiff;\n'
                                      '                DepthDiff1 = DepthDiff[0];\n'
                                      '                MinTime = 0;\n'
                                      '            }\n'
                                      ' \n'
                                      '            \n'
                                      '            float TimeLerp = clamp(DepthDiff0 / (DepthDiff0 - DepthDiff1), 0.0, 1.0);\n'
                                      '            float IntersectTime = MinTime + TimeLerp;\n'
                                      '            vec3 HitUVz = RayUVz + RayStepUVz * IntersectTime;\n'
                                      ' \n'
                                      '            Result = vec4(HitUVz, 0.5);\n'
                                      '            break;\n'
                                      '        }\n'
                                      ' \n'
                                      '        LastDiff = DepthDiff.w;\n'
                                      '        RayUVz += 4 * RayStepUVz;\n'
                                      '    }\n'
                                      '\n'
                                      '    return Result;\n'
                                      '}\n'
                                      '#endif /* UUID_95e9088e_e7d5_3ed7_877a_d22bc0e41bdc */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "PCFKernels.glsl"\n'
                                      '#ifndef UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                      '#define UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'const int PoissonSampleCount = 64;\n'
                                      '\n'
                                      '\n'
                                      'const vec2 PoissonSamples[PoissonSampleCount] =\n'
                                      '{\n'
                                      '    vec2(-0.5119625f, -0.4827938f),\n'
                                      '    vec2(-0.2171264f, -0.4768726f),\n'
                                      '    vec2(-0.7552931f, -0.2426507f),\n'
                                      '    vec2(-0.7136765f, -0.4496614f),\n'
                                      '    vec2(-0.5938849f, -0.6895654f),\n'
                                      '    vec2(-0.3148003f, -0.7047654f),\n'
                                      '    vec2(-0.42215f, -0.2024607f),\n'
                                      '    vec2(-0.9466816f, -0.2014508f),\n'
                                      '    vec2(-0.8409063f, -0.03465778f),\n'
                                      '    vec2(-0.6517572f, -0.07476326f),\n'
                                      '    vec2(-0.1041822f, -0.02521214f),\n'
                                      '    vec2(-0.3042712f, -0.02195431f),\n'
                                      '    vec2(-0.5082307f, 0.1079806f),\n'
                                      '    vec2(-0.08429877f, -0.2316298f),\n'
                                      '    vec2(-0.9879128f, 0.1113683f),\n'
                                      '    vec2(-0.3859636f, 0.3363545f),\n'
                                      '    vec2(-0.1925334f, 0.1787288f),\n'
                                      '    vec2(0.003256182f, 0.138135f),\n'
                                      '    vec2(-0.8706837f, 0.3010679f),\n'
                                      '    vec2(-0.6982038f, 0.1904326f),\n'
                                      '    vec2(0.1975043f, 0.2221317f),\n'
                                      '    vec2(0.1507788f, 0.4204168f),\n'
                                      '    vec2(0.3514056f, 0.09865579f),\n'
                                      '    vec2(0.1558783f, -0.08460935f),\n'
                                      '    vec2(-0.0684978f, 0.4461993f),\n'
                                      '    vec2(0.3780522f, 0.3478679f),\n'
                                      '    vec2(0.3956799f, -0.1469177f),\n'
                                      '    vec2(0.5838975f, 0.1054943f),\n'
                                      '    vec2(0.6155105f, 0.3245716f),\n'
                                      '    vec2(0.3928624f, -0.4417621f),\n'
                                      '    vec2(0.1749884f, -0.4202175f),\n'
                                      '    vec2(0.6813727f, -0.2424808f),\n'
                                      '    vec2(-0.6707711f, 0.4912741f),\n'
                                      '    vec2(0.0005130528f, -0.8058334f),\n'
                                      '    vec2(0.02703013f, -0.6010728f),\n'
                                      '    vec2(-0.1658188f, -0.9695674f),\n'
                                      '    vec2(0.4060591f, -0.7100726f),\n'
                                      '    vec2(0.7713396f, -0.4713659f),\n'
                                      '    vec2(0.573212f, -0.51544f),\n'
                                      '    vec2(-0.3448896f, -0.9046497f),\n'
                                      '    vec2(0.1268544f, -0.9874692f),\n'
                                      '    vec2(0.7418533f, -0.6667366f),\n'
                                      '    vec2(0.3492522f, 0.5924662f),\n'
                                      '    vec2(0.5679897f, 0.5343465f),\n'
                                      '    vec2(0.5663417f, 0.7708698f),\n'
                                      '    vec2(0.7375497f, 0.6691415f),\n'
                                      '    vec2(0.2271994f, -0.6163502f),\n'
                                      '    vec2(0.2312844f, 0.8725659f),\n'
                                      '    vec2(0.4216993f, 0.9002838f),\n'
                                      '    vec2(0.4262091f, -0.9013284f),\n'
                                      '    vec2(0.2001408f, -0.808381f),\n'
                                      '    vec2(0.149394f, 0.6650763f),\n'
                                      '    vec2(-0.09640376f, 0.9843736f),\n'
                                      '    vec2(0.7682328f, -0.07273844f),\n'
                                      '    vec2(0.04146584f, 0.8313184f),\n'
                                      '    vec2(0.9705266f, -0.1143304f),\n'
                                      '    vec2(0.9670017f, 0.1293385f),\n'
                                      '    vec2(0.9015037f, -0.3306949f),\n'
                                      '    vec2(-0.5085648f, 0.7534177f),\n'
                                      '    vec2(0.9055501f, 0.3758393f),\n'
                                      '    vec2(0.7599946f, 0.1809109f),\n'
                                      '    vec2(-0.2483695f, 0.7942952f),\n'
                                      '    vec2(-0.4241052f, 0.5581087f),\n'
                                      '    vec2(-0.1020106f, 0.6724468f),\n'
                                      '};\n'
                                      '#endif /* UUID_771b849e_fec4_3936_8f65_94ea74cfac5c */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "utility.glsl"\n'
                                      '#ifndef UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                      '#define UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      'layout(std140, binding=0) uniform sceneConstants\n'
                                      '{\n'
                                      '    float TIME;\n'
                                      '    float JITTER_FRAME;\n'
                                      '    float RENDER_SSR;\n'
                                      '    float RENDER_SSAO;\n'
                                      '    vec2 BACKBUFFER_SIZE;\n'
                                      '    vec2 MOUSE_POS;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=1) uniform viewConstants\n'
                                      '{\n'
                                      '    mat4 VIEW;\n'
                                      '    mat4 INV_VIEW;\n'
                                      '    mat4 VIEW_ORIGIN;\n'
                                      '    mat4 INV_VIEW_ORIGIN;\n'
                                      '    mat4 PROJECTION;\n'
                                      '    mat4 INV_PROJECTION;\n'
                                      '    vec4 CAMERA_POSITION;\n'
                                      '    vec2 NEAR_FAR;\n'
                                      '    vec2 JITTER_DELTA;\n'
                                      '    vec2 JITTER_OFFSET;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=2) uniform viewProjection\n'
                                      '{\n'
                                      '    mat4 VIEW_PROJECTION;\n'
                                      '    mat4 PREV_VIEW_PROJECTION;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=3) uniform lightConstants\n'
                                      '{\n'
                                      '    vec4 LIGHT_POSITION;\n'
                                      '    vec4 LIGHT_DIRECTION;\n'
                                      '    vec4 LIGHT_COLOR;\n'
                                      '    mat4 SHADOW_MATRIX;\n'
                                      '};\n'
                                      '\n'
                                      'const int MAX_BONES_PER_VERTEX = 4;\n'
                                      'const int MAX_BONES = 100;\n'
                                      'const float SHADOW_BIAS = -0.0001;\n'
                                      '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                      '\n'
                                      '\n'
                                      'float get_luminance(vec3 color)\n'
                                      '{\n'
                                      '    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n'
                                      '}\n'
                                      '\n'
                                      'float get_linear_luminance(vec3 LinearColor)\n'
                                      '{\n'
                                      '    return dot(LinearColor, vec3(0.3, 0.59, 0.11));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float depth_to_linear_depth(float depth)\n'
                                      '{\n'
                                      '    const float zNear = NEAR_FAR.x;\n'
                                      '    const float zFar = NEAR_FAR.y;\n'
                                      '    \n'
                                      '    depth = depth * 2.0 - 1.0;\n'
                                      '    \n'
                                      '    return 2.0 * zNear * zFar / (zFar + zNear - depth * (zFar - zNear));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float linear_depth_to_depth(float linear_depth)\n'
                                      '{\n'
                                      '    const float zNear = NEAR_FAR.x;\n'
                                      '    const float zFar = NEAR_FAR.y;\n'
                                      '    \n'
                                      '    float depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                      '    \n'
                                      '    return depth * 0.5 + 0.5;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 depth_to_relative_world(vec2 tex_coord, float depth)\n'
                                      '{\n'
                                      '    vec4 clip_coord = vec4(tex_coord * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                      '    vec4 relative_pos = INV_VIEW_ORIGIN * INV_PROJECTION * clip_coord;\n'
                                      '    relative_pos /= relative_pos.w;\n'
                                      '    return relative_pos;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 linear_depth_to_relative_world(vec2 tex_coord, float linear_depth)\n'
                                      '{\n'
                                      '    \n'
                                      '    float depth = linear_depth_to_depth(linear_depth);\n'
                                      '\n'
                                      '    \n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    return depth_to_relative_world(tex_coord, depth);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'float PseudoRandom(vec2 xy)\n'
                                      '{\n'
                                      '    vec2 pos = fract(xy / 128.0f) * 128.0f + vec2(-64.340622f, -72.465622f);\n'
                                      '\n'
                                      '    \n'
                                      '    return fract(dot(pos.xyx * pos.xyy, vec3(20.390625f, 60.703125f, 2.4281209f)));\n'
                                      '}\n'
                                      '\n'
                                      'float rand(vec2 co){\n'
                                      '    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n'
                                      '}\n'
                                      '\n'
                                      'float rand2(vec4 seed4){\n'
                                      '    float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));\n'
                                      '    return fract(sin(dot_product) * 43758.5453);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 invert_y(vec3 vector)\n'
                                      '{\n'
                                      '    return vec3(vector.x, -vector.y, vector.z);\n'
                                      '}\n'
                                      '#endif /* UUID_e77aaefb_1a04_384d_928f_4a7739be43fb */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                      '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "quad.glsl"\n'
                                      '#ifndef UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                                      '#define UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                                      'struct VERTEX_OUTPUT\n'
                                      '{\n'
                                      '    vec2 tex_coord;\n'
                                      '    vec3 position;\n'
                                      '};\n'
                                      '\n'
                                      '#ifdef GL_VERTEX_SHADER\n'
                                      '#endif \n'
                                      '#endif /* UUID_09be6e6c_9934_3777_a020_c1b0299d186d */\n'
                                      '\n'
                                      'uniform sampler2D texture_diffuse;\n'
                                      'uniform sampler2D texture_normal;\n'
                                      'uniform sampler2D texture_velocity;\n'
                                      'uniform sampler2D texture_depth;\n'
                                      '\n'
                                      'uint ReverseBits32( uint bits )\n'
                                      '{\n'
                                      '    bits = ( bits << 16) | ( bits >> 16);\n'
                                      '\tbits = ( (bits & 0x00ff00ff) << 8 ) | ( (bits & 0xff00ff00) >> 8 );\n'
                                      '\tbits = ( (bits & 0x0f0f0f0f) << 4 ) | ( (bits & 0xf0f0f0f0) >> 4 );\n'
                                      '\tbits = ( (bits & 0x33333333) << 2 ) | ( (bits & 0xcccccccc) >> 2 );\n'
                                      '\tbits = ( (bits & 0x55555555) << 1 ) | ( (bits & 0xaaaaaaaa) >> 1 );\n'
                                      '\treturn bits;\n'
                                      '}\n'
                                      '\n'
                                      'vec2 Hammersley( uint Index, uint NumSamples, uvec2 Random )\n'
                                      '{\n'
                                      '\tfloat E1 = fract( float(Index) / NumSamples + float( Random.x & 0xffff ) / (1<<16) '
                                      ');\n'
                                      '\tfloat E2 = float( ReverseBits32(Index) ^ Random.y ) * 2.3283064365386963e-10;\n'
                                      '\treturn vec2( E1, E2 );\n'
                                      '}\n'
                                      '\n'
                                      'float ClampedPow(float X, float Y)\n'
                                      '{\n'
                                      '    return pow(max(abs(X), 0.000001f), Y);\n'
                                      '}\n'
                                      '\n'
                                      'vec4 ImportanceSampleBlinn(vec2 E, float Roughness)\n'
                                      '{\n'
                                      '    float PI = 3.14159265f;\n'
                                      '    float m = Roughness * Roughness;\n'
                                      '    float n = 2 / (m*m) - 2;\n'
                                      '\n'
                                      '    float Phi = 2 * PI * E.x;\n'
                                      '    float CosTheta = ClampedPow(E.y, 1 / (n + 1));\n'
                                      '    float SinTheta = sqrt(1 - CosTheta * CosTheta);\n'
                                      '\n'
                                      '    vec3 H;\n'
                                      '    H.x = SinTheta * cos(Phi);\n'
                                      '    \n'
                                      '    H.y = CosTheta;\n'
                                      '    H.z = SinTheta * sin(Phi);\n'
                                      '\n'
                                      '    float D = (n + 2) / (2 * PI) * ClampedPow(CosTheta, n);\n'
                                      '    float PDF = D * CosTheta;\n'
                                      '\n'
                                      '    return vec4(H, PDF);\n'
                                      '}\n'
                                      '\n'
                                      'mat3 GetTangentBasis(vec3 TangentY)\n'
                                      '{\n'
                                      '    vec3 UpVector = abs(TangentY.z) < 0.999 ? vec3(0, 1, 0) : vec3(0, 0, 1);\n'
                                      '    vec3 TangentX = normalize(cross(UpVector, TangentY));\n'
                                      '    vec3 TangentZ = cross(TangentY, TangentX);\n'
                                      '    return mat3(TangentX, TangentY, TangentZ);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 TangentToWorld(vec3 vector, vec3 TangentY)\n'
                                      '{\n'
                                      '    return GetTangentBasis(TangentY) * vector;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 SampleScreenColor(sampler2D texPrevSceneColor, vec2 UV)\n'
                                      '{\n'
                                      '    vec4 OutColor;\n'
                                      '    OutColor.xyz = textureLod(texPrevSceneColor, UV, 0.0).xyz;\n'
                                      '    OutColor.w = 1;\n'
                                      '\n'
                                      '    \n'
                                      '    vec2 ScreenPos = UV * 2.0 - 1.0;\n'
                                      '\n'
                                      '    \n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    \n'
                                      '    float sharpen = 0.7f;\n'
                                      '    vec2 Vignette = clamp((abs(ScreenPos) - sharpen) / (1.0 - sharpen), 0.0, 1.0);\n'
                                      '    OutColor.w *= clamp(1.0 - length(Vignette), 0.0, 1.0);\n'
                                      '\n'
                                      '    return OutColor;\n'
                                      '}\n'
                                      '\n'
                                      '#ifdef GL_FRAGMENT_SHADER\n'
                                      'in VERTEX_OUTPUT vs_output;\n'
                                      'out vec4 fs_output;\n'
                                      '\n'
                                      'void main() {\n'
                                      '    fs_output = vec4(0.0);\n'
                                      '    vec2 tex_coord = vs_output.tex_coord.xy;\n'
                                      '    float depth = texture(texture_depth, tex_coord).x;\n'
                                      '\n'
                                      '    if(depth >= 1.0)\n'
                                      '    {\n'
                                      '        return;\n'
                                      '    }\n'
                                      '\n'
                                      '    ivec2 PixelPos = ivec2(gl_FragCoord.xy);\n'
                                      '    float linear_depth = depth_to_linear_depth(depth) * 0.1;\n'
                                      '\n'
                                      '    vec4 ndc_coord = vec4(vs_output.tex_coord.xy * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                      '    vec4 relative_pos = INV_VIEW_ORIGIN * INV_PROJECTION * ndc_coord;\n'
                                      '    relative_pos.xyz /= relative_pos.w;\n'
                                      '\n'
                                      '    vec3 V = normalize(-relative_pos.xyz);\n'
                                      '    vec3 N = normalize(texture(texture_normal, vs_output.tex_coord.xy).xyz * 2.0 - '
                                      '1.0);\n'
                                      '\n'
                                      '\n'
                                      '    float Roughness = 0.0;\n'
                                      '    float RoughnessFade = 1.0;\n'
                                      '\n'
                                      '    const int NumSteps = 8;\n'
                                      '    const int NumRays = 8;\n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    vec2 HitSampleUV = vec2(-1.0, -1.0);\n'
                                      '\n'
                                      '    for (int i = 0; i < NumRays; i++)\n'
                                      '    {\n'
                                      '        vec2 poisson =  PoissonSamples[int(JITTER_FRAME + i) % PoissonSampleCount];\n'
                                      '        float StepOffset = rand(tex_coord + poisson) - 0.5;\n'
                                      '\n'
                                      '        vec2 E = Hammersley( i, NumRays, uvec2(poisson * 117) );\n'
                                      '        vec3 H = TangentToWorld(ImportanceSampleBlinn( PoissonSamples[i * '
                                      'PoissonSampleCount / NumRays], Roughness ).xyz, N);\n'
                                      '        vec3 R = reflect(-V, H);\n'
                                      '\n'
                                      '        vec4 HitUVzTime = RayCast(\n'
                                      '            texture_depth,\n'
                                      '            VIEW_ORIGIN,\n'
                                      '            PROJECTION,\n'
                                      '            relative_pos.xyz,\n'
                                      '            R,\n'
                                      '            Roughness,\n'
                                      '            0.001,\n'
                                      '            linear_depth,\n'
                                      '            NumSteps,\n'
                                      '            StepOffset\n'
                                      '        );\n'
                                      '\n'
                                      '        \n'
                                      '        if (HitUVzTime.w < 1)\n'
                                      '        {\n'
                                      '            HitSampleUV = HitUVzTime.xy - texture(texture_velocity, HitUVzTime.xy).xy;\n'
                                      '            vec4 SampleColor = SampleScreenColor(texture_diffuse, HitSampleUV);\n'
                                      '            SampleColor.rgb /= 1 + get_linear_luminance(SampleColor.rgb);\n'
                                      '            fs_output += SampleColor;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    fs_output /= NumRays;\n'
                                      '    fs_output.rgb /= 1 - get_linear_luminance(fs_output.rgb);\n'
                                      '\n'
                                      '    fs_output.w *= RoughnessFade;\n'
                                      '}\n'
                                      '\n'
                                      '#endif ',
                  GL_VERTEX_SHADER: '#version 430 core\n'
                                    '#define MATERIAL_COMPONENTS 1\n'
                                    '#define GL_VERTEX_SHADER 1\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "screen_space_raycast.glsl"\n'
                                    '#ifndef UUID_95e9088e_e7d5_3ed7_877a_d22bc0e41bdc\n'
                                    '#define UUID_95e9088e_e7d5_3ed7_877a_d22bc0e41bdc\n'
                                    'vec4 SampleDepthTexture(sampler2D texDepth, vec4 SampleUV0, vec4 SampleUV1)\n'
                                    '{  \n'
                                    '    vec4 SampleDepth;\n'
                                    '    SampleDepth.x = textureLod(texDepth, SampleUV0.xy, 0.0).x;\n'
                                    '    SampleDepth.y = textureLod(texDepth, SampleUV0.zw, 0.0).x;\n'
                                    '    SampleDepth.z = textureLod(texDepth, SampleUV1.xy, 0.0).x;\n'
                                    '    SampleDepth.w = textureLod(texDepth, SampleUV1.zw, 0.0).x;\n'
                                    '    return SampleDepth;\n'
                                    '}\n'
                                    ' \n'
                                    'vec4 RayCast(\n'
                                    '    sampler2D texDepthRaw,\n'
                                    '    mat4 matViewOrigin,\n'
                                    '    mat4 matProjection,\n'
                                    '    vec3 RayOriginTranslatedWorld,\n'
                                    '    vec3 RayDirection,\n'
                                    '    float Roughness,\n'
                                    '    float ConeAngleWorld,\n'
                                    '    float LinearDepth,\n'
                                    '    int NumSteps,\n'
                                    '    float StepOffset\n'
                                    ')\n'
                                    '{\n'
                                    '    \n'
                                    '    vec4 Result = vec4(0, 0, 0, 1);\n'
                                    ' \n'
                                    '    vec4 RayStartV = matViewOrigin * vec4(RayOriginTranslatedWorld, 1);\n'
                                    '    vec4 RayDirV = matViewOrigin * vec4(RayDirection * LinearDepth, 0);\n'
                                    '    vec4 RayEndV = RayStartV + RayDirV;\n'
                                    '\n'
                                    '    vec4 RayStartClip = matProjection * RayStartV;\n'
                                    '    vec4 RayEndClip = matProjection * RayEndV;\n'
                                    ' \n'
                                    '    vec3 RayStartScreen = RayStartClip.xyz / RayStartClip.w;\n'
                                    '    RayStartScreen.z = RayStartScreen.z * 0.5 + 0.5;\n'
                                    '\n'
                                    '    vec3 RayEndScreen = RayEndClip.xyz / RayEndClip.w;\n'
                                    '    RayEndScreen.z = RayEndScreen.z * 0.5 + 0.5;\n'
                                    ' \n'
                                    '    vec4 RayDepthClip = RayStartClip + matProjection * vec4(0, 0, LinearDepth, 0);\n'
                                    '    vec3 RayDepthScreen = RayDepthClip.xyz / RayDepthClip.w;\n'
                                    '    RayDepthScreen.z = RayDepthScreen.z * 0.5 + 0.5;\n'
                                    ' \n'
                                    '    vec3 RayStepScreen = RayEndScreen - RayStartScreen;\n'
                                    ' \n'
                                    '    {\n'
                                    '        \n'
                                    '        float RayStepScreenInvFactor = 0.5 * length(RayStepScreen.xy);\n'
                                    '        vec2 AbsRayStepScreen = abs(RayStepScreen.xy);\n'
                                    '        vec2 S = (AbsRayStepScreen - max(abs(RayStepScreen.xy + RayStartScreen.xy * '
                                    'RayStepScreenInvFactor) - RayStepScreenInvFactor, 0.0f)) / AbsRayStepScreen;\n'
                                    ' \n'
                                    '        \n'
                                    '        float RayStepFactor = min(S.x, S.y) / RayStepScreenInvFactor;\n'
                                    ' \n'
                                    '        RayStepScreen *= RayStepFactor;\n'
                                    '    }\n'
                                    ' \n'
                                    '    vec3 RayStartUVz = vec3(RayStartScreen.xy * 0.5 + 0.5, RayStartScreen.z);\n'
                                    '    vec3 RayStepUVz = vec3(RayStepScreen.xy * 0.5, RayStepScreen.z);\n'
                                    ' \n'
                                    '    float Step = 1.0 / NumSteps;\n'
                                    '    float CompareTolerance = max(abs(RayStepUVz.z), abs(RayStartScreen.z - '
                                    'RayDepthScreen.z)) * Step;\n'
                                    '    \n'
                                    ' \n'
                                    '    float LastDiff = 0;\n'
                                    ' \n'
                                    '    RayStepUVz *= Step;\n'
                                    '    vec3 RayUVz = RayStartUVz + RayStepUVz * StepOffset;\n'
                                    '\n'
                                    '    for (int i = 0; i < NumSteps; i += 4)\n'
                                    '    {\n'
                                    '        \n'
                                    '        vec4 SampleUV0 = RayUVz.xyxy + RayStepUVz.xyxy * vec4(1, 1, 2, 2);\n'
                                    '        vec4 SampleUV1 = RayUVz.xyxy + RayStepUVz.xyxy * vec4(3, 3, 4, 4);\n'
                                    '        vec4 SampleZ = RayUVz.zzzz + RayStepUVz.zzzz * vec4(1, 2, 3, 4);\n'
                                    ' \n'
                                    '        \n'
                                    '        vec4 SampleDepth = SampleDepthTexture(texDepthRaw, SampleUV0, SampleUV1);\n'
                                    '\n'
                                    '        vec4 DepthDiff = SampleZ - SampleDepth;\n'
                                    ' \n'
                                    '        bvec4 Hit = bvec4(\n'
                                    '            abs(DepthDiff[0] - CompareTolerance) < CompareTolerance,\n'
                                    '            abs(DepthDiff[1] - CompareTolerance) < CompareTolerance,\n'
                                    '            abs(DepthDiff[2] - CompareTolerance) < CompareTolerance,\n'
                                    '            abs(DepthDiff[3] - CompareTolerance) < CompareTolerance\n'
                                    '        );\n'
                                    ' \n'
                                    '        \n'
                                    '        if (Hit[0] || Hit[1] || Hit[2] || Hit[3])\n'
                                    '        {\n'
                                    '            float DepthDiff0 = DepthDiff[2];\n'
                                    '            float DepthDiff1 = DepthDiff[3];\n'
                                    '            float MinTime = 3;\n'
                                    ' \n'
                                    '            if (Hit[2])\n'
                                    '            {\n'
                                    '                DepthDiff0 = DepthDiff[1];\n'
                                    '                DepthDiff1 = DepthDiff[2];\n'
                                    '                MinTime = 2;\n'
                                    '            }\n'
                                    '\n'
                                    '            if (Hit[1])\n'
                                    '            {\n'
                                    '                DepthDiff0 = DepthDiff[0];\n'
                                    '                DepthDiff1 = DepthDiff[1];\n'
                                    '                MinTime = 1;\n'
                                    '            }\n'
                                    '\n'
                                    '            if (Hit[0])\n'
                                    '            {\n'
                                    '                DepthDiff0 = LastDiff;\n'
                                    '                DepthDiff1 = DepthDiff[0];\n'
                                    '                MinTime = 0;\n'
                                    '            }\n'
                                    ' \n'
                                    '            \n'
                                    '            float TimeLerp = clamp(DepthDiff0 / (DepthDiff0 - DepthDiff1), 0.0, 1.0);\n'
                                    '            float IntersectTime = MinTime + TimeLerp;\n'
                                    '            vec3 HitUVz = RayUVz + RayStepUVz * IntersectTime;\n'
                                    ' \n'
                                    '            Result = vec4(HitUVz, 0.5);\n'
                                    '            break;\n'
                                    '        }\n'
                                    ' \n'
                                    '        LastDiff = DepthDiff.w;\n'
                                    '        RayUVz += 4 * RayStepUVz;\n'
                                    '    }\n'
                                    '\n'
                                    '    return Result;\n'
                                    '}\n'
                                    '#endif /* UUID_95e9088e_e7d5_3ed7_877a_d22bc0e41bdc */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "PCFKernels.glsl"\n'
                                    '#ifndef UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                    '#define UUID_771b849e_fec4_3936_8f65_94ea74cfac5c\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'const int PoissonSampleCount = 64;\n'
                                    '\n'
                                    '\n'
                                    'const vec2 PoissonSamples[PoissonSampleCount] =\n'
                                    '{\n'
                                    '    vec2(-0.5119625f, -0.4827938f),\n'
                                    '    vec2(-0.2171264f, -0.4768726f),\n'
                                    '    vec2(-0.7552931f, -0.2426507f),\n'
                                    '    vec2(-0.7136765f, -0.4496614f),\n'
                                    '    vec2(-0.5938849f, -0.6895654f),\n'
                                    '    vec2(-0.3148003f, -0.7047654f),\n'
                                    '    vec2(-0.42215f, -0.2024607f),\n'
                                    '    vec2(-0.9466816f, -0.2014508f),\n'
                                    '    vec2(-0.8409063f, -0.03465778f),\n'
                                    '    vec2(-0.6517572f, -0.07476326f),\n'
                                    '    vec2(-0.1041822f, -0.02521214f),\n'
                                    '    vec2(-0.3042712f, -0.02195431f),\n'
                                    '    vec2(-0.5082307f, 0.1079806f),\n'
                                    '    vec2(-0.08429877f, -0.2316298f),\n'
                                    '    vec2(-0.9879128f, 0.1113683f),\n'
                                    '    vec2(-0.3859636f, 0.3363545f),\n'
                                    '    vec2(-0.1925334f, 0.1787288f),\n'
                                    '    vec2(0.003256182f, 0.138135f),\n'
                                    '    vec2(-0.8706837f, 0.3010679f),\n'
                                    '    vec2(-0.6982038f, 0.1904326f),\n'
                                    '    vec2(0.1975043f, 0.2221317f),\n'
                                    '    vec2(0.1507788f, 0.4204168f),\n'
                                    '    vec2(0.3514056f, 0.09865579f),\n'
                                    '    vec2(0.1558783f, -0.08460935f),\n'
                                    '    vec2(-0.0684978f, 0.4461993f),\n'
                                    '    vec2(0.3780522f, 0.3478679f),\n'
                                    '    vec2(0.3956799f, -0.1469177f),\n'
                                    '    vec2(0.5838975f, 0.1054943f),\n'
                                    '    vec2(0.6155105f, 0.3245716f),\n'
                                    '    vec2(0.3928624f, -0.4417621f),\n'
                                    '    vec2(0.1749884f, -0.4202175f),\n'
                                    '    vec2(0.6813727f, -0.2424808f),\n'
                                    '    vec2(-0.6707711f, 0.4912741f),\n'
                                    '    vec2(0.0005130528f, -0.8058334f),\n'
                                    '    vec2(0.02703013f, -0.6010728f),\n'
                                    '    vec2(-0.1658188f, -0.9695674f),\n'
                                    '    vec2(0.4060591f, -0.7100726f),\n'
                                    '    vec2(0.7713396f, -0.4713659f),\n'
                                    '    vec2(0.573212f, -0.51544f),\n'
                                    '    vec2(-0.3448896f, -0.9046497f),\n'
                                    '    vec2(0.1268544f, -0.9874692f),\n'
                                    '    vec2(0.7418533f, -0.6667366f),\n'
                                    '    vec2(0.3492522f, 0.5924662f),\n'
                                    '    vec2(0.5679897f, 0.5343465f),\n'
                                    '    vec2(0.5663417f, 0.7708698f),\n'
                                    '    vec2(0.7375497f, 0.6691415f),\n'
                                    '    vec2(0.2271994f, -0.6163502f),\n'
                                    '    vec2(0.2312844f, 0.8725659f),\n'
                                    '    vec2(0.4216993f, 0.9002838f),\n'
                                    '    vec2(0.4262091f, -0.9013284f),\n'
                                    '    vec2(0.2001408f, -0.808381f),\n'
                                    '    vec2(0.149394f, 0.6650763f),\n'
                                    '    vec2(-0.09640376f, 0.9843736f),\n'
                                    '    vec2(0.7682328f, -0.07273844f),\n'
                                    '    vec2(0.04146584f, 0.8313184f),\n'
                                    '    vec2(0.9705266f, -0.1143304f),\n'
                                    '    vec2(0.9670017f, 0.1293385f),\n'
                                    '    vec2(0.9015037f, -0.3306949f),\n'
                                    '    vec2(-0.5085648f, 0.7534177f),\n'
                                    '    vec2(0.9055501f, 0.3758393f),\n'
                                    '    vec2(0.7599946f, 0.1809109f),\n'
                                    '    vec2(-0.2483695f, 0.7942952f),\n'
                                    '    vec2(-0.4241052f, 0.5581087f),\n'
                                    '    vec2(-0.1020106f, 0.6724468f),\n'
                                    '};\n'
                                    '#endif /* UUID_771b849e_fec4_3936_8f65_94ea74cfac5c */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "utility.glsl"\n'
                                    '#ifndef UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                    '#define UUID_e77aaefb_1a04_384d_928f_4a7739be43fb\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    'layout(std140, binding=0) uniform sceneConstants\n'
                                    '{\n'
                                    '    float TIME;\n'
                                    '    float JITTER_FRAME;\n'
                                    '    float RENDER_SSR;\n'
                                    '    float RENDER_SSAO;\n'
                                    '    vec2 BACKBUFFER_SIZE;\n'
                                    '    vec2 MOUSE_POS;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=1) uniform viewConstants\n'
                                    '{\n'
                                    '    mat4 VIEW;\n'
                                    '    mat4 INV_VIEW;\n'
                                    '    mat4 VIEW_ORIGIN;\n'
                                    '    mat4 INV_VIEW_ORIGIN;\n'
                                    '    mat4 PROJECTION;\n'
                                    '    mat4 INV_PROJECTION;\n'
                                    '    vec4 CAMERA_POSITION;\n'
                                    '    vec2 NEAR_FAR;\n'
                                    '    vec2 JITTER_DELTA;\n'
                                    '    vec2 JITTER_OFFSET;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=2) uniform viewProjection\n'
                                    '{\n'
                                    '    mat4 VIEW_PROJECTION;\n'
                                    '    mat4 PREV_VIEW_PROJECTION;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=3) uniform lightConstants\n'
                                    '{\n'
                                    '    vec4 LIGHT_POSITION;\n'
                                    '    vec4 LIGHT_DIRECTION;\n'
                                    '    vec4 LIGHT_COLOR;\n'
                                    '    mat4 SHADOW_MATRIX;\n'
                                    '};\n'
                                    '\n'
                                    'const int MAX_BONES_PER_VERTEX = 4;\n'
                                    'const int MAX_BONES = 100;\n'
                                    'const float SHADOW_BIAS = -0.0001;\n'
                                    '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                    '\n'
                                    '\n'
                                    'float get_luminance(vec3 color)\n'
                                    '{\n'
                                    '    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n'
                                    '}\n'
                                    '\n'
                                    'float get_linear_luminance(vec3 LinearColor)\n'
                                    '{\n'
                                    '    return dot(LinearColor, vec3(0.3, 0.59, 0.11));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float depth_to_linear_depth(float depth)\n'
                                    '{\n'
                                    '    const float zNear = NEAR_FAR.x;\n'
                                    '    const float zFar = NEAR_FAR.y;\n'
                                    '    \n'
                                    '    depth = depth * 2.0 - 1.0;\n'
                                    '    \n'
                                    '    return 2.0 * zNear * zFar / (zFar + zNear - depth * (zFar - zNear));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float linear_depth_to_depth(float linear_depth)\n'
                                    '{\n'
                                    '    const float zNear = NEAR_FAR.x;\n'
                                    '    const float zFar = NEAR_FAR.y;\n'
                                    '    \n'
                                    '    float depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                    '    \n'
                                    '    return depth * 0.5 + 0.5;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 depth_to_relative_world(vec2 tex_coord, float depth)\n'
                                    '{\n'
                                    '    vec4 clip_coord = vec4(tex_coord * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                    '    vec4 relative_pos = INV_VIEW_ORIGIN * INV_PROJECTION * clip_coord;\n'
                                    '    relative_pos /= relative_pos.w;\n'
                                    '    return relative_pos;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 linear_depth_to_relative_world(vec2 tex_coord, float linear_depth)\n'
                                    '{\n'
                                    '    \n'
                                    '    float depth = linear_depth_to_depth(linear_depth);\n'
                                    '\n'
                                    '    \n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    return depth_to_relative_world(tex_coord, depth);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'float PseudoRandom(vec2 xy)\n'
                                    '{\n'
                                    '    vec2 pos = fract(xy / 128.0f) * 128.0f + vec2(-64.340622f, -72.465622f);\n'
                                    '\n'
                                    '    \n'
                                    '    return fract(dot(pos.xyx * pos.xyy, vec3(20.390625f, 60.703125f, 2.4281209f)));\n'
                                    '}\n'
                                    '\n'
                                    'float rand(vec2 co){\n'
                                    '    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n'
                                    '}\n'
                                    '\n'
                                    'float rand2(vec4 seed4){\n'
                                    '    float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));\n'
                                    '    return fract(sin(dot_product) * 43758.5453);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 invert_y(vec3 vector)\n'
                                    '{\n'
                                    '    return vec3(vector.x, -vector.y, vector.z);\n'
                                    '}\n'
                                    '#endif /* UUID_e77aaefb_1a04_384d_928f_4a7739be43fb */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#define UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f\n'
                                    '#endif /* UUID_c4b7602c_07c4_3721_a9a9_e14af08d163f */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "quad.glsl"\n'
                                    '#ifndef UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                                    '#define UUID_09be6e6c_9934_3777_a020_c1b0299d186d\n'
                                    'struct VERTEX_OUTPUT\n'
                                    '{\n'
                                    '    vec2 tex_coord;\n'
                                    '    vec3 position;\n'
                                    '};\n'
                                    '\n'
                                    '#ifdef GL_VERTEX_SHADER\n'
                                    'layout (location = 0) in vec3 vs_in_position;\n'
                                    'layout (location = 1) in vec4 vs_in_color;\n'
                                    'layout (location = 2) in vec3 vs_in_normal;\n'
                                    'layout (location = 3) in vec3 vs_in_tangent;\n'
                                    'layout (location = 4) in vec2 vs_in_tex_coord;\n'
                                    '\n'
                                    'layout (location = 0) out VERTEX_OUTPUT vs_output;\n'
                                    '\n'
                                    'void main() {\n'
                                    '    vs_output.tex_coord = vs_in_tex_coord;\n'
                                    '    vs_output.position = vs_in_position;\n'
                                    '    gl_Position = vec4(vs_in_position, 1.0);\n'
                                    '}\n'
                                    '#endif \n'
                                    '#endif /* UUID_09be6e6c_9934_3777_a020_c1b0299d186d */\n'
                                    '\n'
                                    'uniform sampler2D texture_diffuse;\n'
                                    'uniform sampler2D texture_normal;\n'
                                    'uniform sampler2D texture_velocity;\n'
                                    'uniform sampler2D texture_depth;\n'
                                    '\n'
                                    'uint ReverseBits32( uint bits )\n'
                                    '{\n'
                                    '    bits = ( bits << 16) | ( bits >> 16);\n'
                                    '\tbits = ( (bits & 0x00ff00ff) << 8 ) | ( (bits & 0xff00ff00) >> 8 );\n'
                                    '\tbits = ( (bits & 0x0f0f0f0f) << 4 ) | ( (bits & 0xf0f0f0f0) >> 4 );\n'
                                    '\tbits = ( (bits & 0x33333333) << 2 ) | ( (bits & 0xcccccccc) >> 2 );\n'
                                    '\tbits = ( (bits & 0x55555555) << 1 ) | ( (bits & 0xaaaaaaaa) >> 1 );\n'
                                    '\treturn bits;\n'
                                    '}\n'
                                    '\n'
                                    'vec2 Hammersley( uint Index, uint NumSamples, uvec2 Random )\n'
                                    '{\n'
                                    '\tfloat E1 = fract( float(Index) / NumSamples + float( Random.x & 0xffff ) / (1<<16) );\n'
                                    '\tfloat E2 = float( ReverseBits32(Index) ^ Random.y ) * 2.3283064365386963e-10;\n'
                                    '\treturn vec2( E1, E2 );\n'
                                    '}\n'
                                    '\n'
                                    'float ClampedPow(float X, float Y)\n'
                                    '{\n'
                                    '    return pow(max(abs(X), 0.000001f), Y);\n'
                                    '}\n'
                                    '\n'
                                    'vec4 ImportanceSampleBlinn(vec2 E, float Roughness)\n'
                                    '{\n'
                                    '    float PI = 3.14159265f;\n'
                                    '    float m = Roughness * Roughness;\n'
                                    '    float n = 2 / (m*m) - 2;\n'
                                    '\n'
                                    '    float Phi = 2 * PI * E.x;\n'
                                    '    float CosTheta = ClampedPow(E.y, 1 / (n + 1));\n'
                                    '    float SinTheta = sqrt(1 - CosTheta * CosTheta);\n'
                                    '\n'
                                    '    vec3 H;\n'
                                    '    H.x = SinTheta * cos(Phi);\n'
                                    '    \n'
                                    '    H.y = CosTheta;\n'
                                    '    H.z = SinTheta * sin(Phi);\n'
                                    '\n'
                                    '    float D = (n + 2) / (2 * PI) * ClampedPow(CosTheta, n);\n'
                                    '    float PDF = D * CosTheta;\n'
                                    '\n'
                                    '    return vec4(H, PDF);\n'
                                    '}\n'
                                    '\n'
                                    'mat3 GetTangentBasis(vec3 TangentY)\n'
                                    '{\n'
                                    '    vec3 UpVector = abs(TangentY.z) < 0.999 ? vec3(0, 1, 0) : vec3(0, 0, 1);\n'
                                    '    vec3 TangentX = normalize(cross(UpVector, TangentY));\n'
                                    '    vec3 TangentZ = cross(TangentY, TangentX);\n'
                                    '    return mat3(TangentX, TangentY, TangentZ);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 TangentToWorld(vec3 vector, vec3 TangentY)\n'
                                    '{\n'
                                    '    return GetTangentBasis(TangentY) * vector;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 SampleScreenColor(sampler2D texPrevSceneColor, vec2 UV)\n'
                                    '{\n'
                                    '    vec4 OutColor;\n'
                                    '    OutColor.xyz = textureLod(texPrevSceneColor, UV, 0.0).xyz;\n'
                                    '    OutColor.w = 1;\n'
                                    '\n'
                                    '    \n'
                                    '    vec2 ScreenPos = UV * 2.0 - 1.0;\n'
                                    '\n'
                                    '    \n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    \n'
                                    '    float sharpen = 0.7f;\n'
                                    '    vec2 Vignette = clamp((abs(ScreenPos) - sharpen) / (1.0 - sharpen), 0.0, 1.0);\n'
                                    '    OutColor.w *= clamp(1.0 - length(Vignette), 0.0, 1.0);\n'
                                    '\n'
                                    '    return OutColor;\n'
                                    '}\n'
                                    '\n'
                                    '#ifdef GL_FRAGMENT_SHADER\n'
                                    '#endif '},
 'shader_name': 'screen_space_reflection',
 'uniforms': [('sampler2D', 'texture_diffuse'),
              ('sampler2D', 'texture_normal'),
              ('sampler2D', 'texture_velocity'),
              ('sampler2D', 'texture_depth')]}
